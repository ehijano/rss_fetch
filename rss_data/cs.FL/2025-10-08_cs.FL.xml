<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.FL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.FL</link>
    <description>cs.FL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.FL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Oct 2025 01:45:10 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Wed, 08 Oct 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Iterating Non-Aggregative Structure Compositions</title>
      <link>https://arxiv.org/abs/2510.06019</link>
      <description>arXiv:2510.06019v1 Announce Type: new 
Abstract: An aggregative composition is a binary operation obeying the
  principle that the whole is determined by the sum of its parts. The
  development of graph algebras, on which the theory of formal graph
  languages is built, relies on aggregative compositions that behave
  like disjoint union, except for a set of well-marked interface
  vertices from both sides, that are joined. The same style of
  composition has been considered in the context of relational
  structures, that generalize graphs and use constant symbols to label
  the interface.
  In this paper, we study a non-aggregative composition operation,
  called \emph{fusion}, that joins non-deterministically chosen
  elements from disjoint structures. The sets of structures obtained
  by iteratively applying fusion do not always have bounded
  tree-width, even when starting from a tree-width bounded set.
  First, we prove that the problem of the existence of a bound on the
  tree-width of the closure of a given set under fusion is decidable,
  when the input set is described inductively by a finite
  \emph{hyperedge-replacement} (HR) grammar, written using the
  operations of aggregative composition, forgetting and renaming of
  constants. Such sets are usually called \emph{context-free}.
  Second, assuming that the closure under fusion of a context-free set
  has bounded tree-width, we show that it is the language of an
  effectively constructible HR grammar. A possible application of the
  latter result is the possiblity of checking whether all structures
  from a non-aggregatively closed set having bounded tree-width
  satisfy a given monadic second order logic formula.</description>
      <guid isPermaLink="false">oai:arXiv.org:2510.06019v1</guid>
      <category>cs.FL</category>
      <pubDate>Wed, 08 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Marius Bozga, Radu Iosif, Florian Zuleger</dc:creator>
    </item>
    <item>
      <title>Completing the picture for the Skolem Problem on order-4 linear recurrence sequences</title>
      <link>https://arxiv.org/abs/2409.01221</link>
      <description>arXiv:2409.01221v4 Announce Type: replace 
Abstract: For almost a century, the decidability of the Skolem Problem - that is, the problem of finding whether a given linear recurrence sequence (LRS) has a zero term - has remained open. A breakthrough in the 1980s established that the Skolem Problem is indeed decidable for algebraic LRS of order at most 3, and real algebraic LRS of order at most 4. However, for general algebraic LRS of order 4 the question of decidability has remained open. Our main contribution in this paper is to prove decidability for this last case, i.e. we show that the Skolem Problem is decidable for all algebraic LRS of order at most 4.</description>
      <guid isPermaLink="false">oai:arXiv.org:2409.01221v4</guid>
      <category>cs.FL</category>
      <category>math.NT</category>
      <pubDate>Wed, 08 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Piotr Bacik</dc:creator>
    </item>
    <item>
      <title>Studying homing and synchronizing sequences for Timed Finite State Machines with output delays</title>
      <link>https://arxiv.org/abs/2507.14526</link>
      <description>arXiv:2507.14526v3 Announce Type: replace 
Abstract: The paper introduces final state identification (synchronizing and homing) sequences for Timed Finite State Machines (TFSMs) with output delays and investigates their properties. We formally define the notions of homing sequences (HSs) and synchronizing sequences (SSs) for these TFSMs and demonstrate that several properties that hold for untimed machines do not necessarily apply to timed ones. Furthermore, we explore the applicability of various approaches for deriving SSs and HSs for Timed FSMs with output delays, such as truncated successor tree-based and FSM abstraction-based methods. Correspondingly, we identify the subclasses of TFSMs for which these approaches can be directly applied and those for which other methods are required. Additionally, we evaluate the complexity of existence check and derivation of (shortest) HSs / SSs for TFSMs with output delays.</description>
      <guid isPermaLink="false">oai:arXiv.org:2507.14526v3</guid>
      <category>cs.FL</category>
      <category>cs.CC</category>
      <pubDate>Wed, 08 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Evgenii Vinarskii, Jakub Ruszil, Adam Roman, Natalia Kushik</dc:creator>
    </item>
  </channel>
</rss>
