<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.CC updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.CC</link>
    <description>cs.CC updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.CC" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Sep 2025 04:01:04 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 11 Sep 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>How to Reconfigure Your Alliances</title>
      <link>https://arxiv.org/abs/2509.08798</link>
      <description>arXiv:2509.08798v1 Announce Type: new 
Abstract: Different variations of alliances in graphs have been introduced into the graph-theoretic literature about twenty years ago. More broadly speaking, they can be interpreted as groups that collaborate to achieve a common goal, for instance, defending themselves against possible attacks from outside. In this paper, we initiate the study of reconfiguring alliances. This means that, with the understanding of having an interconnection map given by a graph, we look at two alliances of the same size~$k$ and investigate if there is a reconfiguration sequence (of length at most~$\ell$) formed by alliances of size (at most)~$k$ that transfers one alliance into the other one. Here, we consider different (now classical) movements of tokens: sliding, jumping, addition/removal. We link the latter two regimes by introducing the concept of reconfiguration monotonicity. Concerning classical complexity, most of these reconfiguration problems are \textsf{PSPACE}-complete, although some are solvable in \textsf{Log\-SPACE}. We also consider these reconfiguration questions through the lense of parameterized algorithms and prove various \textsf{FPT}-results, in particular concerning the combined parameter $k+\ell$ or neighborhood diversity together with $k$ or neighborhood diversity together with $k$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.08798v1</guid>
      <category>cs.CC</category>
      <category>cs.DM</category>
      <pubDate>Thu, 11 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Henning Fernau, Kevin Mann</dc:creator>
    </item>
    <item>
      <title>Efficiently Computing Equilibria in Budget-Aggregation Games</title>
      <link>https://arxiv.org/abs/2509.08767</link>
      <description>arXiv:2509.08767v1 Announce Type: cross 
Abstract: Budget aggregation deals with the social choice problem of distributing an exogenously given budget among a set of public projects, given agents' preferences. Taking a game-theoretic perspective, we initialize the study of \emph{budget-aggregation games} where each agent has virtual decision power over some fraction of the budget. This paper investigates the structure and shows efficient computability of Nash equilibria in this setting for various preference models. In particular, we show that Nash equilibria for Leontief utilities can be found in polynomial time, solving an open problem from Brandt et al. [2023].</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.08767v1</guid>
      <category>cs.GT</category>
      <category>cs.CC</category>
      <pubDate>Thu, 11 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Patrick Becker, Alexander Fries, Matthias Greger, Erel Segal-Halevi</dc:creator>
    </item>
    <item>
      <title>On hardness of computing analytic Brouwer degree</title>
      <link>https://arxiv.org/abs/2307.08724</link>
      <description>arXiv:2307.08724v2 Announce Type: replace 
Abstract: We prove that counting the analytic Brouwer degree of rational coefficient polynomial maps in $\operatorname{Map}(\mathbb C^d, \mathbb C^d)$ -- presented in degree-coefficient form -- is hard for the complexity class $\operatorname{\sharp P}$, in the following sense: if there is a randomized polynomial time algorithm that counts the Brouwer degree correctly for a good fraction of all input instances (with coefficients of bounded height where the bound is an input to the algorithm), then $\operatorname{P}^{\operatorname{\sharp P}} =\operatorname{BPP}$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2307.08724v2</guid>
      <category>cs.CC</category>
      <category>math.CO</category>
      <category>math.PR</category>
      <pubDate>Thu, 11 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Somnath Chakraborty</dc:creator>
    </item>
    <item>
      <title>Communication complexity of pointer chasing via the fixed-set lemma</title>
      <link>https://arxiv.org/abs/2507.08919</link>
      <description>arXiv:2507.08919v2 Announce Type: replace 
Abstract: I give a simple proof of a tight communication lower bound for pointer chasing.</description>
      <guid isPermaLink="false">oai:arXiv.org:2507.08919v2</guid>
      <category>cs.CC</category>
      <pubDate>Thu, 11 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Emanuele Viola</dc:creator>
    </item>
    <item>
      <title>On classical advice, sampling advice and complexity assumptions for learning separations</title>
      <link>https://arxiv.org/abs/2408.13880</link>
      <description>arXiv:2408.13880v5 Announce Type: replace-cross 
Abstract: In this paper, we study the relationship between advice in the form of a training set and classical advice. We do this by analyzing the class $\mathsf{BPP/samp}$ and certain variants of it. Specifically, our main result demonstrates that $\mathsf{BPP/samp}$ is a proper subset of the class $\mathsf{P/poly}$, which implies that advice in the form of a training set is strictly weaker than classical advice. This result remains valid when considering quantum advice and a quantum generalization of the training set. Finally, leveraging the insights from our proofs, we identify both sufficient and necessary complexity-theoretic assumptions for the existence of concept classes that exhibit a quantum learning speed-up. We consider both the worst-case setting, where accurate results are required for all inputs, and the average-case setting.</description>
      <guid isPermaLink="false">oai:arXiv.org:2408.13880v5</guid>
      <category>quant-ph</category>
      <category>cs.CC</category>
      <pubDate>Thu, 11 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Jordi P\'erez-Guijarro</dc:creator>
    </item>
    <item>
      <title>A single-loop SPIDER-type stochastic subgradient method for expectation-constrained nonconvex nonsmooth optimization</title>
      <link>https://arxiv.org/abs/2501.19214</link>
      <description>arXiv:2501.19214v2 Announce Type: replace-cross 
Abstract: Many real-world problems, such as those with fairness constraints, involve complex expectation constraints and large datasets, necessitating the design of efficient stochastic methods to solve them. Most existing research focuses on cases with no {constraint} or easy-to-project constraints or deterministic constraints. In this paper, we consider nonconvex nonsmooth stochastic optimization problems with expectation constraints, for which we build a novel exact penalty model. We first show the relationship between the penalty model and the original problem. Then on solving the penalty problem, we present a single-loop SPIDER-type stochastic subgradient method, which utilizes the subgradients of both the objective and constraint functions, as well as the constraint function value at each iteration. Under certain regularity conditions (weaker than Slater-type constraint qualification or strong feasibility assumed in existing works), we establish an iteration complexity result of $O(\epsilon^{-4})$ to reach a near-$\epsilon$ stationary point of the penalized problem in expectation, matching the lower bound for such tasks. Building on the exact penalization, an $(\epsilon,\epsilon)$-KKT point of the original problem is obtained. For a few scenarios, our complexity of either the {objective} sample subgradient or the constraint sample function values can be lower than the state-of-the-art results by a factor of $\epsilon^{-2}$. Moreover, on solving two fairness-constrained problems and a multi-class Neyman-Pearson classification problem, our method is significantly (up to 466 times) faster than the state-of-the-art algorithms, including switching subgradient method and inexact proximal point methods.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.19214v2</guid>
      <category>math.OC</category>
      <category>cs.CC</category>
      <category>cs.LG</category>
      <category>cs.NA</category>
      <category>math.NA</category>
      <pubDate>Thu, 11 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Wei Liu, Yangyang Xu</dc:creator>
    </item>
    <item>
      <title>Subset Sum in Near-Linear Pseudopolynomial Time and Polynomial Space</title>
      <link>https://arxiv.org/abs/2508.04726</link>
      <description>arXiv:2508.04726v2 Announce Type: replace-cross 
Abstract: Given a multiset $A = \{a_1, \dots, a_n\}$ of positive integers and a target integer $t$, the Subset Sum problem asks if there is a subset of $A$ that sums to $t$. Bellman's [1957] classical dynamic programming algorithm runs in $O(nt)$ time and $O(t)$ space. Since then, much work has been done to reduce both the time and space usage.
  Notably, Bringmann [SODA 2017] uses a two-step color-coding technique to obtain a randomized algorithm that runs in $\tilde{O}(n+t)$ time and $\tilde{O}(t)$ space. Jin, Vyas and Williams [SODA 2021] build upon the algorithm given by Bringmann, using a clever algebraic trick first seen in Kane's Logspace algorithm, to obtain an $\tilde{O}(nt)$ time and $\tilde{O}(\log(nt))$ space randomized algorithm. A SETH-based lower-bound established by Abboud et al. [SODA 2019] shows that Bringmann's algorithm is likely to have near-optimal time complexity.
  We build on the techniques used by Jin et al. to obtain a randomized algorithm running in $\tilde{O}(n+t)$ time and $\tilde{O}(n^2 + n \log^2 t)$ space, resulting in an algorithm with near-optimal runtime that also runs in polynomial space. We use a multipoint evaluation-based approach to speed up a bottleneck step in their algorithm.
  We also provide a simple polynomial space deterministic algorithm that runs in $\tilde{O}(n^2t)$ time and $\tilde{O}(n \log^2 t)$ space.</description>
      <guid isPermaLink="false">oai:arXiv.org:2508.04726v2</guid>
      <category>cs.DS</category>
      <category>cs.CC</category>
      <pubDate>Thu, 11 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-sa/4.0/</dc:rights>
      <dc:creator>Thejas Radhika Sajith</dc:creator>
    </item>
  </channel>
</rss>
