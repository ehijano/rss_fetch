<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.CG updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.CG</link>
    <description>cs.CG updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.CG" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Mar 2025 05:00:20 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Tue, 04 Mar 2025 00:00:00 -0500</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Unit Edge-Length Rectilinear Drawings with Crossings and Rectangular Faces</title>
      <link>https://arxiv.org/abs/2503.01526</link>
      <description>arXiv:2503.01526v1 Announce Type: new 
Abstract: Unit edge-length drawings, rectilinear drawings (where each edge is either a horizontal or a vertical segment), and rectangular face drawings are among the most studied subjects in Graph Drawing. However, most of the literature on these topics refers to planar graphs and planar drawings. In this paper we study drawings with all the above nice properties but that can have edge crossings; we call them Unit Edge length Rectilinear drawings with Rectangular Faces (UER-RF drawings). We consider crossings as dummy vertices and apply the unit edge-length convention to the edge segments connecting any two (real or dummy) vertices. Note that UER-RF drawings are grid drawings (vertices are placed at distinct integer coordinates), which is another classical requirement of graph visualizations. We present several efficient and easily implementable algorithms for recognizing graphs that admit UER-RF drawings and for constructing such drawings if they exist. We consider restrictions on the degree of the vertices or on the size of the faces. For each type of restriction, we consider both the general unconstrained setting and a setting in which either the external boundary of the drawing is fixed or the rotation system of the graph is fixed as part of the input.</description>
      <guid isPermaLink="false">oai:arXiv.org:2503.01526v1</guid>
      <category>cs.CG</category>
      <pubDate>Tue, 04 Mar 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Patrizio Angelini, Carla Binucci, Giuseppe Di Battista, Emilio Di Giacomo, Walter Didimo, Fabrizio Grosso, Giacomo Ortali, Ioannis G. Tollis</dc:creator>
    </item>
    <item>
      <title>Counterexamples to Proofs for Volumetric Parameterization of Topological Sweeps</title>
      <link>https://arxiv.org/abs/2503.01573</link>
      <description>arXiv:2503.01573v1 Announce Type: new 
Abstract: Harmonic maps are important in generating parameterizations for various domains, particularly in two and three dimensions. General extensions of two-dimensional harmonic parameterizations for volumetric parameterizations are known to fail in a variety of contexts, though more specialized volumetric parameterizations have been proposed. This work provides and contextualizes a counterexample to various proposed proofs that employ harmonic maps to sweep a parameterization from a base surface, $\Gamma_0$, to the entire domain of a geometry that is homeomorphic to $\Gamma_0\times[0,1]$ or $\Gamma_0\times S^1$. While this does not negate the potential value of such topological sweep parameterizations, it does clarify that these swept parameterizations come with no inherent guarantees of bijectivity, as they may in two dimensions.</description>
      <guid isPermaLink="false">oai:arXiv.org:2503.01573v1</guid>
      <category>cs.CG</category>
      <pubDate>Tue, 04 Mar 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Caleb B. Goates, Kendrick M. Shepherd</dc:creator>
    </item>
    <item>
      <title>A Note on the Time Complexity of Using Subdivision Methods for the Approximation of Fibers</title>
      <link>https://arxiv.org/abs/2503.01626</link>
      <description>arXiv:2503.01626v1 Announce Type: new 
Abstract: Subdivision methods such as quadtrees, octrees, and higher-dimensional orthrees are standard practice in different domains of computer science. We can use these methods to represent given geometries, such as curves, meshes, or surfaces. This representation is achieved by splitting some bounding voxel recursively while further splitting only sub-voxels that intersect with the given geometry. It is fairly known that subdivision methods are more efficient than traversing a fine-grained voxel grid. In this short note, we propose another outlook on analyzing the construction time complexity of orthrees to represent implicitly defined geometries that are fibers (preimages) of some function. This complexity is indeed asymptotically better than traversing dense voxel grids, under certain conditions, which we specify in the note. In fact, the complexity is output sensitive, and is closely related to the Hausdorff measure and Hausdorff dimension of the resulting geometry.</description>
      <guid isPermaLink="false">oai:arXiv.org:2503.01626v1</guid>
      <category>cs.CG</category>
      <category>cs.RO</category>
      <pubDate>Tue, 04 Mar 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Michael M. Bilevich, Dan Halperin</dc:creator>
    </item>
    <item>
      <title>Visualization of Event Graphs for Train Schedules</title>
      <link>https://arxiv.org/abs/2503.01808</link>
      <description>arXiv:2503.01808v1 Announce Type: new 
Abstract: Software that is used to compute or adjust train schedules is based on so-called event graphs. The vertices of such a graph correspond to events; each event is associated with a point in time, a location, and a train. A train line corresponds to a sequence of events (ordered by time) that are associated with the same train. The event graph has a directed edge from an earlier to a later event if they are consecutive along a train line. Events that occur at the same location do not occur at the same time. In this paper, we present a way to visualize such graphs, namely time-space diagrams. A time-space diagram is a straight-line drawing of the event graph with the additional constraint that all vertices that belong to the same location lie on the same horizontal line and that the x-coordinate of each vertex is given by its point in time. Hence, it remains to determine the y-coordinates of the locations. A good drawing of a time-space diagram supports users (or software developers) when creating (software for computing) train schedules. To enhance readability, we aim to minimize the number of turns in time-space diagrams. To this end, we establish a connection between this problem and Maximum Betweenness. Then we develop exact reduction rules to reduce the instance size. We also propose a parameterized algorithm and devise a heuristic that we evaluate experimentally on a real-world dataset.</description>
      <guid isPermaLink="false">oai:arXiv.org:2503.01808v1</guid>
      <category>cs.CG</category>
      <pubDate>Tue, 04 Mar 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Johann Hartleb, Marie Schmidt, Samuel Wolf, Alexander Wolff</dc:creator>
    </item>
    <item>
      <title>VF-Plan: Bridging the Art Gallery Problem and Static LiDAR Scanning with Visibility Field Optimization</title>
      <link>https://arxiv.org/abs/2503.01562</link>
      <description>arXiv:2503.01562v1 Announce Type: cross 
Abstract: Viewpoint planning is crucial for 3D data collection and autonomous navigation, yet existing methods often miss key optimization objectives for static LiDAR, resulting in suboptimal network designs. The Viewpoint Planning Problem (VPP), which builds upon the Art Gallery Problem (AGP), requires not only full coverage but also robust registrability and connectivity under limited sensor views. We introduce a greedy optimization algorithm that tackles these VPP and AGP challenges through a novel Visibility Field (VF) approach. The VF captures visibility characteristics unique to static LiDAR, enabling a reduction from 2D to 1D by focusing on medial axis and joints. This leads to a minimal, fully connected viewpoint network with comprehensive coverage and minimal redundancy. Experiments across diverse environments show that our method achieves high efficiency and scalability, matching or surpassing expert designs. Compared to state-of-the-art methods, our approach achieves comparable viewpoint counts (VC) while reducing Weighted Average Path Length (WAPL) by approximately 95\%, indicating a much more compact and connected network. Dataset and source code will be released upon acceptance.</description>
      <guid isPermaLink="false">oai:arXiv.org:2503.01562v1</guid>
      <category>cs.RO</category>
      <category>cs.CG</category>
      <pubDate>Tue, 04 Mar 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-sa/4.0/</dc:rights>
      <dc:creator>Biao Xionga, Longjun Zhanga, Ruiqi Huanga, Junwei Zhoua, Bojian Wub, Fashuai Lic</dc:creator>
    </item>
    <item>
      <title>Initial Placement for Fruchterman--Reingold Force Model With Coordinate Newton Direction</title>
      <link>https://arxiv.org/abs/2412.20317</link>
      <description>arXiv:2412.20317v3 Announce Type: replace 
Abstract: Graph drawing is a fundamental task in information visualization, with the Fruchterman--Reingold (FR) force model being one of the most popular choices. We can interpret this visualization task as a continuous optimization problem, which can be solved using the FR algorithm, the original algorithm for this force model, or the L-BFGS algorithm, a quasi-Newton method. However, both algorithms suffer from twist problems and are computationally expensive per iteration, which makes achieving high-quality visualizations for large-scale graphs challenging. In this research, we propose a new initial placement based on the stochastic coordinate descent to accelerate the optimization process. We first reformulate the problem as a discrete optimization problem using a hexagonal lattice and then iteratively update a randomly selected vertex along the coordinate Newton direction. We can use the FR or L-BFGS algorithms to obtain the final placement. We demonstrate the effectiveness of our proposed approach through experiments, highlighting the potential of coordinate descent methods for graph drawing tasks. Additionally, we suggest combining our method with other graph drawing techniques for further improvement. We also discuss the relationship between our proposed method and broader graph-related applications.</description>
      <guid isPermaLink="false">oai:arXiv.org:2412.20317v3</guid>
      <category>cs.CG</category>
      <pubDate>Tue, 04 Mar 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Hiroki Hamaguchi, Naoki Marumo, Akiko Takeda</dc:creator>
    </item>
    <item>
      <title>Topological Point Cloud Clustering</title>
      <link>https://arxiv.org/abs/2303.16716</link>
      <description>arXiv:2303.16716v3 Announce Type: replace-cross 
Abstract: We present Topological Point Cloud Clustering (TPCC), a new method to cluster points in an arbitrary point cloud based on their contribution to global topological features. TPCC synthesizes desirable features from spectral clustering and topological data analysis and is based on considering the spectral properties of a simplicial complex associated to the considered point cloud. As it is based on considering sparse eigenvector computations, TPCC is similarly easy to interpret and implement as spectral clustering. However, by focusing not just on a single matrix associated to a graph created from the point cloud data, but on a whole set of Hodge-Laplacians associated to an appropriately constructed simplicial complex, we can leverage a far richer set of topological features to characterize the data points within the point cloud and benefit from the relative robustness of topological techniques against noise. We test the performance of TPCC on both synthetic and real-world data and compare it with classical spectral clustering.</description>
      <guid isPermaLink="false">oai:arXiv.org:2303.16716v3</guid>
      <category>math.AT</category>
      <category>cs.CG</category>
      <category>cs.LG</category>
      <category>cs.SI</category>
      <pubDate>Tue, 04 Mar 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:journal_reference>ICML 2023 - 40th International Conference on Machine Learning (ICML)</arxiv:journal_reference>
      <dc:creator>Vincent P. Grande, Michael T. Schaub</dc:creator>
    </item>
    <item>
      <title>A census of graph-drawing algorithms based on generalized transversal structures</title>
      <link>https://arxiv.org/abs/2403.18980</link>
      <description>arXiv:2403.18980v3 Announce Type: replace-cross 
Abstract: We present two graph drawing algorithms based on the recently defined "grand-Schnyder woods", which are a far-reaching generalization of the classical Schnyder woods. The first is a straight-line drawing algorithm for plane graphs with faces of degree 3 and 4 with no separating 3-cycle, while the second is a rectangular drawing algorithm for the dual of such plane graphs.
  In our algorithms, the coordinates of the vertices are defined in a global manner, based on the underlying grand-Schnyder woods. The grand-Schnyder woods and drawings are computed in linear time.
  When specializing our algorithms to special classes of plane graphs, we recover the following known algorithms: (1) He's algorithm for rectangular drawing of 3-valent plane graphs, based on transversal structures, (2) Fusy's algorithm for the straight-line drawing of triangulations of the square, based on transversal structures, (3) Bernardi and Fusy's algorithm for the orthogonal drawing of 4-valent plane graphs, based on 2-orientations, (4) Barriere and Huemer's algorithm for the straight-line drawing of quadrangulations, based on separating decompositions.
  Our contributions therefore provide a unifying perspective on a large family of graph drawing algorithms that were originally defined on different classes of plane graphs and were based on seemingly different combinatorial structures.</description>
      <guid isPermaLink="false">oai:arXiv.org:2403.18980v3</guid>
      <category>math.CO</category>
      <category>cs.CG</category>
      <pubDate>Tue, 04 Mar 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Olivier Bernardi, \'Eric Fusy, Shizhe Liang</dc:creator>
    </item>
  </channel>
</rss>
