<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.FL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.FL</link>
    <description>cs.FL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.FL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Jul 2025 01:39:56 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Tue, 15 Jul 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Algebraic Closure of Matrix Sets Recognized by 1-VASS</title>
      <link>https://arxiv.org/abs/2507.09373</link>
      <description>arXiv:2507.09373v1 Announce Type: new 
Abstract: It is known how to compute the Zariski closure of a finitely generated monoid of matrices and, more generally, of a set of matrices specified by a regular language. This result was recently used to give a procedure to compute all polynomial invariants of a given affine program. Decidability of the more general problem of computing all polynomial invariants of affine programs with recursive procedure calls remains open. Mathematically speaking, the core challenge is to compute the Zariski closure of a set of matrices defined by a context-free language. In this paper, we approach the problem from two sides: Towards decidability, we give a procedure to compute the Zariski closure of sets of matrices given by one-counter languages (that is, languages accepted by one-dimensional vector addition systems with states and zero tests), a proper subclass of context-free languages. On the other side, we show that the problem becomes undecidable for indexed languages, a natural extension of context-free languages corresponding to nested pushdown automata. One of our main technical tools is a novel adaptation of Simon's factorization forests to infinite monoids of matrices.</description>
      <guid isPermaLink="false">oai:arXiv.org:2507.09373v1</guid>
      <category>cs.FL</category>
      <category>cs.LO</category>
      <category>math.AG</category>
      <pubDate>Tue, 15 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Rida Ait El Manssour, Mahsa Naraghi, Mahsa Shirmohammadi, James Worrell</dc:creator>
    </item>
    <item>
      <title>A Divide and Conquer Algorithm for Deciding Group Cellular Automata Dynamics</title>
      <link>https://arxiv.org/abs/2507.09761</link>
      <description>arXiv:2507.09761v1 Announce Type: new 
Abstract: We prove that many dynamical properties of group cellular automata (i.e., cellular automata defined on any finite group and with global rule which is an endomorphism), including surjectivity, injectivity, sensitivity to initial conditions, strong transitivity, positive expansivity, and topological entropy, can be decided by decomposing them into a set of much simpler group cellular automata. To be more specific, we provide a novel algorithmic technique allowing one to decompose the group cellular automaton to be studied into a finite number of group cellular automata, some of them defined on abelian groups, while others, if any, defined on products of simple non-abelian isomorphic groups.
  It is worth noting that the groups resulting from the decomposition only depend on the original group and therefore they are completely independent of both the automaton and the property under investigation. As a result, they do not inherit any aspect of the complexity of the automaton under investigation.
  We prove that the group cellular automata obtained by the decomposition preserve dynamical properties and turn out to be much easier to analyze if compared to the original cellular automaton. As a consequence of these results, we show that injectivity, surjectivity and sensitivity to initial conditions are decidable properties and that no strongly transitive, and therefore no positively expansive, group cellular automata defined on non-abelian groups exist. Moreover, we prove that the topological entropy of a group cellular automaton can be computed, provided we know how to compute the topological entropy for group cellular automata defined on products of simple non-abelian isomorphic groups and on abelian groups.</description>
      <guid isPermaLink="false">oai:arXiv.org:2507.09761v1</guid>
      <category>cs.FL</category>
      <category>cs.DM</category>
      <pubDate>Tue, 15 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Niccolo' Castronuovo, Alberto Dennunzio, Luciano Margara</dc:creator>
    </item>
    <item>
      <title>Rule-based Generation of de Bruijn Sequences: Memory and Learning</title>
      <link>https://arxiv.org/abs/2507.09764</link>
      <description>arXiv:2507.09764v1 Announce Type: new 
Abstract: We investigate binary sequences generated by non-Markovian rules with memory length $\mu$, similar to those adopted in Elementary Cellular Automata. This generation procedure is equivalente to a shift register and certain rules produce sequences with maximal periods, known as de Bruijn sequences. We introduce a novel methodology for generating de Bruijn sequences that combines: (i) a set of derived properties that significantly reduce the space of feasible generating rules, and (ii) a neural network-based classifier that identifies which rules produce de Bruijn sequences. Experiments for large values of $\mu$ demonstrate the approach's effectiveness and computational efficiency.</description>
      <guid isPermaLink="false">oai:arXiv.org:2507.09764v1</guid>
      <category>cs.FL</category>
      <category>math.DS</category>
      <pubDate>Tue, 15 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Francisco J. Mu\~noz, Juan Carlos Nu\~no</dc:creator>
    </item>
    <item>
      <title>Words with factor somplexity $2n+1$ and minimal critical exponent</title>
      <link>https://arxiv.org/abs/2507.09387</link>
      <description>arXiv:2507.09387v1 Announce Type: cross 
Abstract: We show that words with factor complexity 2n+1 have critical exponent at least $\mu$, where $\mu=2+\frac{1}{\lambda^2-1}= 2.4808726\cdots$, where $\lambda=1.7548777$ is the real zero of $x^3-2x+x-1=0$. This confirms a conjecture of Shallit and Shur.</description>
      <guid isPermaLink="false">oai:arXiv.org:2507.09387v1</guid>
      <category>math.CO</category>
      <category>cs.FL</category>
      <pubDate>Tue, 15 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-nd/4.0/</dc:rights>
      <dc:creator>James D. Currie</dc:creator>
    </item>
    <item>
      <title>The Big-O Problem for Max-Plus Automata is Decidable (PSPACE-Complete)</title>
      <link>https://arxiv.org/abs/2304.05229</link>
      <description>arXiv:2304.05229v4 Announce Type: replace 
Abstract: We show that the big-O problem for max-plus automata is decidable and PSPACE-complete. The big-O (or affine domination) problem asks whether, given two max-plus automata computing functions f and g, there exists a constant c such that f &lt; cg+ c. This is a relaxation of the containment problem asking whether f &lt; g, which is undecidable. Our decidability result uses Simon's forest factorisation theorem, and relies on detecting specific elements, that we call witnesses, in a finite semigroup closed under two special operations: stabilisation and flattening.</description>
      <guid isPermaLink="false">oai:arXiv.org:2304.05229v4</guid>
      <category>cs.FL</category>
      <category>cs.LO</category>
      <pubDate>Tue, 15 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Laure Daviaud, David Purser, Marie Tcheng</dc:creator>
    </item>
    <item>
      <title>Completing the picture for the Skolem Problem on order-4 linear recurrence sequences</title>
      <link>https://arxiv.org/abs/2409.01221</link>
      <description>arXiv:2409.01221v3 Announce Type: replace 
Abstract: For almost a century, the decidability of the Skolem Problem - that is, the problem of finding whether a given linear recurrence sequence (LRS) has a zero term - has remained open. A breakthrough in the 1980s established that the Skolem Problem is indeed decidable for algebraic LRS of order at most 3, and real algebraic LRS of order at most 4. However, for general algebraic LRS of order 4 the question of decidability has remained open. Our main contribution in this paper is to prove decidability for this last case, i.e. we show that the Skolem Problem is decidable for all algebraic LRS of order at most 4.</description>
      <guid isPermaLink="false">oai:arXiv.org:2409.01221v3</guid>
      <category>cs.FL</category>
      <category>math.NT</category>
      <pubDate>Tue, 15 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Piotr Bacik</dc:creator>
    </item>
    <item>
      <title>The Complexity of Second-order HyperLTL</title>
      <link>https://arxiv.org/abs/2311.15675</link>
      <description>arXiv:2311.15675v5 Announce Type: replace-cross 
Abstract: We determine the complexity of second-order HyperLTL satisfiability, finite-state satisfiability, and model-checking: All three are equivalent to truth in third-order arithmetic. We also consider two fragments of second-order HyperLTL that have been introduced with the aim to facilitate effective model-checking by restricting the sets one can quantify over. The first one restricts second-order quantification to smallest/largest sets that satisfy a guard while the second one restricts second-order quantification further to least fixed points of (first-order) HyperLTL definable functions. All three problems for the first fragment are still equivalent to truth in third-order arithmetic while satisfiability for the second fragment is $\Sigma_1^2$-complete, and finite-state satisfiability and model-checking are equivalent to truth in second-order arithmetic. Finally, we also introduce closed-world semantics for second-order HyperLTL, where set quantification ranges only over subsets of the model, while set quantification in standard semantics ranges over arbitrary sets of traces. Here, satisfiability for the least fixed point fragment becomes $\Sigma_1^1$-complete, but all other results are unaffected.</description>
      <guid isPermaLink="false">oai:arXiv.org:2311.15675v5</guid>
      <category>cs.LO</category>
      <category>cs.FL</category>
      <pubDate>Tue, 15 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Hadar Frenkel, Ga\"etan Regaud, Martin Zimmermann</dc:creator>
    </item>
    <item>
      <title>Formal Analysis of the Contract Automata Runtime Environment with Uppaal: Modelling, Verification and Testing</title>
      <link>https://arxiv.org/abs/2501.12932</link>
      <description>arXiv:2501.12932v2 Announce Type: replace-cross 
Abstract: Recently, a distributed middleware application called contract automata runtime environment ({\tt CARE}) has been introduced to realise service applications specified using a dialect of finite-state automata. In this paper, we detail the formal modelling, verification and testing of {\tt CARE}. We provide a formalisation as a network of stochastic timed automata. The model is verified against the desired properties with the tool {\sc Uppaal}, utilising exhaustive and statistical model checking techniques. Abstract tests are generated from the {\sc Uppaal} models that are concretised for testing {\tt CARE}. This research emphasises the advantages of employing formal modelling, verification and testing processes to enhance the dependability of an open-source distributed application. We discuss the methodology used for modelling the application and generating concrete tests from the abstract model, addressing the issues that have been identified and fixed.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.12932v2</guid>
      <category>cs.SE</category>
      <category>cs.FL</category>
      <pubDate>Tue, 15 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-sa/4.0/</dc:rights>
      <dc:creator>Davide Basile</dc:creator>
    </item>
  </channel>
</rss>
