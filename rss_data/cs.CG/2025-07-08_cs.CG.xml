<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.CG updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.CG</link>
    <description>cs.CG updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.CG" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Jul 2025 01:36:13 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Tue, 08 Jul 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Input-Sensitive Reconfiguration of Sliding Cubes</title>
      <link>https://arxiv.org/abs/2507.04170</link>
      <description>arXiv:2507.04170v1 Announce Type: new 
Abstract: A configuration of $n$ unit-cube-shaped \textit{modules} (or \textit{robots}) is a lattice-aligned placement of the $n$ modules so that their union is face-connected. The reconfiguration problem aims at finding a sequence of moves that reconfigures the modules from one given configuration to another. The sliding cube model (in which modules are allowed to slide over the face or edge of neighboring modules) is one of the most studied theoretical models for modular robots.
  In the sliding cubes model we can reconfigure between any two shapes in $O(n^2)$ moves ([Abel \textit{et al.} SoCG 2024]). If we are interested in a reconfiguration algorithm into a \textit{compact configuration}, the number of moves can be reduced to the sum of coordinates of the input configuration (a number that ranges from $\Omega(n^{4/3})$ to $O(n^2)$, [Kostitsyna \textit{et al.} SWAT 2024]). We introduce a new algorithm that combines both universal reconfiguration and an input-sensitive bound on the sum of coordinates of both configurations, with additional advantages, such as $O(1)$ amortized computation per move.</description>
      <guid isPermaLink="false">oai:arXiv.org:2507.04170v1</guid>
      <category>cs.CG</category>
      <pubDate>Tue, 08 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Hugo Akitaya, Matias Korman, Frederick Stock</dc:creator>
    </item>
    <item>
      <title>Decremental Greedy Polygons and Polyhedra Without Sharp Angles</title>
      <link>https://arxiv.org/abs/2507.04538</link>
      <description>arXiv:2507.04538v1 Announce Type: new 
Abstract: We show that the max-min-angle polygon in a planar point set can be found in time $O(n\log n)$ and a max-min-solid-angle convex polyhedron in a three-dimensional point set can be found in time $O(n^2)$. We also study the maxmin-angle polygonal curve in 3d, which we show to be $\mathsf{NP}$-hard to find if repetitions are forbidden but can be found in near-cubic time if repeated vertices or line segments are allowed, by reducing the problem to finding a bottleneck cycle in a graph. We formalize a class of problems on which a decremental greedy algorithm can be guaranteed to find an optimal solution, generalizing our max-min-angle and bottleneck cycle algorithms, together with a known algorithm for graph degeneracy.</description>
      <guid isPermaLink="false">oai:arXiv.org:2507.04538v1</guid>
      <category>cs.CG</category>
      <category>cs.DS</category>
      <pubDate>Tue, 08 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>David Eppstein</dc:creator>
    </item>
    <item>
      <title>Computing Largest Subsets of Points Whose Convex Hulls have Bounded Area and Diameter</title>
      <link>https://arxiv.org/abs/2507.04933</link>
      <description>arXiv:2507.04933v1 Announce Type: new 
Abstract: We study the problem of computing a convex region with bounded area and diameter that contains the maximum number of points from a given point set $P$. We show that this problem can be solved in $O(n^6k)$ time and $O(n^3k)$ space, where $n$ is the size of $P$ and $k$ is the maximum number of points in the found region. We experimentally compare this new algorithm with an existing algorithm that does the same but without the diameter constraint, which runs in $O(n^3k)$ time. For the new algorithm, we use different diameters. We use both synthetic data and data from an application in cancer detection, which motivated our research.</description>
      <guid isPermaLink="false">oai:arXiv.org:2507.04933v1</guid>
      <category>cs.CG</category>
      <pubDate>Tue, 08 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Gianmarco Picarella, Marc van Kreveld, Frank Staals, Sjoerd de Vries</dc:creator>
    </item>
    <item>
      <title>Node-neighbor subnetworks and Hk-core decomposition</title>
      <link>https://arxiv.org/abs/2507.04948</link>
      <description>arXiv:2507.04948v1 Announce Type: new 
Abstract: The network homology Hk-core decomposition proposed in this article is similar to the k-core decomposition based on node degrees of the network. The C. elegans neural network and the cat cortical network are used as examples to reveal the symmetry of the deep structures of such networks. First, based on the concept of neighborhood in mathematics, some new concepts are introduced, including such as node-neighbor subnetwork and Betti numbers of the neighbor subnetwork, among others. Then, the Betti numbers of the neighbor subnetwork of each node are computed, which are used to perform Hk-core decomposition of the network homology. The construction process is as follows: the initial network is referred to as the H0-core; the H1-core is obtained from the H0-core by deleting some nodes of certain properties; the H2-core is obtained from the H1-core by deleting some nodes or edges of certain properties; the H3-core is obtained from the H2-core by deleting some nodes of certain properties or by retaining the nodes of certain properties, and so on, which will be described in detail in the main text. Throughout the process, the index of node involved in deleting edge needs to be updated in every step. The Hk-core decomposition is easy to implement in parallel. It has a wide range of applications in many fields such as network science, data science, computational topology, and artificial intelligence. In this article, we also show how to use it to simplify homology calculation, e.g. for the C. elegans neural network, whereas the results of decomposition are the H1-core, the H2-core, and the H3-core. Thus, the simplexes consisting of four highest-order cavities in the H3-core subnetwork can also be directly obtained.</description>
      <guid isPermaLink="false">oai:arXiv.org:2507.04948v1</guid>
      <category>cs.CG</category>
      <pubDate>Tue, 08 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/publicdomain/zero/1.0/</dc:rights>
      <dc:creator>Dinghua Shi, Yang Zhao, Guanrong Chen</dc:creator>
    </item>
    <item>
      <title>Approximation and Hardness of Polychromatic TSP</title>
      <link>https://arxiv.org/abs/2507.04974</link>
      <description>arXiv:2507.04974v1 Announce Type: new 
Abstract: We introduce the Polychromatic Traveling Salesman Problem (PCTSP), where the input is an edge weighted graph whose vertices are partitioned into $k$ equal-sized color classes, and the goal is to find a minimum-length Hamiltonian cycle that visits the classes in a fixed cyclic order. This generalizes the Bipartite TSP (when $k = 2$) and the classical TSP (when $k = n$). We give a polynomial-time $(3 - 2 * 10^{-36})$-approximation algorithm for metric PCTSP. Complementing this, we show that Euclidean PCTSP is APX-hard even in $R^2$, ruling out the existence of a PTAS unless P = NP.</description>
      <guid isPermaLink="false">oai:arXiv.org:2507.04974v1</guid>
      <category>cs.CG</category>
      <pubDate>Tue, 08 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Thomas Schibler, Subhash Suri, Jie Xue</dc:creator>
    </item>
    <item>
      <title>Geometric Deep Learning for Computer-Aided Design: A Survey</title>
      <link>https://arxiv.org/abs/2402.17695</link>
      <description>arXiv:2402.17695v2 Announce Type: replace 
Abstract: Geometric Deep Learning techniques have become a transformative force in the field of Computer-Aided Design (CAD), and have the potential to revolutionize how designers and engineers approach and enhance the design process. By harnessing the power of machine learning-based methods, CAD designers can optimize their workflows, save time and effort while making better informed decisions, and create designs that are both innovative and practical. The ability to process the CAD designs represented by geometric data and to analyze their encoded features enables the identification of similarities among diverse CAD models, the proposition of alternative designs and enhancements, and even the generation of novel design alternatives. This survey offers a comprehensive overview of learning-based methods in computer-aided design across various categories, including similarity analysis and retrieval, 2D and 3D CAD model synthesis, and CAD generation from point clouds, and single/multi-view images. Additionally, it provides a complete list of benchmark datasets and their characteristics, along with open-source codes that have propelled research in this domain. The final discussion delves into the challenges prevalent in this field, followed by potential future research directions in this rapidly evolving field.</description>
      <guid isPermaLink="false">oai:arXiv.org:2402.17695v2</guid>
      <category>cs.CG</category>
      <category>cs.LG</category>
      <pubDate>Tue, 08 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Negar Heidari, Alexandros Iosifidis</dc:creator>
    </item>
    <item>
      <title>Fr\'echet Distance in Unweighted Planar Graphs</title>
      <link>https://arxiv.org/abs/2504.17342</link>
      <description>arXiv:2504.17342v4 Announce Type: replace 
Abstract: The Fr\'echet distance is a distance measure between trajectories in $\Bbb{R}^d$ or walks in a graph $G$. Given constant-time shortest path queries, the Discrete Fr\'echet distance $D_G(P, Q)$ between two walks $P$ and $Q$ can be computed in $O(|P| \cdot |Q|)$ time using a dynamic program. Driemel, van der Hoog, and Rotenberg [SoCG'22] show that for weighted planar graphs this approach is likely tight, as there can be no strongly-subquadratic algorithm to compute a $1.01$-approximation of $D_G(P, Q)$ unless the Orthogonal Vector Hypothesis (OVH) fails.
  Such quadratic-time conditional lower bounds are common to many Fr\'echet distance variants. However, they can be circumvented by assuming that the input comes from some well-behaved class: There exist $(1+\varepsilon)$-approximations, both in weighted graphs and in $\Bbb{R}^d$, that take near-linear time for $c$-packed or $\kappa$-straight walks in the graph. In $\Bbb{R}^d$ there also exists a near-linear time algorithm to compute the Fr\'echet distance whenever all input edges are long compared to the distance.
  We consider computing the Fr\'echet distance in unweighted planar graphs. We show that there exist no strongly-subquadratic $1.25$-approximations of the discrete Fr\'echet distance between two disjoint simple paths in an unweighted planar graph in strongly subquadratic time, unless OVH fails. This improves the previous lower bound, both in terms of generality and approximation factor. We subsequently show that adding graph structure circumvents this lower bound: If the graph is a regular tiling with unit-weighted edges, then there exists an $\tilde{O}((|P| + |Q|)^{1.5})$-time algorithm to compute $D_G(P, Q)$. Our result has natural implications in the plane, as it allows us to define a new class of well-behaved curves that facilitate $(1+\varepsilon)$-approximations of their discrete Fr\'echet distance in subquadratic time.</description>
      <guid isPermaLink="false">oai:arXiv.org:2504.17342v4</guid>
      <category>cs.CG</category>
      <pubDate>Tue, 08 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Ivor van der Hoog, Thijs van der Horst, Eva Rotenberg, Lasse Wulf</dc:creator>
    </item>
  </channel>
</rss>
