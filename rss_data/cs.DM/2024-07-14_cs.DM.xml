<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.DM updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.DM</link>
    <description>cs.DM updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.DM" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Jul 2024 04:04:11 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Mon, 15 Jul 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Tree Independence Number IV. Even-hole-free Graphs</title>
      <link>https://arxiv.org/abs/2407.08927</link>
      <description>arXiv:2407.08927v1 Announce Type: cross 
Abstract: We prove that the tree independence number of every even-hole-free graph is at most polylogarithmic in its number of vertices. More explicitly, we prove that there exists a constant c&gt;0 such that for every integer n&gt;1 every n-vertex even-hole-free graph has a tree decomposition where each bag has stability (independence) number at most c log^10 n. This implies that the Maximum Weight Independent Set problem, as well as several other natural algorithmic problems that are known to be NP-hard in general, can be solved in quasi-polynomial time if the input graph is even-hole-free.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.08927v1</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <category>cs.DS</category>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Maria Chudnovsky, Peter Gartland, Sepehr Hajebi, Daniel Lokshtanov, Sophie Spirkl</dc:creator>
    </item>
    <item>
      <title>The Most Malicious Ma\^{i}tre D'</title>
      <link>https://arxiv.org/abs/2407.09000</link>
      <description>arXiv:2407.09000v1 Announce Type: cross 
Abstract: The problem of the malicious ma\^{i}tre d' is introduced and solved by Peter Winkler in his book Mathematical Puzzles: A Connoisseur's Collection [1]. This problem is about a ma\^{i}tre d' seating diners around a table, trying to maximize the number of diners who don't get napkins. Along with this problem, Winkler introduces a variation called the adaptive ma\^{i}tre d' and presents a strategy. This problem was later investigated and a better strategy was discovered by Acton et al. [2]. We describe an even better strategy which we call ``long trap setting" and prove that it is optimal. We also derive a formula for the expected number of napkinless diners under our optimal strategy.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.09000v1</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-nd/4.0/</dc:rights>
      <dc:creator>Tejo V. Madhavarapu</dc:creator>
    </item>
    <item>
      <title>Integer programs with nearly totally unimodular matrices: the cographic case</title>
      <link>https://arxiv.org/abs/2407.09477</link>
      <description>arXiv:2407.09477v1 Announce Type: cross 
Abstract: It is a notorious open question whether integer programs (IPs), with an integer coefficient matrix $M$ whose subdeterminants are all bounded by a constant $\Delta$ in absolute value, can be solved in polynomial time. We answer this question in the affirmative if we further require that, by removing a constant number of rows and columns from $M$, one obtains a submatrix $A$ that is the transpose of a network matrix.
  Our approach focuses on the case where $A$ arises from $M$ after removing $k$ rows only, where $k$ is a constant. We achieve our result in two main steps, the first related to the theory of IPs and the second related to graph minor theory.
  First, we derive a strong proximity result for the case where $A$ is a general totally unimodular matrix: Given an optimal solution of the linear programming relaxation, an optimal solution to the IP can be obtained by finding a constant number of augmentations by circuits of $[A\; I]$.
  Second, for the case where $A$ is transpose of a network matrix, we reformulate the problem as a maximum constrained integer potential problem on a graph $G$. We observe that if $G$ is $2$-connected, then it has no rooted $K_{2,t}$-minor for $t = \Omega(k \Delta)$. We leverage this to obtain a tree-decomposition of $G$ into highly structured graphs for which we can solve the problem locally. This allows us to solve the global problem via dynamic programming.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.09477v1</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <category>cs.DS</category>
      <category>math.OC</category>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Manuel Aprile, Samuel Fiorini, Gwena\"el Joret, Stefan Kober, Micha{\l} T. Seweryn, Stefan Weltge, Yelena Yuditsky</dc:creator>
    </item>
    <item>
      <title>A recursive linear time modular decomposition algorithm via LexBFS</title>
      <link>https://arxiv.org/abs/0710.3901</link>
      <description>arXiv:0710.3901v4 Announce Type: replace 
Abstract: A module of a graph G is a set of vertices that have the same set of neighbours outside. Modules of a graphs form a so-called partitive family and thereby can be represented by a unique tree MD(G), called the modular decomposition tree. Motivated by the central role of modules in numerous algorithmic graph theory questions, the problem of efficiently computing MD(G) has been investigated since the early 70's. To date the best algorithms run in linear time but are all rather complicated. By combining previous algorithmic paradigms developed for the problem, we are able to present a simpler linear-time that relies on very simple data-structures, namely slice decomposition and sequences of rooted ordered trees.</description>
      <guid isPermaLink="false">oai:arXiv.org:0710.3901v4</guid>
      <category>cs.DM</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Derek Corneil, Michel Habib, Christophe Paul, Marc Tedder</dc:creator>
    </item>
    <item>
      <title>Open Packing in Graphs: Bounds and Complexity</title>
      <link>https://arxiv.org/abs/2406.06982</link>
      <description>arXiv:2406.06982v2 Announce Type: replace 
Abstract: Given a graph $G(V,E)$, a vertex subset $S$ of $G$ is called an open packing in $G$ if no pair of distinct vertices in $S$ have a common neighbour in $G$. The size of a largest open packing in $G$ is called the open packing number, $\rho^o(G)$, of $G$. It would be interesting to note that the open packing number is a lower bound for the total domination number in graphs with no isolated vertices [Henning and Slater, 1999]. Given a graph $G$ and a positive integer $k$, the decision problem OPEN PACKING tests whether $G$ has an open packing of size at least $k$. The optimization problem MAX-OPEN PACKING takes a graph $G$ as input and finds the open packing number of $G$. It is known that OPEN PACKING is NP-complete on split graphs (i.e., $\{2K_2,C_4,C_5\}$-free graphs) [Ramos et al., 2014]. In this work, we complete the study on the complexity (P vs NPC) of OPEN PACKING on $H$-free graphs for every graph $H$ with at least three vertices by proving that OPEN PACKING is (i) NP-complete on $K_{1,3}$-free graphs and (ii) polynomial time solvable on $(P_4\cup rK_1)$-free graphs for every $r\geq 1$. In the course of proving (ii), we show that for every $t\in {2,3,4}$ and $r\geq 1$, if G is a $(P_t\cup rK_1)$-free graph, then $\rho^o(G)$ is bounded above by a linear function of $r$. Moreover, we show that OPEN PACKING parameterized by solution size is W[1]-complete on $K_{1,3}$-free graphs and MAX-OPEN PACKING is hard to approximate within a factor of $n^{(\frac{1}{2}-\delta)}$ for any $\delta&gt;0$ on $K_{1,3}$-free graphs unless P=NP. Further, we prove that OPEN PACKING is (a) NP-complete on $K_{1,4}$-free split graphs and (b) polynomial time solvable on $K_{1,3}$-free split graphs. We prove a similar dichotomy result on split graphs with degree restrictions on the vertices in the independent set of the clique-independent set partition of the split graphs.</description>
      <guid isPermaLink="false">oai:arXiv.org:2406.06982v2</guid>
      <category>cs.DM</category>
      <category>math.CO</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>M. A. Shalu, V. K. Kirubakaran</dc:creator>
    </item>
    <item>
      <title>SAT Encoding of Partial Ordering Models for Graph Coloring Problems</title>
      <link>https://arxiv.org/abs/2403.15961</link>
      <description>arXiv:2403.15961v2 Announce Type: replace-cross 
Abstract: In this paper, we suggest new SAT encodings of the partial-ordering based ILP model for the graph coloring problem (GCP) and the bandwidth coloring problem (BCP). The GCP asks for the minimum number of colors that can be assigned to the vertices of a given graph such that each two adjacent vertices get different colors. The BCP is a generalization, where each edge has a weight that enforces a minimal "distance" between the assigned colors, and the goal is to minimize the "largest" color used. For the widely studied GCP, we experimentally compare our new SAT encoding to the state-of-the-art approaches on the DIMACS benchmark set. Our evaluation confirms that this SAT encoding is effective for sparse graphs and even outperforms the state-of-the-art on some DIMACS instances. For the BCP, our theoretical analysis shows that the partial-ordering based SAT and ILP formulations have an asymptotically smaller size than that of the classical assignment-based model. Our practical evaluation confirms not only a dominance compared to the assignment-based encodings but also to the state-of-the-art approaches on a set of benchmark instances. Up to our knowledge, we have solved several open instances of the BCP from the literature for the first time.</description>
      <guid isPermaLink="false">oai:arXiv.org:2403.15961v2</guid>
      <category>cs.AI</category>
      <category>cs.DM</category>
      <category>cs.DS</category>
      <category>cs.LO</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Daniel Faber, Adalat Jabrayilov, Petra Mutzel</dc:creator>
    </item>
    <item>
      <title>Exploring Algorithmic Solutions for the Independent Roman Domination Problem in Graphs</title>
      <link>https://arxiv.org/abs/2407.03831</link>
      <description>arXiv:2407.03831v2 Announce Type: replace-cross 
Abstract: Given a graph $G=(V,E)$, a function $f:V\to \{0,1,2\}$ is said to be a \emph{Roman Dominating function} if for every $v\in V$ with $f(v)=0$, there exists a vertex $u\in N(v)$ such that $f(u)=2$. A Roman Dominating function $f$ is said to be an \emph{Independent Roman Dominating function} (or IRDF), if $V_1\cup V_2$ forms an independent set, where $V_i=\{v\in V~\vert~f(v)=i\}$, for $i\in \{0,1,2\}$. The total weight of $f$ is equal to $\sum_{v\in V} f(v)$, and is denoted as $w(f)$. The \emph{Independent Roman Domination Number} of $G$, denoted by $i_R(G)$, is defined as min$\{w(f)~\vert~f$ is an IRDF of $G\}$. For a given graph $G$, the problem of computing $i_R(G)$ is defined as the \emph{Minimum Independent Roman Domination problem}. The problem is already known to be NP-hard for bipartite graphs. In this paper, we further study the algorithmic complexity of the problem.
  In this paper, we propose a polynomial-time algorithm to solve the Minimum Independent Roman Domination problem for distance-hereditary graphs, split graphs, and $P_4$-sparse graphs.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.03831v2</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Kaustav Paul, Ankit Sharma, Arti Pandey</dc:creator>
    </item>
  </channel>
</rss>
