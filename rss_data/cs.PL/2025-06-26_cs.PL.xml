<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.PL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.PL</link>
    <description>cs.PL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.PL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Jun 2025 04:00:07 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 26 Jun 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Dynamic Race Detection With O(1) Samples</title>
      <link>https://arxiv.org/abs/2506.20127</link>
      <description>arXiv:2506.20127v1 Announce Type: new 
Abstract: Happens before-based dynamic analysis is the go-to technique for detecting data races in large scale software projects due to the absence of false positive reports. However, such analyses are expensive since they employ expensive vector clock updates at each event, rendering them usable only for in-house testing. In this paper, we present a sampling-based, randomized race detector that processes only constantly many events of the input trace even in the worst case. This is the first sub-linear time (i.e., running in o(n) time where n is the length of the trace) dynamic race detection algorithm; previous sampling based approaches like Pacer run in linear time (i.e., O(n)). Our algorithm is a property tester for HB-race detection -- it is sound in that it never reports any false positive, and on traces that are far, with respect to hamming distance, from any race-free trace, the algorithm detects an HB-race with high probability. Our experimental evaluation of the algorithm and its comparison with state-of-the-art deterministic and sampling based race detectors shows that the algorithm does indeed have significantly low running time, and detects races quite often.</description>
      <guid isPermaLink="false">oai:arXiv.org:2506.20127v1</guid>
      <category>cs.PL</category>
      <pubDate>Thu, 26 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.1145/3571238</arxiv:DOI>
      <arxiv:journal_reference>In Proceedings of the ACM on Programming Languages (PACMPL), Volume 7, Issue POPL, January 2023, Article 45, 28 pages. ACM</arxiv:journal_reference>
      <dc:creator>Mosaad Al Thokair, Minjian Zhang, Umang Mathur, Mahesh Viswanathan</dc:creator>
    </item>
    <item>
      <title>Unfolding Iterators: Specification and Verification of Higher-Order Iterators, in OCaml</title>
      <link>https://arxiv.org/abs/2506.20310</link>
      <description>arXiv:2506.20310v1 Announce Type: new 
Abstract: Albeit being a central notion of every programming language, formally and modularly reasoning about iteration proves itself to be a non-trivial feat, specially in the context of higher-order iteration. In this paper, we present a generic approach to the specification and deductive verification of higher-order iterators, written in the OCaml language. Our methodology follows two key principles: first, the usage of the Gospel specification language to describe the general behaviour of any iteration schema; second, the usage of the Cameleer framework to deductively verify that every iteration client is correct with respect to its logical specification. To validate our approach we develop a set of verified case studies, ranging from classic list iterators to graph algorithms implemented in the widely used OCamlGraph library.</description>
      <guid isPermaLink="false">oai:arXiv.org:2506.20310v1</guid>
      <category>cs.PL</category>
      <category>cs.LO</category>
      <pubDate>Thu, 26 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Ion Chirica, M\'ario Pereira</dc:creator>
    </item>
    <item>
      <title>Deadlock-free Context-free Session Types</title>
      <link>https://arxiv.org/abs/2506.20356</link>
      <description>arXiv:2506.20356v1 Announce Type: new 
Abstract: We consider the problem of statically ensuring that message-passing programs never run into deadlocks. We focus on concurrent functional programs governed by context-free session types, which can express rich tree-like structures not expressible in standard session types. Existing techniques based on context-free session types enforce protocol conformance but not deadlock freedom. We propose a type system that enhances context-free session types with a priority-based approach to deadlock freedom, considering polymorphic and recursive types. Interestingly, the notions needed for avoiding deadlocks fit nicely into this expressive setting. We prove that well-typed programs respect their protocols and never run into deadlocks at run-time; we also demonstrate the expressiveness gains with respect to prior work by means of examples.</description>
      <guid isPermaLink="false">oai:arXiv.org:2506.20356v1</guid>
      <category>cs.PL</category>
      <pubDate>Thu, 26 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Andreia Mordido, Jorge A. P\'erez</dc:creator>
    </item>
    <item>
      <title>PhasePoly: An Optimization Framework forPhase Polynomials in Quantum Circuits</title>
      <link>https://arxiv.org/abs/2506.20624</link>
      <description>arXiv:2506.20624v1 Announce Type: new 
Abstract: Quantum computing has transformative computational power to make classically intractable computing feasible. As the algorithms that achieve practical quantum advantage are beyond manual tuning, quantum circuit optimization has become extremely important and integrated into today's quantum software stack. This paper focuses on a critical type of quantum circuit optimization -- phase-polynomial optimization. Phase polynomials represents a class of building-block circuits that appear frequently in quantum modular exponentials (the most time-consuming component in Shor's factoring algorithm), in quantum approximation optimization algorithms (QAOA), and in Hamiltonian simulations. Compared to prior work on phase polynomials, we focus more on the impact of phase polynomial synthesis in the context of whole-circuit optimization, from single-block phase polynomials to multiple block phase polynomials, from greedy equivalent sub-circuit replacement strategies to a systematic parity matrix optimization approach, and from hardware-oblivious logical circuit optimization to hardware-friendly logical circuit optimization. We also provide a utility of our phase polynomial optimization framework to generate hardware-friendly building blocks. Our experiments demonstrate improvements of up to 50%-with an average total gate reduction of 34.92%-and reductions in the CNOT gate count of up to 48.57%, averaging 28.53%, for logical circuits. Additionally, for physical circuits, we achieve up to 47.65% CNOT gate reduction with an average reduction of 25.47% across a representative set of important benchmarks.</description>
      <guid isPermaLink="false">oai:arXiv.org:2506.20624v1</guid>
      <category>cs.PL</category>
      <category>quant-ph</category>
      <pubDate>Thu, 26 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Zihan Chen, Henry Chen, Yuwei Jin, Minghao Guo, Enhyeok Jang, Jiakang Li, Caitlin Chan, Won Woo Ro, Eddy Z. Zhang</dc:creator>
    </item>
  </channel>
</rss>
