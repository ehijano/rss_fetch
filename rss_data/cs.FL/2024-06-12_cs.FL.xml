<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.FL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.FL</link>
    <description>cs.FL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.FL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Jun 2024 01:48:03 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Wed, 12 Jun 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Learning EFSM Models with Registers in Guards</title>
      <link>https://arxiv.org/abs/2406.07040</link>
      <description>arXiv:2406.07040v1 Announce Type: new 
Abstract: This paper presents an active inference method for Extended Finite State Machines, where inputs and outputs are parametrized, and transitions can be conditioned by guards involving input parameters and internal variables called registers. The method applies to (software) systems that cannot be reset, so it learns an EFSM model of the system on a single trace.</description>
      <guid isPermaLink="false">oai:arXiv.org:2406.07040v1</guid>
      <category>cs.FL</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Germ\'an Vega, Roland Groz, Catherine Oriat, Michael Foster, Neil Walkinshaw, Adenilso Sim\~ao</dc:creator>
    </item>
    <item>
      <title>Database-assisted automata learning</title>
      <link>https://arxiv.org/abs/2406.07208</link>
      <description>arXiv:2406.07208v1 Announce Type: new 
Abstract: This paper presents DAALder (Database-Assisted Automata Learning, with Dutch suffix from leerder), a new algorithm for learning state machines, or automata, specifically deterministic finite-state automata (DFA). When learning state machines from log data originating from software systems, the large amount of log data can pose a challenge. Conventional state merging algorithms cannot efficiently deal with this, as they require a large amount of memory. To solve this, we utilized database technologies to efficiently query a big trace dataset and construct a state machine from it, as databases allow to save large amounts of data on disk while still being able to query it efficiently. Building on research in both active learning and passive learning, the proposed algorithm is a combination of the two. It can quickly find a characteristic set of traces from a database using heuristics from a state merging algorithm. Experiments show that our algorithm has similar performance to conventional state merging algorithms on large datasets, but requires far less memory.</description>
      <guid isPermaLink="false">oai:arXiv.org:2406.07208v1</guid>
      <category>cs.FL</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Hielke Walinga, Robert Baumgartner, Sicco Verwer</dc:creator>
    </item>
    <item>
      <title>Completely reachable automata: a quadratic decision algorithm and a quadratic upper bound on the reaching threshold</title>
      <link>https://arxiv.org/abs/2208.05956</link>
      <description>arXiv:2208.05956v4 Announce Type: replace 
Abstract: A complete deterministic finite (semi)automaton (DFA) with a set of states $Q$ is \emph{completely reachable} if every nonempty subset of $Q$ is the image of the action of some word applied to $Q$. The concept of completely reachable automata appeared, in particular, in connection with synchronizing automata; the class contains the \v{C}ern{\'y} automata and covers several independently investigated subclasses. The notion was introduced by Bondar and Volkov (2016), who also raised the question about the complexity of deciding if an automaton is completely reachable. We develop an algorithm solving this problem, which works in ${\O(|\Sigma|\cdot n^2)}$ time and $\O(|\Sigma|\cdot n)$ space, where $n=|Q|$ is the number of states and $|\Sigma|$ is the size of the input alphabet. In the second part, we prove a weak Don's conjecture for this class of automata: a subset of states $S \subseteq Q$ is reachable with a word of length at most $2n(n-|S|) - n \cdot H_{n-|S|}$, where $H_i$ is the $i$-th harmonic number. This implies a quadratic upper bound in $n$ on the length of the shortest synchronizing words (reset threshold) for the class of completely reachable automata and generalizes earlier upper bounds derived for its subclasses.</description>
      <guid isPermaLink="false">oai:arXiv.org:2208.05956v4</guid>
      <category>cs.FL</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Robert Ferens, Marek Szyku{\l}a</dc:creator>
    </item>
    <item>
      <title>Attributed Tree Transducers for Partial Functions</title>
      <link>https://arxiv.org/abs/2406.06141</link>
      <description>arXiv:2406.06141v2 Announce Type: replace 
Abstract: Attributed tree transducers (atts) have been equipped with regular look-around (i.e., a preprocessing via an attributed relabeling) in order to obtain a more robust class of translations. Here we give further evidence of this robustness: we show that if the class of translations realized by nondeterministic atts with regular look-around is restricted to partial functions, then we obtain exactly the class of translations realized by deterministic atts with regular look-around.</description>
      <guid isPermaLink="false">oai:arXiv.org:2406.06141v2</guid>
      <category>cs.FL</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Sebastian Maneth, Martin Vu</dc:creator>
    </item>
    <item>
      <title>Finding Diverse Strings and Longest Common Subsequences in a Graph</title>
      <link>https://arxiv.org/abs/2405.00131</link>
      <description>arXiv:2405.00131v2 Announce Type: replace-cross 
Abstract: In this paper, we study for the first time the Diverse Longest Common Subsequences (LCSs) problem under Hamming distance. Given a set of a constant number of input strings, the problem asks to decide if there exists some subset $\mathcal X$ of $K$ longest common subsequences whose diversity is no less than a specified threshold $\Delta$, where we consider two types of diversities of a set $\mathcal X$ of strings of equal length: the Sum diversity and the Min diversity defined as the sum and the minimum of the pairwise Hamming distance between any two strings in $\mathcal X$, respectively. We analyze the computational complexity of the respective problems with Sum- and Min-diversity measures, called the Max-Sum and Max-Min Diverse LCSs, respectively, considering both approximation algorithms and parameterized complexity. Our results are summarized as follows. When $K$ is bounded, both problems are polynomial time solvable. In contrast, when $K$ is unbounded, both problems become NP-hard, while Max-Sum Diverse LCSs problem admits a PTAS. Furthermore, we analyze the parameterized complexity of both problems with combinations of parameters $K$ and $r$, where $r$ is the length of the candidate strings to be selected. Importantly, all positive results above are proven in a more general setting, where an input is an edge-labeled directed acyclic graph (DAG) that succinctly represents a set of strings of the same length. Negative results are proven in the setting where an input is explicitly given as a set of strings. The latter results are equipped with an encoding such a set as the longest common subsequences of a specific input string set.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.00131v2</guid>
      <category>cs.DS</category>
      <category>cs.CC</category>
      <category>cs.FL</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Yuto Shida, Giulia Punzi, Yasuaki Kobayashi, Takeaki Uno, Hiroki Arimura</dc:creator>
    </item>
  </channel>
</rss>
