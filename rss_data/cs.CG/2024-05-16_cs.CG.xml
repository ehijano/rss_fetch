<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.CG updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.CG</link>
    <description>cs.CG updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.CG" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 May 2024 04:00:53 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Fri, 17 May 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Voronoi Graph -- Improved raycasting and integration schemes for high dimensional Voronoi diagrams</title>
      <link>https://arxiv.org/abs/2405.10050</link>
      <description>arXiv:2405.10050v1 Announce Type: new 
Abstract: The computation of Voronoi Diagrams, or their dual Delauney triangulations is difficult in high dimensions. In a recent publication Polianskii and Pokorny propose an iterative randomized algorithm facilitating the approximation of Voronoi tesselations in high dimensions. In this paper, we provide an improved vertex search method that is not only exact but even faster than the bisection method that was previously recommended. Building on this we also provide a depth-first graph-traversal algorithm which allows us to compute the entire Voronoi diagram. This enables us to compare the outcomes with those of classical algorithms like qHull, which we either match or marginally beat in terms of computation time. We furthermore show how the raycasting algorithm naturally lends to a Monte Carlo approximation for the volume and boundary integrals of the Voronoi cells, both of which are of importance for finite Volume methods. We compare the Monte-Carlo methods to the exact polygonal integration, as well as a hybrid approximation scheme.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.10050v1</guid>
      <category>cs.CG</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Alexander Sikorski, Martin Heida</dc:creator>
    </item>
    <item>
      <title>Computing $k$-Crossing Visibility through $k$-levels</title>
      <link>https://arxiv.org/abs/2312.02827</link>
      <description>arXiv:2312.02827v2 Announce Type: replace 
Abstract: Let $\mathcal{A}$ be a set of straight lines in the plane (or planes in $\mathbb{R}^3$). The $k$-crossing visibility of a point $p$ on $\mathcal{A}$ is the set $Q$ of points in the elements of $\mathcal{A}$ such that the segment $pq$, where $q\in Q$, intersects at most $k$ elements of $\mathcal{A}$. In this paper, we present algorithms for computing the $k$-crossing visibility. Specifically, we provide $O(n\log n + kn)$ and $O(n\log n + k^2n)$ time algorithms for sets of $n$ lines in the plane and arrangements of $n$ planes in $\mathbb{R}^3$, which are optimal for $k=\Omega(\log n)$ and $k=\Omega(\sqrt{\log n})$, respectively. We also introduce an algorithm for computing $k$-crossing visibilities on polygons, which achieves the same asymptotic time complexity as the one presented by Bahoo et al. The techniques proposed in this paper can be easily adapted for computing $k$-crossing visibilities on other instances where the $(\leq k)$-level is known.</description>
      <guid isPermaLink="false">oai:arXiv.org:2312.02827v2</guid>
      <category>cs.CG</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Frank Duque</dc:creator>
    </item>
  </channel>
</rss>
