<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.LO updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.LO</link>
    <description>cs.LO updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.LO" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Oct 2025 04:00:40 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Fri, 24 Oct 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Resource-Aware Hybrid Quantum Programming with General Recursion and Quantum Control</title>
      <link>https://arxiv.org/abs/2510.20452</link>
      <description>arXiv:2510.20452v1 Announce Type: new 
Abstract: This paper introduces the hybrid quantum language with general recursion $\mathtt{Hyrql}$, driven towards resource-analysis. By design, $\mathtt{Hyrql}$ does not require the specification of an initial set of quantum gates and, hence, is well amenable towards a generic cost analysis. Indeed, languages using different sets of quantum gates lead to representations of quantum circuits whose complexity varies. Towards resource-analysis, a semantics-preserving compilation algorithm to simply-typed term rewrite systems is described; allowing a generic reuse of all known techniques for analyzing the complexity of term rewrite systems. We prove the versatility of this approach through many examples.</description>
      <guid isPermaLink="false">oai:arXiv.org:2510.20452v1</guid>
      <category>cs.LO</category>
      <pubDate>Fri, 24 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Kostia Chardonnet, Emmanuel Hainry, Romain P\'echoux, Thomas Vinet</dc:creator>
    </item>
    <item>
      <title>A Classification of Long-Refinement Graphs for Colour Refinement</title>
      <link>https://arxiv.org/abs/2510.20802</link>
      <description>arXiv:2510.20802v1 Announce Type: cross 
Abstract: The Colour Refinement algorithm is a classical procedure to detect symmetries in graphs, whose most prominent application is in graph-isomorphism tests. The algorithm and its generalisation, the Weisfeiler-Leman algorithm, evaluate local information to compute a colouring for the vertices in an iterative fashion. Different final colours of two vertices certify that no isomorphism can map one onto the other. The number of iterations that the algorithm takes to terminate is its central complexity parameter. For a long time, it was open whether graphs that take the maximum theoretically possible number of Colour Refinement iterations actually exist. Starting from an exhaustive search on graphs of low degrees, Kiefer and McKay proved the existence of infinite families of such long-refinement graphs with degrees 2 and 3, thereby showing that the trivial upper bound on the iteration number of Colour Refinement is tight. In this work, we provide a complete characterisation of the long-refinement graphs with low (or, equivalently, high) degrees. We show that, with one exception, the aforementioned families are the only long-refinement graphs with maximum degree at most 3, and we fully classify the long-refinement graphs with maximum degree 4. To this end, via a reverse-engineering approach, we show that all low-degree long-refinement graphs can be represented as compact strings, and we derive multiple structural insights from this surprising fact. Since long-refinement graphs are closed under taking edge complements, this also yields a classification of long-refinement graphs with high degrees. Kiefer and McKay initiated a search for long-refinement graphs that are only distinguished in the last iteration of Colour Refinement before termination. We conclude it in this submission by showing that such graphs cannot exist.</description>
      <guid isPermaLink="false">oai:arXiv.org:2510.20802v1</guid>
      <category>cs.DM</category>
      <category>cs.CC</category>
      <category>cs.LO</category>
      <category>math.CO</category>
      <pubDate>Fri, 24 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Sandra Kiefer, T. Devini de Mel</dc:creator>
    </item>
    <item>
      <title>Construction Defining Functionality:A Constructive Perspective on Functions through Their Generated Structures</title>
      <link>https://arxiv.org/abs/2506.04278</link>
      <description>arXiv:2506.04278v3 Announce Type: replace 
Abstract: In this work, we propose the concept of Construction Defining Functionality (CDF), which characterizes functions by the structural spaces they generate through iteration,recursion, and logical application. By viewing functions as generators of hierarchical structures, we formalize these generated structural spaces and organize a framework to classify and mathematically model their properties. The organized CDF framework captures the intrinsic constructive behaviors of functions via their generated structural spaces.</description>
      <guid isPermaLink="false">oai:arXiv.org:2506.04278v3</guid>
      <category>cs.LO</category>
      <pubDate>Fri, 24 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Yumiko Nishiyama</dc:creator>
    </item>
    <item>
      <title>CLEVER: A Curated Benchmark for Formally Verified Code Generation</title>
      <link>https://arxiv.org/abs/2505.13938</link>
      <description>arXiv:2505.13938v4 Announce Type: replace-cross 
Abstract: We introduce ${\rm C{\small LEVER}}$, a high-quality, curated benchmark of 161 problems for end-to-end verified code generation in Lean. Each problem consists of (1) the task of generating a specification that matches a held-out ground-truth specification, and (2) the task of generating a Lean implementation that provably satisfies this specification. Unlike prior benchmarks, ${\rm C{\small LEVER}}$ avoids test-case supervision, LLM-generated annotations, and specifications that leak implementation logic or allow vacuous solutions. All outputs are verified post-hoc using Lean's type checker to ensure machine-checkable correctness. We use ${\rm C{\small LEVER}}$ to evaluate several few-shot and agentic approaches based on state-of-the-art language models. These methods all struggle to achieve full verification, establishing it as a challenging frontier benchmark for program synthesis and formal reasoning. Our benchmark can be found on GitHub(https://github.com/trishullab/clever) as well as HuggingFace(https://huggingface.co/datasets/amitayusht/clever). All our evaluation code is also available online(https://github.com/trishullab/clever-prover).</description>
      <guid isPermaLink="false">oai:arXiv.org:2505.13938v4</guid>
      <category>cs.LG</category>
      <category>cs.AI</category>
      <category>cs.LO</category>
      <category>cs.PL</category>
      <category>cs.SE</category>
      <pubDate>Fri, 24 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Amitayush Thakur, Jasper Lee, George Tsoukalas, Meghana Sistla, Matthew Zhao, Stefan Zetzsche, Greg Durrett, Yisong Yue, Swarat Chaudhuri</dc:creator>
    </item>
    <item>
      <title>Transformers are Inherently Succinct</title>
      <link>https://arxiv.org/abs/2510.19315</link>
      <description>arXiv:2510.19315v2 Announce Type: replace-cross 
Abstract: We propose succinctness as a measure of the expressive power of a transformer in describing a concept. To this end, we prove that transformers are highly expressive in that they can represent formal languages substantially more succinctly than standard representations of formal languages like finite automata and Linear Temporal Logic (LTL) formulas. As a by-product of this expressivity, we show that verifying properties of transformers is provably intractable (i.e. EXPSPACE-complete).</description>
      <guid isPermaLink="false">oai:arXiv.org:2510.19315v2</guid>
      <category>cs.FL</category>
      <category>cs.LG</category>
      <category>cs.LO</category>
      <pubDate>Fri, 24 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Pascal Bergstr\"a{\ss}er, Ryan Cotterell, Anthony W. Lin</dc:creator>
    </item>
  </channel>
</rss>
