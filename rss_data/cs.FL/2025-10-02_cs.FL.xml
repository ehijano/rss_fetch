<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.FL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.FL</link>
    <description>cs.FL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.FL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Oct 2025 04:01:01 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 02 Oct 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Time for Timed Monitorability</title>
      <link>https://arxiv.org/abs/2504.10008</link>
      <description>arXiv:2504.10008v3 Announce Type: replace 
Abstract: Monitoring is an important part of the verification toolbox, in particular in situations where exhaustive verification using, e.g., model-checking is infeasible. The goal of online monitoring is to determine the satisfaction or violation of a specification during runtime, i.e., based on finite execution prefixes. However, not every specification is amenable to monitoring, e.g., properties for which no finite execution can witness satisfaction or violation. Monitorability is the question of whether a given specification is amenable to monitoring, and has been extensively studied in discrete time.
  Here, we study the monitorability problem for real-time properties expressed as Timed Automata. For specifications given by deterministic Timed Muller Automata, we prove decidability while we show that the problem is undecidable for specifications given by nondeterministic Timed B\"uchi automata.
  Furthermore, we refine monitorability to also determine bounds on the number of events as well as the time that must pass before monitoring the property may yield an informative verdict. We prove that for deterministic Timed Muller automata, such bounds can be effectively computed. In contrast we show that for nondeterministic Timed B\"uchi automata such bounds are not computable.</description>
      <guid isPermaLink="false">oai:arXiv.org:2504.10008v3</guid>
      <category>cs.FL</category>
      <pubDate>Thu, 02 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Thomas M. Grosen, Sean Kauffman, Kim G. Larsen, Martin Zimmermann</dc:creator>
    </item>
    <item>
      <title>Verification power of rational-valued automata with deterministic and affine states</title>
      <link>https://arxiv.org/abs/2509.07857</link>
      <description>arXiv:2509.07857v2 Announce Type: replace 
Abstract: Previous research has shown that two-way automata with deterministic and affine states have strong verification capabilities, and that this power persists when all transition matrices are restricted to rational values. We investigate rational-valued affine automata as verifiers in Arthur--Merlin proof systems. For one-way verifiers, we give protocols with perfect completeness for two nonregular languages. For two-way verifiers, we first describe a weak protocol that verifies every Turing-recognizable language. We then strengthen this construction with a probabilistic continuation check to obtain strong verification with bounded error, establishing that every language decidable in deterministic exponential space is verifiable in Arthur--Merlin systems by rational-valued two-way affine automata. In a complementary, reduction-based route, we present a Knapsack-game verifier with perfect completeness, which implies that every language in PSPACE admits Arthur--Merlin verification by two-way affine automata with rational transitions. Taken together, these results illuminate the verification power of two-way affine automata while keeping arithmetic fully rational.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.07857v2</guid>
      <category>cs.FL</category>
      <category>cs.CC</category>
      <pubDate>Thu, 02 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Zeyu Chen, Junde Wu</dc:creator>
    </item>
    <item>
      <title>Optimization-based Task and Motion Planning under Signal Temporal Logic Specifications using Logic Network Flow</title>
      <link>https://arxiv.org/abs/2409.19168</link>
      <description>arXiv:2409.19168v3 Announce Type: replace-cross 
Abstract: This paper proposes an optimization-based task and motion planning framework, named "Logic Network Flow", to integrate signal temporal logic (STL) specifications into efficient mixed-binary linear programmings. In this framework, temporal predicates are encoded as polyhedron constraints on each edge of the network flow, instead of as constraints between the nodes as in the traditional Logic Tree formulation. Synthesized with Dynamic Network Flows, Logic Network Flows render a tighter convex relaxation compared to Logic Trees derived from these STL specifications. Our formulation is evaluated on several multi-robot motion planning case studies. Empirical results demonstrate that our formulation outperforms Logic Tree formulation in terms of computation time for several planning problems. As the problem size scales up, our method still discovers better lower and upper bounds by exploring fewer number of nodes during the branch-and-bound process, although this comes at the cost of increased computational load for each node when exploring branches.</description>
      <guid isPermaLink="false">oai:arXiv.org:2409.19168v3</guid>
      <category>cs.RO</category>
      <category>cs.FL</category>
      <pubDate>Thu, 02 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-nd/4.0/</dc:rights>
      <dc:creator>Xuan Lin, Jiming Ren, Samuel Coogan, Ye Zhao</dc:creator>
    </item>
    <item>
      <title>Neural Theorem Proving: Generating and Structuring Proofs for Formal Verification</title>
      <link>https://arxiv.org/abs/2504.17017</link>
      <description>arXiv:2504.17017v2 Announce Type: replace-cross 
Abstract: Formally verifying properties of software code has been a highly desirable task, especially with the emergence of LLM-generated code. In the same vein, they provide an interesting avenue for the exploration of formal verification and mechanistic interpretability. Since the introduction of code-specific models, despite their successes in generating code in Lean4 and Isabelle, the task of generalized theorem proving still remains far from being fully solved and will be a benchmark for reasoning capability in LLMs. In this work, we introduce a framework that generates whole proofs in a formal language to be used within systems that utilize the power of built-in tactics and off-the-shelf automated theorem provers. Our framework includes 3 components: generating natural language statements of the code to be verified, an LLM that generates formal proofs for the given statement, and a module employing heuristics for building the final proof. To train the LLM, we employ a 2-stage fine-tuning process, where we first use SFT-based training to enable the model to generate syntactically correct Isabelle code and then RL-based training that encourages the model to generate proofs verified by a theorem prover. We validate our framework using the miniF2F-test benchmark and the Isabelle proof assistant and design a use case to verify the correctness of the AWS S3 bucket access policy code. We also curate a dataset based on the FVEL\textsubscript{\textnormal{ER}} dataset for future training tasks.</description>
      <guid isPermaLink="false">oai:arXiv.org:2504.17017v2</guid>
      <category>cs.AI</category>
      <category>cs.FL</category>
      <category>cs.LG</category>
      <category>cs.LO</category>
      <pubDate>Thu, 02 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-sa/4.0/</dc:rights>
      <dc:creator>Balaji Rao, William Eiers, Carlo Lipizzi</dc:creator>
    </item>
  </channel>
</rss>
