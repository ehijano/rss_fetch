<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.DM updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.DM</link>
    <description>cs.DM updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.DM" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Dec 2024 05:00:11 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 05 Dec 2024 00:00:00 -0500</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Broadcast Graph Is NP-complete</title>
      <link>https://arxiv.org/abs/2412.03024</link>
      <description>arXiv:2412.03024v1 Announce Type: new 
Abstract: The broadcast model is widely used to describe the process of information dissemination from a single node to all nodes within an interconnected network. In this model, a graph represents the network, where vertices correspond to nodes and edges to communication links. The efficiency of this broadcasting process is evaluated by the broadcast time, the minimum discrete time units required to broadcast from a given vertex. Determining the broadcast time is referred to as the problem Broadcast Time. The set of vertices with the minimum broadcast time among the graph is called the broadcast center. Identifying this center or determining its size are both proven to be NP-hard. For a graph with n vertices, the minimum broadcast time is at least ceil(log2 n). The Broadcast Graph problem asks in a graph of n vertices, whether the broadcast time from any vertex equals ceil(log2 n). Extensive research over the past 50 years has focused on constructing broadcast graphs, which are optimal network topologies for one-to-all communication efficiency. However, the computational complexity of the Broadcast Graph problem has rarely been the subject of study. We believe that the difficulty lies in the mapping reduction for an NP-completeness proof. Consequently, we must construct broadcast graphs for yes-instances and non-broadcast graphs for no-instances. The most closely related result is the NP-completeness of Broadcast Time proved by Slater et al. in 1981. More recently, Fomin et al. has proved that Broadcast Time is fixed-parameter tractable. In this paper, we prove that Broadcast Graph is NP-complete by proving a reduction from Broadcast Time. We also improve the results on the complexity of the broadcast center problem. We show Broadcast Center Size is in delta^2_p, and is DP-hard, implying a complexity upper bound of delta^2_p-complete and a lower bound of DP-hard.</description>
      <guid isPermaLink="false">oai:arXiv.org:2412.03024v1</guid>
      <category>cs.DM</category>
      <pubDate>Thu, 05 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Jinghan Xu, Zhiyuan Li</dc:creator>
    </item>
    <item>
      <title>Summa Summarum: Moessner's Theorem without Dynamic Programming</title>
      <link>https://arxiv.org/abs/2412.03127</link>
      <description>arXiv:2412.03127v1 Announce Type: new 
Abstract: Seventy years on, Moessner's theorem and Moessner's process -- i.e., the additive computation of integral powers -- continue to fascinate. They have given rise to a variety of elegant proofs, to an implementation in hardware, to generalizations, and now even to a popular video, "The Moessner Miracle.'' The existence of this video, and even more its title, indicate that while the "what'' of Moessner's process is understood, its "how'' and even more its "why'' are still elusive. And indeed all the proofs of Moessner's theorem involve more complicated concepts than both the theorem and the process. This article identifies that Moessner's process implements an additive function with dynamic programming. A version of this implementation without dynamic programming (1) gives rise to a simpler statement of Moessner's theorem and (2) can be abstracted and then instantiated into related additive computations. The simpler statement also suggests a simpler and more efficient implementation to compute integral powers as well as simple additive functions to compute, e.g., Factorial numbers. It also reveals the source of -- to quote John Conway and Richard Guy -- Moessner's magic.</description>
      <guid isPermaLink="false">oai:arXiv.org:2412.03127v1</guid>
      <category>cs.DM</category>
      <category>cs.LO</category>
      <category>cs.PL</category>
      <category>cs.SC</category>
      <pubDate>Thu, 05 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.4204/EPTCS.413.5</arxiv:DOI>
      <arxiv:journal_reference>EPTCS 413, 2024, pp. 57-92</arxiv:journal_reference>
      <dc:creator>Olivier Danvy (National University of Singapore)</dc:creator>
    </item>
    <item>
      <title>Recovery of cyclic words by their subwords</title>
      <link>https://arxiv.org/abs/2412.03289</link>
      <description>arXiv:2412.03289v1 Announce Type: new 
Abstract: A problem of reconstructing words from their subwords involves determining the minimum amount of information needed, such as multisets of scattered subwords of a specific length or the frequency of scattered subwords from a given set, in order to uniquely identify a word. In this paper we show that a cyclic word on a binary alphabet can be reconstructed by its scattered subwords of length $\frac34n+4$, and for each $n$ one can find two cyclic words of length $n$ which have the same set of scattered subwords of length $\frac34n-\frac32$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2412.03289v1</guid>
      <category>cs.DM</category>
      <category>math.CO</category>
      <pubDate>Thu, 05 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Sergey Luchinin, Svetlana Puzynina, Micha\"el Rao</dc:creator>
    </item>
    <item>
      <title>Scarf's Algorithm on Arborescence Hypergraphs</title>
      <link>https://arxiv.org/abs/2412.03397</link>
      <description>arXiv:2412.03397v1 Announce Type: new 
Abstract: Scarf's algorithm--a pivoting procedure that finds a dominating extreme point in a down-monotone polytope--can be used to show the existence of a fractional stable matching in hypergraphs. The problem of finding a fractional stable matching in a hypergraph, however, is PPAD-complete. In this work, we study the behavior of Scarf's algorithm on arborescence hypergraphs, the family of hypergraphs in which hyperedges correspond to the paths of an arborescence. For arborescence hypergraphs, we prove that Scarf's algorithm can be implemented to find an integral stable matching in polynomial time. En route to our result, we uncover novel structural properties of bases and pivots for the more general family of network hypergraphs. Our work provides the first proof of polynomial-time convergence of Scarf's algorithm on hypergraphic stable matching problems, giving hope to the possibility of polynomial-time convergence of Scarf's algorithm for other families of polytope.</description>
      <guid isPermaLink="false">oai:arXiv.org:2412.03397v1</guid>
      <category>cs.DM</category>
      <category>math.CO</category>
      <pubDate>Thu, 05 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Karthekeyan Chandrasekaran, Yuri Faenza, Chengyue He, Jay Sethuraman</dc:creator>
    </item>
    <item>
      <title>A note on the no-$(d+2)$-on-a-sphere problem</title>
      <link>https://arxiv.org/abs/2412.02866</link>
      <description>arXiv:2412.02866v1 Announce Type: cross 
Abstract: For fixed $d\geq 3$, we construct subsets of the $d$-dimensional lattice cube $[n]^d$ of size $n^{\frac{3}{d + 1} - o(1)}$ with no $d+2$ points on a sphere or a hyperplane. This improves the previously best known bound of $\Omega(n^{\frac{1}{d-1}})$ due to Thiele from 1995.</description>
      <guid isPermaLink="false">oai:arXiv.org:2412.02866v1</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <pubDate>Thu, 05 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Andrew Suk, Ethan Patrick White</dc:creator>
    </item>
    <item>
      <title>The strong vertex span of trees</title>
      <link>https://arxiv.org/abs/2412.03266</link>
      <description>arXiv:2412.03266v1 Announce Type: cross 
Abstract: The strong vertex (edge) span of a given graph $G$ is the maximum distance that two players can maintain at all times while visiting all vertices (edges) of $G$ and moving either to an adjacent vertex or staying in the current position independently of each other. We introduce the notions of switching walks and triod size of a tree, which are used to determine the strong vertex and the strong edge span of an arbitrary tree. The obtained results are used in an algorithm that computes the strong vertex (edge) span of the input tree in linear time.</description>
      <guid isPermaLink="false">oai:arXiv.org:2412.03266v1</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <pubDate>Thu, 05 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Mateja Gra\v{s}i\v{c}, Chris Mouron, Andrej Taranenko</dc:creator>
    </item>
    <item>
      <title>On arborescence packing augmentation in hypergraphs</title>
      <link>https://arxiv.org/abs/2412.03357</link>
      <description>arXiv:2412.03357v1 Announce Type: cross 
Abstract: We deepen the link between two classic areas of combinatorial optimization: augmentation and packing arborescences. We consider the following type of questions: What is the minimum number of arcs to be added to a digraph so that in the resulting digraph there exists some special kind of packing of arborescences? We answer this question for two problems: $h$-regular \textsf{M}-independent-rooted $(f,g)$-bounded $(\alpha, \beta)$-limited packing of mixed hyperarborescences and $h$-regular $(\ell, \ell')$-bordered $(\alpha, \beta)$-limited packing of $k$ hyperbranchings. We also solve the undirected counterpart of the latter, that is the augmentation problem for $h$-regular $(\ell, \ell')$-bordered $(\alpha, \beta)$-limited packing of $k$ rooted hyperforests. Our results provide a common generalization of a great number of previous results.</description>
      <guid isPermaLink="false">oai:arXiv.org:2412.03357v1</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <pubDate>Thu, 05 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Pierre Hoppenot, Zolt\'an Szigeti</dc:creator>
    </item>
    <item>
      <title>Augmenting a hypergraph to have a matroid-based $(f,g)$-bounded $(\alpha,\beta)$-limited packing of rooted hypertrees</title>
      <link>https://arxiv.org/abs/2412.03363</link>
      <description>arXiv:2412.03363v1 Announce Type: cross 
Abstract: The aim of this paper is to further develop the theory of packing trees in a graph. We first prove the classic result of Nash-Williams \cite{NW} and Tutte \cite{Tu} on packing spanning trees by adapting Lov\'asz' proof \cite{Lov} of the seminal result of Edmonds \cite{Egy} on packing spanning arborescences in a digraph. Our main result on graphs extends the theorem of Katoh and Tanigawa \cite{KT} on matroid-based packing of rooted trees by characterizing the existence of such a packing satisfying the following further conditions: for every vertex $v$, there are a lower bound $f(v)$ and an upper bound $g(v)$ on the number of trees rooted at $v$ and there are a lower bound $\alpha$ and an upper bound $\beta$ on the total number of roots. We also answer the hypergraphic version of the problem. Furthermore, we are able to solve the augmentation version of the latter problem, where the goal is to add a minimum number of edges to have such a packing. The methods developed in this paper to solve these problems may have other applications in the future.</description>
      <guid isPermaLink="false">oai:arXiv.org:2412.03363v1</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <pubDate>Thu, 05 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Pierre Hoppenot, Zolt\'an Szigeti</dc:creator>
    </item>
    <item>
      <title>A sharp version of Talagrand's selector process conjecture and an application to rounding fractional covers</title>
      <link>https://arxiv.org/abs/2412.03540</link>
      <description>arXiv:2412.03540v1 Announce Type: cross 
Abstract: Expectation thresholds arise from a class of integer linear programs (LPs) that are fundamental to the study of thresholds in large random systems. An avenue towards estimating expectation thresholds comes from the fractional relaxation of these integer LPs, which yield the fractional expectation thresholds. Regarding the gap between the integer LPs and their fractional relaxations, Talagrand made a bold conjecture, that the integral and fractional expectation thresholds are within a constant factor of each other. In other words, any small fractional solution can be ``rounded''.
  In this paper, we prove a strong upper bound on the expectation threshold starting from a fractional solution supported on sets with small size. In particular, this resolves Talagrand's conjecture for fractional solutions supported on sets with bounded size. Our key input for rounding the fractional solutions is a sharp version of Talagrand's selector process conjecture that is of independent interest.</description>
      <guid isPermaLink="false">oai:arXiv.org:2412.03540v1</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <category>math.PR</category>
      <pubDate>Thu, 05 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Huy Tuan Pham</dc:creator>
    </item>
    <item>
      <title>Directed Hypercube Routing, a Generalized Lehman-Ron Theorem, and Monotonicity Testing</title>
      <link>https://arxiv.org/abs/2409.02206</link>
      <description>arXiv:2409.02206v2 Announce Type: replace 
Abstract: Motivated by applications to monotonicity testing, Lehman and Ron (JCTA, 2001) proved the existence of a collection of vertex disjoint paths between comparable sub-level sets in the directed hypercube. The main technical contribution of this paper is a new proof method that yields a generalization to their theorem: we prove the existence of two edge-disjoint collections of vertex disjoint paths. Our main conceptual contribution are conjectures on directed hypercube flows with simultaneous vertex and edge capacities of which our generalized Lehman-Ron theorem is a special case. We show that these conjectures imply directed isoperimetric theorems, and in particular, the robust directed Talagrand inequality due to Khot, Minzer, and Safra (SIAM J. on Comp, 2018). These isoperimetric inequalities, that relate the directed surface area (of a set in the hypercube) to its distance to monotonicity, have been crucial in obtaining the best monotonicity testers for Boolean functions. We believe our conjectures pave the way towards combinatorial proofs of these directed isoperimetry theorems.</description>
      <guid isPermaLink="false">oai:arXiv.org:2409.02206v2</guid>
      <category>cs.DM</category>
      <category>cs.DS</category>
      <category>math.CO</category>
      <pubDate>Thu, 05 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Deeparnab Chakrabarty, C. Seshadhri</dc:creator>
    </item>
    <item>
      <title>Incremental computation of the set of period sets</title>
      <link>https://arxiv.org/abs/2410.12077</link>
      <description>arXiv:2410.12077v2 Announce Type: replace 
Abstract: Overlaps between words are crucial in many areas of computer science, such as code design, stringology, and bioinformatics. A self overlapping word is characterized by its periods and borders. A period of a word $u$ is the starting position of a suffix of $u$ that is also a prefix $u$, and such a suffix is called a border. Each word of length, say $n&gt;0$, has a set of periods, but not all combinations of integers are sets of periods. Computing the period set of a word $u$ takes linear time in the length of $u$. We address the question of computing, the set, denoted $\Gamma_n$, of all period sets of words of length $n$. Although period sets have been characterized, there is no formula to compute the cardinality of $\Gamma_n$ (which is exponential in $n$), and the known dynamic programming algorithm to enumerate $\Gamma_n$ suffers from its space complexity. We present an incremental approach to compute $\Gamma_n$ from $\Gamma_{n-1}$, which reduces the space complexity, and then a constructive certification algorithm useful for verification purposes. The incremental approach defines a parental relation between sets in $\Gamma_{n-1}$ and $\Gamma_n$, enabling one to investigate the dynamics of period sets, and their intriguing statistical properties. Moreover, the period set of a word $u$ is the key for computing the absence probability of $u$ in random texts. Thus, knowing $\Gamma_n$ is useful to assess the significance of word statistics, such as the number of missing words in a random text.</description>
      <guid isPermaLink="false">oai:arXiv.org:2410.12077v2</guid>
      <category>cs.DM</category>
      <pubDate>Thu, 05 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-nd/4.0/</dc:rights>
      <dc:creator>Eric Rivals</dc:creator>
    </item>
    <item>
      <title>Strong SDP based bounds on the cutwidth of a graph</title>
      <link>https://arxiv.org/abs/2301.03900</link>
      <description>arXiv:2301.03900v4 Announce Type: replace-cross 
Abstract: Given a linear ordering of the vertices of a graph, the cutwidth of a vertex $v$ with respect to this ordering is the number of edges from any vertex before $v$ (including $v$) to any vertex after $v$ in this ordering. The cutwidth of an ordering is the maximum cutwidth of any vertex with respect to this ordering. We are interested in finding the cutwidth of a graph, that is, the minimum cutwidth over all orderings, which is an NP-hard problem. In order to approximate the cutwidth of a given graph, we present a semidefinite relaxation. We identify several classes of valid inequalities and equalities that we use to strengthen the semidefinite relaxation. These classes are on the one hand the well-known 3-dicycle equations and the triangle inequalities and on the other hand we obtain inequalities from the squared linear ordering polytope and via lifting the linear ordering polytope. The solution of the semidefinite program serves to obtain a lower bound and also to construct a feasible solution and thereby having an upper bound on the cutwidth.
  In order to evaluate the quality of our bounds, we perform numerical experiments on graphs of different sizes and densities. It turns out that we produce high quality bounds for graphs of medium size independent of their density in reasonable time. Compared to that, obtaining bounds for dense instances of the same quality is out of reach for solvers using integer linear programming techniques.</description>
      <guid isPermaLink="false">oai:arXiv.org:2301.03900v4</guid>
      <category>math.OC</category>
      <category>cs.DM</category>
      <pubDate>Thu, 05 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <arxiv:DOI>10.1016/j.cor.2023.106449</arxiv:DOI>
      <dc:creator>Elisabeth Gaar, Diane Puges, Angelika Wiegele</dc:creator>
    </item>
    <item>
      <title>Resolving Sets in Temporal Graphs</title>
      <link>https://arxiv.org/abs/2403.13183</link>
      <description>arXiv:2403.13183v3 Announce Type: replace-cross 
Abstract: A \emph{resolving set} $R$ in a graph $G$ is a set of vertices such that every vertex of $G$ is uniquely identified by its distances to the vertices of $R$. Introduced in the 1970s, this concept has been since then extensively studied from both combinatorial and algorithmic points of view. We propose a generalization of the concept of resolving sets to temporal graphs, \emph{i.e.}, graphs with edge sets that change over discrete time-steps. In this setting, the \emph{temporal distance from $u$ to $v$} is the earliest possible time-step at which a journey with strictly increasing time-steps on edges leaving $u$ reaches $v$, \emph{i.e.}, the first time-step at which $v$ could receive a message broadcast from $u$. A \emph{temporal resolving set} of a temporal graph $\mathcal{G}$ is a subset $R$ of its vertices such that every vertex of $\mathcal{G}$ is uniquely identified by its temporal distances from vertices of $R$.
  We study the problem of finding a minimum-size temporal resolving set, and show that it is NP-complete even on very restricted graph classes and with strong constraints on the time-steps: temporal complete graphs where every edge appears in either time-step~1 or~2, temporal trees where every edge appears in at most two consecutive time-steps, and even temporal subdivided stars where every edge appears in at most two (not necessarily consecutive) time-steps. On the other hand, we give polynomial-time algorithms for temporal paths and temporal stars where every edge appears in exactly one time-step, and give a combinatorial analysis and algorithms for several temporal graph classes where the edges appear in periodic time-steps.</description>
      <guid isPermaLink="false">oai:arXiv.org:2403.13183v3</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <category>cs.DS</category>
      <pubDate>Thu, 05 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Jan Bok, Antoine Dailly, Tuomo Lehtil\"a</dc:creator>
    </item>
  </channel>
</rss>
