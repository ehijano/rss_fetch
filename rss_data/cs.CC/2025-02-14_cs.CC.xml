<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.CC updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.CC</link>
    <description>cs.CC updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.CC" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Feb 2025 05:00:00 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Fri, 14 Feb 2025 00:00:00 -0500</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Oracle Separations for RPH</title>
      <link>https://arxiv.org/abs/2502.09279</link>
      <description>arXiv:2502.09279v1 Announce Type: new 
Abstract: While theoretical computer science primarily works with discrete models of computation, like the Turing machine and the wordRAM, there are many scenarios in which introducing real computation models is more adequate. We want to compare real models of computation with discrete models of computation. We do this by means of oracle separation results.
  We define the notion of a real Turing machine as an extension of the (binary) Turing machine by adding a real tape. Using those machines, we define and study the real polynomial hierarchy RPH. We are interested in RPH as the first level of the hierarchy corresponds to the well-known complexity class ER. It is known that $NP \subseteq ER \subseteq PSPACE$ and furthermore $PH \subseteq RPH \subseteq PSPACE$. We are interested to know if any of those inclusions are tight. In the absence of unconditional separations of complexity classes, we turn to oracle separation. We develop a technique that allows us to transform oracle separation results from the binary world to the real world. As applications, we show there are oracles such that:
  - $RPH^O$ proper subset of $PSPACE^O$,
  - $\Sigma_{k+1}^O$ not contained in $\Sigma_kR^O$, for all $k\geq 0$,
  - $\Sigma_kR^O$ proper subset of $\Sigma_{k+1}R^O$, for all $k\geq 0$,
  - $BQP^O$ not contained in $RPH^O$.
  Our results indicate that ER is strictly contained in PSPACE and that there is a separation between the different levels of the real polynomial hierarchy. We also bound the power of real computations by showing that NP-hard problems are unlikely to be solvable using polynomial time on a realRAM. Furthermore, our oracle separations indicate that polynomial-time quantum computing cannot be simulated on an efficient real Turing machine.</description>
      <guid isPermaLink="false">oai:arXiv.org:2502.09279v1</guid>
      <category>cs.CC</category>
      <pubDate>Fri, 14 Feb 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Thekla Hamm, Lucas Meijer, Tillmann Miltzow, Subhasree Patro</dc:creator>
    </item>
    <item>
      <title>Realizing Graphs with Cut Constraints</title>
      <link>https://arxiv.org/abs/2502.09358</link>
      <description>arXiv:2502.09358v1 Announce Type: new 
Abstract: Given a finite non-decreasing sequence $d=(d_1,\ldots,d_n)$ of natural numbers, the Graph Realization problem asks whether $d$ is a graphic sequence, i.e., there exists a labeled simple graph such that $(d_1,\ldots,d_n)$ is the degree sequence of this graph. Such a problem can be solved in polynomial time due to the Erd\H{o}s and Gallai characterization of graphic sequences. Since vertex degree is the size of a trivial edge cut, we consider a natural generalization of Graph Realization, where we are given a finite sequence $d=(d_1,\ldots,d_n)$ of natural numbers (representing the trivial edge cut sizes) and a list of nontrivial cut constraints $\mathcal{L}$ composed of pairs $(S_j,\ell_j)$ where $S_j\subset \{v_1,\ldots,v_n\}$, and $\ell_j$ is a natural number. In such a problem, we are asked whether there is a simple graph with vertex set $V=\{v_1,\ldots,v_n\}$ such that $v_i$ has degree $d_i$ and $\partial(S_j)$ is an edge cut of size $\ell_j$, for each $(S_j,\ell_j)\in \mathcal{L}$. We show that such a problem is polynomial-time solvable whenever each $S_j$ has size at most three. Conversely, assuming P $\neq$ NP, we prove that it cannot be solved in polynomial time when $\mathcal{L}$ contains pairs with sets of size four, and our hardness result holds even assuming that each $d_i$ of $d$ equals $1$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2502.09358v1</guid>
      <category>cs.CC</category>
      <pubDate>Fri, 14 Feb 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Lucas de Oliveira Silva, V\'itor Gomes Chagas, Samuel Pla\c{c}a de Paula, Greis Yvet Oropeza Quesqu\'en, U\'everton dos Santos Souza</dc:creator>
    </item>
    <item>
      <title>Differentially Private Compression and the Sensitivity of LZ77</title>
      <link>https://arxiv.org/abs/2502.09584</link>
      <description>arXiv:2502.09584v1 Announce Type: new 
Abstract: We initiate the study of differentially private data-compression schemes motivated by the insecurity of the popular "Compress-Then-Encrypt" framework. Data compression is a useful tool which exploits redundancy in data to reduce storage/bandwidth when files are stored or transmitted. However, if the contents of a file are confidential then the length of a compressed file might leak confidential information about the content of the file itself. Encrypting a compressed file does not eliminate this leakage as data encryption schemes are only designed to hide the content of confidential message instead of the length of the message. In our proposed Differentially Private Compress-Then-Encrypt framework, we add a random positive amount of padding to the compressed file to ensure that any leakage satisfies the rigorous privacy guarantee of $(\epsilon,\delta)$-differential privacy. The amount of padding that needs to be added depends on the sensitivity of the compression scheme to small changes in the input, i.e., to what degree can changing a single character of the input message impact the length of the compressed file. While some popular compression schemes are highly sensitive to small changes in the input, we argue that effective data compression schemes do not necessarily have high sensitivity. Our primary technical contribution is analyzing the fine-grained sensitivity of the LZ77 compression scheme (IEEE Trans. Inf. Theory 1977) which is one of the most common compression schemes used in practice. We show that the global sensitivity of the LZ77 compression scheme has the upper bound $\mathcal{O}(W^{2/3}\log n)$ where $W\leq n$ denotes the size of the sliding window. When $W=n$, we show the lower bound $\Omega(n^{2/3}\log^{1/3}n)$ for the global sensitivity of the LZ77 compression scheme which is tight up to a sublogarithmic factor.</description>
      <guid isPermaLink="false">oai:arXiv.org:2502.09584v1</guid>
      <category>cs.CC</category>
      <category>cs.CR</category>
      <pubDate>Fri, 14 Feb 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Jeremiah Blocki, Seunghoon Lee, Brayan Sebasti\'an Yepes Garcia</dc:creator>
    </item>
    <item>
      <title>Deterministic Independent Sets in the Semi-Streaming Model</title>
      <link>https://arxiv.org/abs/2502.09440</link>
      <description>arXiv:2502.09440v1 Announce Type: cross 
Abstract: We consider the independent set problem in the semi-streaming model. For any input graph $G=(V, E)$ with $n$ vertices, an independent set is a set of vertices with no edges between any two elements. In the semi-streaming model, $G$ is presented as a stream of edges and any algorithm must use $\tilde O(n)$ bits of memory to output a large independent set at the end of the stream.
  Prior work has designed various semi-streaming algorithms for finding independent sets. Due to the hardness of finding maximum and maximal independent sets in the semi-streaming model, the focus has primarily been on finding independent sets in terms of certain parameters, such as the maximum degree $\Delta$. In particular, there is a simple randomized algorithm that obtains independent sets of size $\frac n{\Delta+1}$ in expectation, which can also be achieved with high probability using more complicated algorithms. For deterministic algorithms, the best bounds are significantly weaker. In fact, the best we currently know is a straightforward algorithm that finds an $\tilde\Omega\left(\frac n{\Delta^2}\right)$ size independent set.
  We show that this straightforward algorithm is nearly optimal by proving that any deterministic semi-streaming algorithm can only output an $\tilde O\left(\frac n{\Delta^2}\right)$ size independent set. Our result proves a strong separation between the power of deterministic and randomized semi-streaming algorithms for the independent set problem.</description>
      <guid isPermaLink="false">oai:arXiv.org:2502.09440v1</guid>
      <category>cs.DS</category>
      <category>cs.CC</category>
      <pubDate>Fri, 14 Feb 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Daniel Ye</dc:creator>
    </item>
    <item>
      <title>A (1.999999)-approximation ratio for vertex cover problem</title>
      <link>https://arxiv.org/abs/2403.19680</link>
      <description>arXiv:2403.19680v5 Announce Type: replace 
Abstract: The vertex cover problem is a famous combinatorial problem, and its complexity has been heavily studied. While a 2-approximation for it can be trivially obtained, researchers have not been able to approximate it better than 2-o(1). In this paper, by introducing a new semidefinite programming formulation that satisfies new properties, we introduce an approximation algorithm for the vertex cover problem with a performance ratio of 1.999999 on arbitrary graphs, en route to answering an open question about the correctness of the unique games conjecture.</description>
      <guid isPermaLink="false">oai:arXiv.org:2403.19680v5</guid>
      <category>cs.CC</category>
      <pubDate>Fri, 14 Feb 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-sa/4.0/</dc:rights>
      <dc:creator>Majid Zohrehbandian</dc:creator>
    </item>
    <item>
      <title>Limitations of Affine Integer Relaxations for Solving Constraint Satisfaction Problems</title>
      <link>https://arxiv.org/abs/2407.09097</link>
      <description>arXiv:2407.09097v2 Announce Type: replace 
Abstract: We show that various recent algorithms for finite-domain constraint satisfaction problems (CSP), which are based on solving their affine integer relaxations, do not solve all tractable and not even all Maltsev CSPs. This rules them out as candidates for a universal polynomial-time CSP algorithm. The algorithms are $\mathbb{Z}$-affine $k$-consistency, BLP+AIP, BA$^{k}$, and CLAP. We thereby answer a question by Brakensiek, Guruswami, Wrochna, and \v{Z}ivn\'y whether BLP+AIP solves all tractable CSPs in the negative. We also refute a conjecture by Dalmau and Opr\v{s}al (LICS 2024) that every CSP is either solved by $\mathbb{Z}$-affine $k$-consistency or admits a Datalog reduction from 3-colorability. For the cohomological $k$-consistency algorithm, that is also based on affine relaxations, we show that it correctly solves our counterexample but fails on an NP-complete template.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.09097v2</guid>
      <category>cs.CC</category>
      <pubDate>Fri, 14 Feb 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Moritz Lichter, Benedikt Pago</dc:creator>
    </item>
  </channel>
</rss>
