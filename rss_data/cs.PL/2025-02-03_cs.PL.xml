<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.PL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.PL</link>
    <description>cs.PL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.PL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Feb 2025 05:01:01 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Mon, 03 Feb 2025 00:00:00 -0500</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>SkipFlow: Improving the Precision of Points-to Analysis using Primitive Values and Predicate Edges</title>
      <link>https://arxiv.org/abs/2501.19150</link>
      <description>arXiv:2501.19150v1 Announce Type: new 
Abstract: A typical points-to analysis such as Andersen's or Steensgaard's may lose precision because it ignores the branching structure of the analyzed program. Moreover, points-to analysis typically focuses on objects only, not considering instructions manipulating primitive values. We argue that such an approach leads to an unnecessary precision loss, for example, when primitive constants true and false flow out of method calls. We propose a novel lightweight points-to analysis called SkipFlow that interprocedurally tracks the flow of both primitives and objects, and explicitly captures the branching structure of the code using predicate edges. At the same time, however, SkipFlow is as lightweight and scalable as possible, unlike a traditional flow-sensitive analysis. We apply SkipFlow to GraalVM Native Image, a closed-world solution to building standalone binaries for Java applications. We evaluate the implementation using a set of microservice applications as well as well-known benchmark suites. We show that SkipFlow reduces the size of the application in terms of reachable methods by 9% on average without significantly increasing the analysis time.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.19150v1</guid>
      <category>cs.PL</category>
      <pubDate>Mon, 03 Feb 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>David Kozak, Codrut Stancu, Tom\'a\v{s} Vojnar, Christian Wimmer</dc:creator>
    </item>
    <item>
      <title>A Comprehensive Survey of the Lean 4 Theorem Prover: Architecture, Applications, and Advances</title>
      <link>https://arxiv.org/abs/2501.18639</link>
      <description>arXiv:2501.18639v1 Announce Type: cross 
Abstract: This comprehensive survey examines Lean 4, a state-of-the-art interactive theorem prover and functional programming language. We analyze its architectural design, type system, metaprogramming capabilities, and practical applications in formal verification and mathematics. Through detailed comparisons with other proof assistants and extensive case studies, we demonstrate Lean 4's unique advantages in proof automation, performance, and usability. The paper also explores recent developments in its ecosystem, including libraries, tools, and educational applications, providing insights into its growing impact on formal methods and mathematical formalization.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.18639v1</guid>
      <category>cs.LO</category>
      <category>cs.PL</category>
      <pubDate>Mon, 03 Feb 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-sa/4.0/</dc:rights>
      <dc:creator>Xichen Tang</dc:creator>
    </item>
    <item>
      <title>Enforcing MAVLink Safety &amp; Security Properties Via Refined Multiparty Session Types</title>
      <link>https://arxiv.org/abs/2501.18874</link>
      <description>arXiv:2501.18874v1 Announce Type: cross 
Abstract: A compromised system component can issue message sequences that are perfectly legal while also leading the system itself into unsafe states. Such attacks are challenging to characterize, because message interfaces in standard languages define the individual messages possible but cannot express designers' intentions for how they should be used. We present initial results from ongoing work applying refined multiparty session types as a mechanism for expressing and enforcing proper message usage to exclude legal, but unsafe, sequences. We illustrate our approach by using refined multiparty session types to mitigate safety and security issues in the MAVLink protocol commonly used in UAVs.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.18874v1</guid>
      <category>cs.CR</category>
      <category>cs.PL</category>
      <pubDate>Mon, 03 Feb 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Arthur Amorim, Max Taylor, Gary T. Leavens, Bill Harrison, Lance Joneckis, Trevor Kann</dc:creator>
    </item>
    <item>
      <title>SMILES &amp; SELFIES has to go : Representation of Molecules via Algebraic Data Types</title>
      <link>https://arxiv.org/abs/2501.13633</link>
      <description>arXiv:2501.13633v2 Announce Type: replace 
Abstract: The Algebraic Data Type (ADT) can be used as a computational framework for molecular representation for the purpose of advancing tasks in cheminformatics. This can include generative modles in the context of Bayesian machine learning via probabilistic programming. The ADT that we put forward, implements the 'Dietz' representation for molecular constitution via multigraphs of electron valence information, and uses 3D coordinate data to provide stereochemical information, easily enabling the representation of complex molecular phenomena such as organometallics, multi-center bonds, delocalized electrons, and resonant structures. Unlike traditional string-based representations such as SMILES and SELFIES, the ADT is much more flexible, yet retains desirable qualities from type-safety to seamless integration with Bayesian Probabilistic Programming. An extensive criticism of both SMILES and SELFIES, in this article, is given, along with criticisms of the so-called Future of SELFIES. An open-source library implemented in Haskell demonstrates the ADT along with experimental extensions demonstrating its use in reaction modelling, group theoretic applications, and integration with LazyPPL, a lazy probabilistic programming library. Also provided as an extension is the ability to represent electronic structures, including shells, subshells, and orbitals, significantly expanding its representational scope compared to other representations in the literature. These features position the proposed ADT as a robust alternative to existing molecular representations, addressing limitations such as inadequate support for 3D information and syntactic invalidity while offering a platform for innovative cheminformatics research. Accompanying discussions about the meaning of a `representation' are included. The fully functioning GitHub library can be found at https://github.com/oliverjgoldstein/chemalgprog.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.13633v2</guid>
      <category>cs.PL</category>
      <category>cs.LG</category>
      <pubDate>Mon, 03 Feb 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-sa/4.0/</dc:rights>
      <dc:creator>Oliver Goldstein, Samuel March</dc:creator>
    </item>
    <item>
      <title>RepoAudit: An Autonomous LLM-Agent for Repository-Level Code Auditing</title>
      <link>https://arxiv.org/abs/2501.18160</link>
      <description>arXiv:2501.18160v2 Announce Type: replace-cross 
Abstract: Code auditing is a code review process with the goal of finding bugs. Large Language Models (LLMs) have shown substantial potential in this task, offering the ability to analyze programs without compilation and enabling customized bug detection following specified prompts. However, applying LLMs to repository-level code auditing presents notable challenges. The inherent context limits and hallucinations of LLMs can lead to the low quality of bug reports. Meanwhile, the large size of software repositories introduces substantial time and token costs, hindering efficiency and scalability in real-world scenarios. This work introduces an autonomous LLM-agent, RepoAudit, designed to enable precise and efficient repository-level code auditing. Equipped with the agent memory, RepoAudit explores the code repository on demand, analyzing data-flow facts along different feasible program paths in individual functions. It also introduces the validator to check the data-flow facts for hallucination mitigation and examine the satisfiability of path conditions of potential buggy paths, which enables RepoAudit to discard false positives in the code auditing. Our experiment shows that RepoAudit powered by Claude 3.5 Sonnet successfully finds 38 true bugs in 15 real-world systems, consuming 0.44 hours and $2.54 per project on average.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.18160v2</guid>
      <category>cs.SE</category>
      <category>cs.PL</category>
      <pubDate>Mon, 03 Feb 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Jinyao Guo, Chengpeng Wang, Xiangzhe Xu, Zian Su, Xiangyu Zhang</dc:creator>
    </item>
  </channel>
</rss>
