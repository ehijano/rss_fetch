<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.DM updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.DM</link>
    <description>cs.DM updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.DM" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Oct 2024 04:03:53 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Wed, 16 Oct 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>An incremental exact algorithm for the hyper-rectangular clustering problem with axis-parallel clusters</title>
      <link>https://arxiv.org/abs/2410.11803</link>
      <description>arXiv:2410.11803v1 Announce Type: new 
Abstract: We address the problem of clustering a set of points in $\mathbb{R}^d$ with axis-parallel clusters. Previous exact approaches to this problem are mostly based on integer programming formulations and can only solve to optimality instances of small size. In this work we propose an adaptive exact strategy which takes advantage of the capacity to solve small instances to optimality of previous approaches. Our algorithm starts by solving an instance with a small subset of points and iteratively adds more points if these are not covered by the obtained solution. We prove that as soon as a solution covers the whole set of point from the instance, then the solution is actually an optimal solution for the original problem. We compare the efficiency of the new method against the existing ones with an exhaustive computational experimentation in which we show that the new approach is able to solve to optimality instances of higher orders of magnitude.</description>
      <guid isPermaLink="false">oai:arXiv.org:2410.11803v1</guid>
      <category>cs.DM</category>
      <pubDate>Wed, 16 Oct 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-nd/4.0/</dc:rights>
      <dc:creator>Diego Delle Donne, Javier Marenco, Eduardo Moreno</dc:creator>
    </item>
    <item>
      <title>Asynchronous 3-Majority Dynamics with Many Opinions</title>
      <link>https://arxiv.org/abs/2410.11172</link>
      <description>arXiv:2410.11172v1 Announce Type: cross 
Abstract: We consider 3-Majority, a probabilistic consensus dynamics on a complete graph with $n$ vertices, each vertex starting with one of $k$ initial opinions. At each discrete time step, a vertex $u$ is chosen uniformly at random. The selected vertex $u$ chooses three neighbors $v_1,v_2,v_3$ uniformly at random with replacement and takes the majority opinion held by the three, where ties are broken in favor of the opinion of $v_3$. The main quantity of interest is the consensus time, the number of steps required for all vertices to hold the same opinion. This asynchronous version turns out to be considerably harder to analyze than the synchronous version and so far results have only been obtained for $k=2$. Even in the synchronous version the results for large $k$ are far from tight. In this paper we prove that the consensus time is $\tilde{\Theta}( \min(nk,n^{1.5}) )$ for all $k$. These are the first bounds for all $k$ that are tight up to a polylogarithmic factor.</description>
      <guid isPermaLink="false">oai:arXiv.org:2410.11172v1</guid>
      <category>cs.DC</category>
      <category>cs.DM</category>
      <pubDate>Wed, 16 Oct 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Colin Cooper, Frederik Mallmann-Trenn, Tomasz Radzik, Nobutaka Shimizu, Takeharu Shiraga</dc:creator>
    </item>
    <item>
      <title>Extending 1089 attractor to any number of digits and any number of steps</title>
      <link>https://arxiv.org/abs/2410.11784</link>
      <description>arXiv:2410.11784v1 Announce Type: cross 
Abstract: The well-known 1089 trick reflects an amazing trait of digital reversal process and reminisces of a limiting attractor in dynamical systems even though it takes only two steps. It is natural to consider the situations when the number of digits is beyond three as in the original 1089 trick, as well as situations when the number of steps is beyond two. The first part has been mostly done by Webster which we will reproduce. After two steps, the resulting integers are called Papadakis-Webster integers (PWI), which is always divisible by 99, and the resulting quotients consist of only 0's and 1's, which we name Papadakis-Webster binary strings (PWBS). Not all binary strings could be PWBS, and we define the hairpin pairing rule to determine if a binary string is a PWBS. For the second part, we propose a two-option iteration system named iterative digital reversal (IDR) suitably interweaving additions and subtractions. The simplest limiting behavior of IDR is 2-cycles. The elements in an IDR 2-cycle are all composed of repetitions of the 10(9)$_L$89 (L&gt;=0) motif, and are all PWIs. The lower 2-cycle elements after division of 99 belong to the subset of PWBS that are palindromic and consist of 0- and 1-blocks with a minimal length of two. IDR also has higher p-cycles (p=10,12,71) whose elements seem to contain at least one PWI. Another interesting finding about IDR is that it contains non-periodic and diverging trajectories, as the integer values grow to infinity. In these diverging trajectories, while the number of flanking digits around the middle point increases by the iteration, the middle part has an 8-cycle rhythm or signature which has been found in all diverging trajectories. Overall, the generalization of the original 1089 trick in both space and time leads to new patterns in integers and new phenomenology in dynamics.</description>
      <guid isPermaLink="false">oai:arXiv.org:2410.11784v1</guid>
      <category>nlin.CD</category>
      <category>cs.DM</category>
      <category>nlin.PS</category>
      <pubDate>Wed, 16 Oct 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Yannis Almirantis, Wentian Li</dc:creator>
    </item>
    <item>
      <title>Computing with Hypergeometric-Type Terms</title>
      <link>https://arxiv.org/abs/2404.10143</link>
      <description>arXiv:2404.10143v2 Announce Type: replace-cross 
Abstract: Take a multiplicative monoid of sequences in which the multiplication is given by Hadamard product. The set of linear combinations of interleaving monoid elements then yields a ring. For hypergeometric sequences, the resulting ring is a subring of the ring of holonomic sequences. We present two algorithms in this setting: one for computing holonomic recurrence equations from hypergeometric-type normal forms and the other for finding products of hypergeometric-type terms. These are newly implemented commands in our Maple package $HyperTypeSeq$, available at \url{https://github.com/T3gu1a/HyperTypeSeq}, which we also describe.</description>
      <guid isPermaLink="false">oai:arXiv.org:2404.10143v2</guid>
      <category>cs.SC</category>
      <category>cs.DM</category>
      <category>cs.MS</category>
      <pubDate>Wed, 16 Oct 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Bertrand Teguia Tabuguia</dc:creator>
    </item>
    <item>
      <title>Solving systems of equations on antichains for the computation of the ninth Dedekind Number</title>
      <link>https://arxiv.org/abs/2405.20904</link>
      <description>arXiv:2405.20904v4 Announce Type: replace-cross 
Abstract: We study systems of equations on antichains, together with a way to count the number of solutions. We start with a simple example, generalise and show more applications. One of the results was used in the recent computation of D(9), the others have potential to speed up existing techniques in the future.
  In fact, the result of two independent computations of D(9) were published nearly at the same time, in one of them the authors of the present paper were involved. D(n) counts the monotone Boolean functions or antichains on subsets of a set of n elements. The number rises doubly exponentially in the number of elements n, and until now no algorithm of a lower combinatorial complexity is known to compute D(n). In our computation, we use coefficients representing the number of solutions of a specific set of equations on antichains over a finite set. We refer to these coefficients as P-coefficients. These can be computed efficiently. In this paper, we generalise this coefficient and apply it to four different systems of equations. Finally we show how the coefficient was used in our computation of D(9), and how its generalisations can be used to compute D(n).</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.20904v4</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <pubDate>Wed, 16 Oct 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-sa/4.0/</dc:rights>
      <dc:creator>Patrick De Causmaecker, Lennart Van Hirtum</dc:creator>
    </item>
  </channel>
</rss>
