<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.DM updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.DM</link>
    <description>cs.DM updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.DM" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Sep 2025 04:05:48 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 11 Sep 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>An Algorithmic Upper Bound for Permanents via a Permanental Schur Inequality</title>
      <link>https://arxiv.org/abs/2509.08121</link>
      <description>arXiv:2509.08121v1 Announce Type: new 
Abstract: Computing the permanent of a non-negative matrix is a computationally challenging, \#P-complete problem with wide-ranging applications. We introduce a novel permanental analogue of Schur's determinant formula, leveraging a newly defined \emph{permanental inverse}. Building on this, we introduce an iterative, deterministic procedure called the \emph{permanent process}, analogous to Gaussian elimination, which yields constructive and algorithmically computable upper bounds on the permanent. Our framework provides particularly strong guarantees for matrices exhibiting approximate diagonal dominance-like properties, thereby offering new theoretical and computational tools for analyzing and bounding permanents.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.08121v1</guid>
      <category>cs.DM</category>
      <category>math.CO</category>
      <pubDate>Thu, 11 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Aditi Laddha, Madhusudhan Reddy Pittu</dc:creator>
    </item>
    <item>
      <title>Dorst-Smeulders Coding for Arbitrary Binary Words</title>
      <link>https://arxiv.org/abs/2509.08684</link>
      <description>arXiv:2509.08684v1 Announce Type: new 
Abstract: A binary word is Sturmian if the occurrences of each letter are balanced, in the sense that in any two factors of the same length, the difference between the number of occurrences of the same letter is at most 1. In digital geometry, Sturmian words correspond to discrete approximations of straight line segments in the Euclidean plane. The Dorst-Smeulders coding, introduced in 1984, is a 4-tuple of integers that uniquely represents a Sturmian word $w$, enabling its reconstruction using $|w|$ modular operations, making it highly efficient in practice. In this paper, we present a linear-time algorithm that, given a binary input word $w$, computes the Dorst-Smeulders coding of its longest Sturmian prefix. This forms the basis for computing the Dorst-Smeulders coding of an arbitrary binary word $w$, which is a minimal decomposition (in terms of the number of factors) of $w$ into Sturmian words, each represented by its Dorst-Smeulders coding. This coding could be leveraged in compression schemes where the input is transformed into a binary word composed of long Sturmian segments. Although the algorithm is conceptually simple and can be implemented in just a few lines of code, it is grounded in a deep analysis of the structural properties of Sturmian words.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.08684v1</guid>
      <category>cs.DM</category>
      <category>cs.DS</category>
      <category>cs.FL</category>
      <category>math.CO</category>
      <pubDate>Thu, 11 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-sa/4.0/</dc:rights>
      <dc:creator>Alessandro De Luca (Universit\`a di Napoli Federico II, Italy), Gabriele Fici (Universit\`a di Palermo, Italy)</dc:creator>
    </item>
    <item>
      <title>How to Reconfigure Your Alliances</title>
      <link>https://arxiv.org/abs/2509.08798</link>
      <description>arXiv:2509.08798v1 Announce Type: cross 
Abstract: Different variations of alliances in graphs have been introduced into the graph-theoretic literature about twenty years ago. More broadly speaking, they can be interpreted as groups that collaborate to achieve a common goal, for instance, defending themselves against possible attacks from outside. In this paper, we initiate the study of reconfiguring alliances. This means that, with the understanding of having an interconnection map given by a graph, we look at two alliances of the same size~$k$ and investigate if there is a reconfiguration sequence (of length at most~$\ell$) formed by alliances of size (at most)~$k$ that transfers one alliance into the other one. Here, we consider different (now classical) movements of tokens: sliding, jumping, addition/removal. We link the latter two regimes by introducing the concept of reconfiguration monotonicity. Concerning classical complexity, most of these reconfiguration problems are \textsf{PSPACE}-complete, although some are solvable in \textsf{Log\-SPACE}. We also consider these reconfiguration questions through the lense of parameterized algorithms and prove various \textsf{FPT}-results, in particular concerning the combined parameter $k+\ell$ or neighborhood diversity together with $k$ or neighborhood diversity together with $k$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.08798v1</guid>
      <category>cs.CC</category>
      <category>cs.DM</category>
      <pubDate>Thu, 11 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Henning Fernau, Kevin Mann</dc:creator>
    </item>
    <item>
      <title>Near-optimal edge partitioning via intersecting families</title>
      <link>https://arxiv.org/abs/2505.18026</link>
      <description>arXiv:2505.18026v3 Announce Type: replace 
Abstract: We study the problem of edge partitioning, in which we search for edge partitions of graphs into several parts that are optimal w.r.t. the replication factor. The replication factor of vertex $v$ is the number of parts that contain edges incident to $v$. The goal is to minimize the average/maximum replication factor of vertices while keeping the size of parts almost equal. In particular, we study the case of graphs with $|V|=o(|E|)$ and where the number of parts is significantly lower than the size of the graph.
  We introduce a new class of edge partitioning algorithms based on our new combinatorial construction -- balanced intersecting systems (BIS). These algorithms guarantee an upper bound for the replication factor for all graphs.
  - For the case of a constant number of parts, we describe an algorithm that provides an optimal bound for both average and maximum replication factor. Moreover, this algorithm gives an asymptotically optimal partition for random graphs with high probability.
  - For the case of (slowly enough) growing number of parts $n$, it provides a bound $\sqrt{n}(1 + o(1))$ for the maximum replication factor. This bound improves previously known bounds. For some cases of balance requirements it asymptotically matches the lower bound of $\sqrt{n}$.
  We show that the algorithms are computationally efficient in terms of computation time, LOCAL and CONGEST models, and can be implemented as stateless streaming algorithms in graph processing frameworks. Our method generalizes a family of algorithms based on symmetric intersecting families (SIF). The abstract inside PDF also gives a brief description of our techniques.</description>
      <guid isPermaLink="false">oai:arXiv.org:2505.18026v3</guid>
      <category>cs.DM</category>
      <pubDate>Thu, 11 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-sa/4.0/</dc:rights>
      <dc:creator>Alexander Yakunin, Alexander Sushin, Stanislav Moiseev, Andrey Kupavskii</dc:creator>
    </item>
    <item>
      <title>Induced Minor Models. I. Structural Properties and Algorithmic Consequences</title>
      <link>https://arxiv.org/abs/2402.08332</link>
      <description>arXiv:2402.08332v3 Announce Type: replace-cross 
Abstract: A graph $H$ is said to be an induced minor of a graph $G$ if $H$ can be obtained from $G$ by a sequence of vertex deletions and edge contractions. Equivalently, $H$ is an induced minor of $G$ if there exists an induced minor model of $H$ in $G$, that is, a collection of pairwise disjoint subsets of vertices of $G$ labeled by the vertices of $H$, each inducing a connected subgraph in $G$, such that two vertices of $H$ are adjacent if and only if there is an edge in $G$ between the corresponding subsets.
  In this paper, we investigate structural properties of induced minor models, including bounds on treewidth and chromatic number of the subgraphs induced by minimal induced minor models. It is known that for some graphs $H$, testing whether a given graph $G$ contains $H$ as an induced minor is an NP-complete problem. Nevertheless, as algorithmic applications of our structural results, we make use of recent developments regarding tree-independence number to show that if $H$ is the $4$-wheel, the $5$-vertex complete graph minus an edge, or a complete bipartite graph $K_{2,q}$, then there is a polynomial-time algorithm to find in a given graph $G$ an induced minor model of $H$ in $G$, if there is one. We also develop an alternative polynomial-time algorithm for recognizing graphs that do not contain $K_{2,3}$ as an induced minor, which revolves around the idea of detecting the induced subgraphs whose presence is forced when the input graph contains $K_{2,3}$ as an induced minor, using the so-called shortest path detector. It turns out that all these induced subgraphs are Truemper configurations.</description>
      <guid isPermaLink="false">oai:arXiv.org:2402.08332v3</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <category>cs.DS</category>
      <pubDate>Thu, 11 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Nicolas Bousquet, Cl\'ement Dallard, Ma\"el Dumas, Claire Hilaire, Martin Milani\v{c}, Anthony Perez, Nicolas Trotignon</dc:creator>
    </item>
    <item>
      <title>Towards a Dual Version of Woodall's Conjecture for Partial 3-Trees</title>
      <link>https://arxiv.org/abs/2408.05703</link>
      <description>arXiv:2408.05703v2 Announce Type: replace-cross 
Abstract: A dual version of a conjecture by Woodall asserts that, in a planar digraph, the length of a shortest dicycle equals the maximum number of pairwise disjoint feedback arc sets. We verify this conjecture for the case where the underlying graph is a 3-tree or a partial 3-tree with girth $3$. Additionally, we show that every 3-tree has a feedback arc set of size at most~$m/3-1$, where~$m$ is the number of arcs of the digraph, and this bound is tight. We further establish an upper bound on the size of a minimum feedback arc set in $k$-trees. Finally, we discuss some open problems and conjectures.</description>
      <guid isPermaLink="false">oai:arXiv.org:2408.05703v2</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <pubDate>Thu, 11 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Juan Guti\'errez</dc:creator>
    </item>
  </channel>
</rss>
