<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.CG updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.CG</link>
    <description>cs.CG updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.CG" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Apr 2025 03:06:28 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Mon, 28 Apr 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Combinatorial Drone Searching</title>
      <link>https://arxiv.org/abs/2504.17955</link>
      <description>arXiv:2504.17955v1 Announce Type: new 
Abstract: We introduce and study the combinatorial drone searching problem, which we describe in terms of search strategies for finding one or more hikers lost in a forest. An aerial drone can issue a probe to send a signal a given distance such that if there is a lost hiker within this distance, then the drone will learn this. But the drone does not learn the direction or distance to the lost hiker. The optimization problem is to minimize the number of probes and/or hiker responses, as well as possibly minimizing the flight distance for the drone. We describe a number of efficient combinatorial drone searching strategies and we analyze each one in terms of the size, $n$, of the search domain. Moreover, we derive strong bounds for the constant factors for the search costs for our algorithms, which in some cases involve computer-assisted proofs. We also show how to extend these strategies to find all lost hikers using a simple, memoryless drone search, traveling a distance that is $\mathcal{O}(\log{k})$-competitive with the optimal traveling salesperson (TSP) tour for $k$ lost hikers.</description>
      <guid isPermaLink="false">oai:arXiv.org:2504.17955v1</guid>
      <category>cs.CG</category>
      <category>cs.DS</category>
      <pubDate>Mon, 28 Apr 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Ofek Gila (University of California, Irvine), Michael T. Goodrich (University of California, Irvine), Zahra Hadizadeh (University of Rochester), Daniel S. Hirschberg (University of California, Irvine), Shayan Taherijam (University of California, Irvine)</dc:creator>
    </item>
    <item>
      <title>Smallest Intersecting and Enclosing Balls</title>
      <link>https://arxiv.org/abs/2504.18178</link>
      <description>arXiv:2504.18178v1 Announce Type: new 
Abstract: We study the smallest intersecting and enclosing ball problems in Euclidean spaces for input objects that are compact and convex. They link and unify many problems in computational geometry and machine learning. We show that both problems can be modeled as zero-sum games, and propose an approximation algorithm for the former. Specifically, the algorithm produces the first results in high-dimensional spaces for various input objects such as convex polytopes, balls, ellipsoids, etc.</description>
      <guid isPermaLink="false">oai:arXiv.org:2504.18178v1</guid>
      <category>cs.CG</category>
      <pubDate>Mon, 28 Apr 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Jiaqi Zheng, Tiow-Seng Tan</dc:creator>
    </item>
    <item>
      <title>A Linear Time Algorithm for the Maximum Overlap of Two Convex Polygons Under Translation</title>
      <link>https://arxiv.org/abs/2504.18352</link>
      <description>arXiv:2504.18352v1 Announce Type: new 
Abstract: Given two convex polygons $P$ and $Q$ with $n$ and $m$ edges, the maximum overlap problem is to find a translation of $P$ that maximizes the area of its intersection with $Q$. We give the first randomized algorithm for this problem with linear running time. Our result improves the previous two-and-a-half-decades-old algorithm by de Berg, Cheong, Devillers, van Kreveld, and Teillaud (1998), which ran in $O((n+m)\log(n+m))$ time, as well as multiple recent algorithms given for special cases of the problem.</description>
      <guid isPermaLink="false">oai:arXiv.org:2504.18352v1</guid>
      <category>cs.CG</category>
      <pubDate>Mon, 28 Apr 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Timothy M. Chan, Isaac M. Hair</dc:creator>
    </item>
    <item>
      <title>Computing Distances on Graph Associahedra is Fixed-parameter Tractable</title>
      <link>https://arxiv.org/abs/2504.18338</link>
      <description>arXiv:2504.18338v1 Announce Type: cross 
Abstract: An elimination tree of a connected graph $G$ is a rooted tree on the vertices of $G$ obtained by choosing a root $v$ and recursing on the connected components of $G-v$ to obtain the subtrees of $v$. The graph associahedron of $G$ is a polytope whose vertices correspond to elimination trees of $G$ and whose edges correspond to tree rotations, a natural operation between elimination trees. These objects generalize associahedra, which correspond to the case where $G$ is a path. Ito et al. [ICALP 2023] recently proved that the problem of computing distances on graph associahedra is NP-hard. In this paper we prove that the problem, for a general graph $G$, is fixed-parameter tractable parameterized by the distance $k$. Prior to our work, only the case where $G$ is a path was known to be fixed-parameter tractable. To prove our result, we use a novel approach based on a marking scheme that restricts the search to a set of vertices whose size is bounded by a (large) function of $k$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2504.18338v1</guid>
      <category>cs.DS</category>
      <category>cs.CG</category>
      <category>cs.DM</category>
      <category>math.CO</category>
      <pubDate>Mon, 28 Apr 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Lu\'is Felipe I. Cunha, Ignasi Sau, U\'everton S. Souza, Mario Valencia-Pabon</dc:creator>
    </item>
    <item>
      <title>Fast Approximation Algorithms for Piercing Boxes by Points</title>
      <link>https://arxiv.org/abs/2311.02050</link>
      <description>arXiv:2311.02050v2 Announce Type: replace 
Abstract: $\newcommand{\popt}{{\mathcal{p}}} \newcommand{\Re}{\mathbb{R}}\newcommand{\N}{{\mathcal{N}}} \newcommand{\BX}{\mathcal{B}} \newcommand{\bb}{\mathsf{b}} \newcommand{\eps}{\varepsilon} \newcommand{\polylog}{\mathrm{polylog}} $ Let $\mathcal{B}=\{\mathsf{b}_1, \ldots ,\mathsf{b}_n\}$ be a set of $n$ axis-aligned boxes in $\Re^d$ where $d\geq2$ is a constant. The \emph{piercing problem} is to compute a smallest set of points $\N \subset \Re^d$ that hits every box in $\mathcal{B}$, i.e., $\N\cap \mathsf{b}_i\neq \emptyset$, for $i=1,\ldots, n$. Let $\popt=\popt(\mathcal{B})$, the \emph{piercing number} be the minimum size of a piercing set of $\mathcal{B}$. We present a randomized $O(d^2\log\log \popt)$-approximation algorithm with expected running time $O(n^{d/2}\polylog n)$. Next, we present a faster $O(n^{\log d+1})$-time algorithm but with a slightly inferior approximation factor of $O(2^{4d}\log\log\popt)$. The running time of both algorithms can be improved to near-linear using a sampling-based technique, if $\popt = O(n^{1/d})$.
  For the dynamic version of the problem in the plane, we obtain a randomized $O(\log\log\popt)$-approximation algorithm with $O(n^{1/2}\polylog n )$ amortized expected update time for insertion or deletion of boxes. For squares in $\Re^2$, the update time can be improved to $O(n^{1/3}\polylog n )$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2311.02050v2</guid>
      <category>cs.CG</category>
      <pubDate>Mon, 28 Apr 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Pankaj K. Agarwal, Sariel Har-Peled, Rahul Raychaudhury, Stavros Sintos</dc:creator>
    </item>
    <item>
      <title>Evolving Distributions Under Local Motion</title>
      <link>https://arxiv.org/abs/2409.11779</link>
      <description>arXiv:2409.11779v2 Announce Type: replace 
Abstract: Geometric data sets arising in modern applications are often very large and change dynamically over time. A popular framework for dealing with such data sets is the evolving data framework, where a discrete structure continuously varies over time due to the unseen actions of an evolver, which makes small changes to the data. An algorithm probes the current state through an oracle, and the objective is to maintain a hypothesis of the data set's current state that is close to its actual state at all times. In this paper, we apply this framework to maintaining a set of $n$ point objects in motion in $d$-dimensional Euclidean space. To model the uncertainty in the object locations, both the ground truth and hypothesis are based on spatial probability distributions, and the distance between them is measured by the Kullback-Leibler divergence (relative entropy). We introduce a simple and intuitive motion model where with each time step, the distance that any object can move is a fraction of the distance to its nearest neighbor. We present an algorithm that, in steady state, guarantees a distance of $O(n)$ between the true and hypothesized placements. We also show that for any algorithm in this model, there is an evolver that can generate a distance of $\Omega(n)$, implying that our algorithm is asymptotically optimal.</description>
      <guid isPermaLink="false">oai:arXiv.org:2409.11779v2</guid>
      <category>cs.CG</category>
      <pubDate>Mon, 28 Apr 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Aditya Acharya, David M. Mount</dc:creator>
    </item>
  </channel>
</rss>
