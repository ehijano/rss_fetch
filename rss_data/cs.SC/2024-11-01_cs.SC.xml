<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.SC updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.SC</link>
    <description>cs.SC updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.SC" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Nov 2024 04:00:02 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Fri, 01 Nov 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Efficient Performance Analysis of Modular Rewritable Petri Nets</title>
      <link>https://arxiv.org/abs/2410.23762</link>
      <description>arXiv:2410.23762v1 Announce Type: cross 
Abstract: Petri Nets (PN) are extensively used as a robust formalism to model concurrent and distributed systems; however, they encounter difficulties in accurately modeling adaptive systems. To address this issue, we defined rewritable PT nets (RwPT) using Maude, a declarative language that ensures consistent rewriting logic semantics. Recently, we proposed a modular approach that employs algebraic operators to build extensive RwPT models. This methodology uses composite node labeling to maintain hierarchical organization through net rewrites and has been shown to be effective. Once stochastic parameters are integrated into the formalism, we introduce an automated procedure to derive a lumped CTMC from the quotient graph generated by a modular RwPT model. To demonstrate the effectiveness of our method, we present a fault-tolerant manufacturing system as a case study.</description>
      <guid isPermaLink="false">oai:arXiv.org:2410.23762v1</guid>
      <category>cs.PF</category>
      <category>cs.SC</category>
      <pubDate>Fri, 01 Nov 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.4204/EPTCS.410.5</arxiv:DOI>
      <arxiv:journal_reference>EPTCS 410, 2024, pp. 69-83</arxiv:journal_reference>
      <dc:creator>Lorenzo Capra (Universit\'a degli Studi di Milano), Marco Gribaudo (Politecnico di Milano)</dc:creator>
    </item>
    <item>
      <title>Tracer: A Tool for Race Detection in Software Defined Network Models</title>
      <link>https://arxiv.org/abs/2410.23763</link>
      <description>arXiv:2410.23763v1 Announce Type: cross 
Abstract: Software Defined Networking (SDN) has become a new paradigm in computer networking, introducing a decoupled architecture that separates the network into the data plane and the control plane. The control plane acts as the centralized brain, managing configuration updates and network management tasks, while the data plane handles traffic based on the configurations provided by the control plane. Given its asynchronous distributed nature, SDN can experience data races due to message passing between the control and data planes. This paper presents Tracer, a tool designed to automatically detect and explain the occurrence of data races in DyNetKAT SDN models. DyNetKAT is a formal framework for modeling and analyzing SDN behaviors, with robust operational semantics and a complete axiomatization implemented in Maude. Built on NetKAT, a language leveraging Kleene Algebra with Tests to express data plane forwarding behavior, DyNetKAT extends these capabilities by adding primitives for communication between the control and data planes. Tracer exploits the DyNetKAT axiomatization and enables race detection in SDNs based on Lamport vector clocks. Tracer is a publicly available tool.</description>
      <guid isPermaLink="false">oai:arXiv.org:2410.23763v1</guid>
      <category>cs.FL</category>
      <category>cs.NI</category>
      <category>cs.SC</category>
      <pubDate>Fri, 01 Nov 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.4204/EPTCS.410.6</arxiv:DOI>
      <arxiv:journal_reference>EPTCS 410, 2024, pp. 84-98</arxiv:journal_reference>
      <dc:creator>Georgiana Caltais (University of Twente), Mahboobeh Zangiabady (University of Twente), Ervin Zvirbulis (University of Twente)</dc:creator>
    </item>
    <item>
      <title>Transformers to Predict the Applicability of Symbolic Integration Routines</title>
      <link>https://arxiv.org/abs/2410.23948</link>
      <description>arXiv:2410.23948v1 Announce Type: cross 
Abstract: Symbolic integration is a fundamental problem in mathematics: we consider how machine learning may be used to optimise this task in a Computer Algebra System (CAS). We train transformers that predict whether a particular integration method will be successful, and compare against the existing human-made heuristics (called guards) that perform this task in a leading CAS. We find the transformer can outperform these guards, gaining up to 30% accuracy and 70% precision. We further show that the inference time of the transformer is inconsequential which shows that it is well-suited to include as a guard in a CAS. Furthermore, we use Layer Integrated Gradients to interpret the decisions that the transformer is making. If guided by a subject-matter expert, the technique can explain some of the predictions based on the input tokens, which can lead to further optimisations.</description>
      <guid isPermaLink="false">oai:arXiv.org:2410.23948v1</guid>
      <category>cs.LG</category>
      <category>cs.SC</category>
      <pubDate>Fri, 01 Nov 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Rashid Barket, Uzma Shafiq, Matthew England, Juergen Gerhard</dc:creator>
    </item>
  </channel>
</rss>
