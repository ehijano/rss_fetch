<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.CC updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.CC</link>
    <description>cs.CC updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.CC" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Dec 2024 04:25:26 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Mon, 02 Dec 2024 00:00:00 -0500</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>The Complexity of Order-Finding for ROABPs</title>
      <link>https://arxiv.org/abs/2411.18981</link>
      <description>arXiv:2411.18981v1 Announce Type: new 
Abstract: We study the \emph{order-finding problem} for Read-once Oblivious Algebraic Branching Programs (ROABPs). Given a polynomial $f$ and a parameter $w$, the goal is to find an order $\sigma$ in which $f$ has an ROABP of \emph{width} $w$. We show that this problem is NP-hard in the worst case, even when the input is a constant degree polynomial that is given in its dense representation. We provide a reduction from CutWidth to prove these results. Owing to the exactness of our reduction, all the known results for the hardness of approximation of Cutwidth also transfer directly to the order-finding problem. Additionally, we also show that any constant-approximation algorithm for the order-finding problem would imply a polynomial time approximation scheme (PTAS) for it.
  On the algorithmic front, we design algorithms that solve the order-finding problem for generic ROABPs in polynomial time, when the width $w$ is polynomial in the individual degree $d$ of the polynomial $f$. That is, our algorithm is efficient for most/random ROABPs, and requires more time only on a lower-dimensional subspace (or subvariety) of ROABPs. Even when the individual degree is constant, our algorithm runs in time $n^{O(\log w)}$ for most/random ROABPs. This stands in strong contrast to the case of (Boolean) ROBPs, where only heuristic order-finding algorithms are known.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.18981v1</guid>
      <category>cs.CC</category>
      <pubDate>Mon, 02 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-sa/4.0/</dc:rights>
      <dc:creator>Vishwas Bhargava, Pranjal Dutta, Sumanta Ghosh, Anamay Tengse</dc:creator>
    </item>
    <item>
      <title>Refuting the Direct Sum Conjecture for Total Functions in Deterministic Communication Complexity</title>
      <link>https://arxiv.org/abs/2411.19003</link>
      <description>arXiv:2411.19003v1 Announce Type: new 
Abstract: In communication complexity the input of a function $f:X\times Y\rightarrow Z$ is distributed between two players Alice and Bob.
  If Alice knows only $x\in X$ and Bob only $y\in Y$, how much information must Alice and Bob share to be able to elicit the value of $f(x,y)$?
  Do we need $\ell$ more resources to solve $\ell$ instances of a problem?
  This question is the direct sum question and has been studied in many computational models.
  In this paper we focus on the case of 2-party deterministic communication complexity and give a counterexample to the direct sum conjecture in its strongest form.
  To do so we exhibit a family of functions for which the complexity of solving $\ell$ instances is less than $(1 -\epsilon )\ell$ times the complexity of solving one instance for some small enough $\epsilon&gt;0$.
  We use a customised method in the analysis of our family of total functions, showing that one can force the alternation of rounds between players.
  This idea allows us to exploit the integrality of the complexity measure to create an increasing gap between the complexity of solving the instances independently with that of solving them together.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.19003v1</guid>
      <category>cs.CC</category>
      <pubDate>Mon, 02 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Simon Mackenzie, Abdallah Saffidine</dc:creator>
    </item>
    <item>
      <title>A simple universal algorithm for high-dimensional integration</title>
      <link>https://arxiv.org/abs/2411.19164</link>
      <description>arXiv:2411.19164v1 Announce Type: cross 
Abstract: We present a simple universal algorithm for high-dimensional integration which has the optimal error rate (independent of the dimension) in all weighted Korobov classes both in the randomized and the deterministic setting. Our theoretical findings are complemented by numerical tests.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.19164v1</guid>
      <category>math.NA</category>
      <category>cs.CC</category>
      <category>cs.NA</category>
      <pubDate>Mon, 02 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Takashi Goda, David Krieg</dc:creator>
    </item>
    <item>
      <title>Paintbucket on graphs is PSPACE-complete</title>
      <link>https://arxiv.org/abs/2411.19373</link>
      <description>arXiv:2411.19373v1 Announce Type: cross 
Abstract: The game of Paintbucket was recently introduced by Amundsen and Erickson. It is played on a rectangular grid of black and white pixels. The players alternately fill in one of their opponent's connected components with their own color, until the entire board is just a single color. The player who makes the last move wins. It is not currently known whether there is a simple winning strategy for Paintbucket. In this paper, we consider a natural generalization of Paintbucket that is played on an arbitrary simple graph, and we show that the problem of determining the winner in a given position of this generalized game is PSPACE-complete.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.19373v1</guid>
      <category>math.CO</category>
      <category>cs.CC</category>
      <pubDate>Mon, 02 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Ethan J. Saunders, Peter Selinger</dc:creator>
    </item>
    <item>
      <title>Paired-domination Problem on Circle and $k$-polygon Graphs</title>
      <link>https://arxiv.org/abs/2411.19473</link>
      <description>arXiv:2411.19473v1 Announce Type: cross 
Abstract: A vertex set $D \subseteq V$ is considered a dominating set of $G$ if every vertex in $V - D$ is adjacent to at least one vertex in $D$. We called a dominating set $D$ as a paired-dominating set if the subgraph of $G$ induced by $D$ contains a perfect matching. In this paper, we show that determining the minimum paired-dominating set on circle graphs is NP-complete. We further propose an $O(n(\frac{n}{k^2-k})^{2k^2-2k})$-time algorithm for $k$-polygon graphs, a subclass of circle graphs, for finding the minimum paired-dominating set. Moreover, we extend our method to improve the algorithm for finding the minimum dominating set on $k$-polygon graphs in~[\emph{E.S.~Elmallah and L.K.~Stewart, Independence and domination in polygon graphs, Discrete Appl. Math., 1993}] and reduce their time-complexity from $O(n^{4k^2+3})$ to $O(n(\frac{n}{k^2-k})^{2k^2-4k})$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.19473v1</guid>
      <category>cs.DS</category>
      <category>cs.CC</category>
      <category>math.CO</category>
      <pubDate>Mon, 02 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Ta-Yu Mu, Ching-Chi Lin</dc:creator>
    </item>
    <item>
      <title>Statistical inference of a ranked community in a directed graph</title>
      <link>https://arxiv.org/abs/2411.19885</link>
      <description>arXiv:2411.19885v1 Announce Type: cross 
Abstract: We study the problem of detecting or recovering a planted ranked subgraph from a directed graph, an analog for directed graphs of the well-studied planted dense subgraph model. We suppose that, among a set of $n$ items, there is a subset $S$ of $k$ items having a latent ranking in the form of a permutation $\pi$ of $S$, and that we observe a fraction $p$ of pairwise orderings between elements of $\{1, \dots, n\}$ which agree with $\pi$ with probability $\frac{1}{2} + q$ between elements of $S$ and otherwise are uniformly random. Unlike in the planted dense subgraph and planted clique problems where the community $S$ is distinguished by its unusual density of edges, here the community is only distinguished by the unusual consistency of its pairwise orderings. We establish computational and statistical thresholds for both detecting and recovering such a ranked community. In the log-density setting where $k$, $p$, and $q$ all scale as powers of $n$, we establish the exact thresholds in the associated exponents at which detection and recovery become statistically and computationally feasible. These regimes include a rich variety of behaviors, exhibiting both statistical-computational and detection-recovery gaps. We also give finer-grained results for two extreme cases: (1) $p = 1$, $k = n$, and $q$ small, where a full tournament is observed that is weakly correlated with a global ranking, and (2) $p = 1$, $q = \frac{1}{2}$, and $k$ small, where a small "ordered clique" (totally ordered directed subgraph) is planted in a random tournament.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.19885v1</guid>
      <category>math.ST</category>
      <category>cs.CC</category>
      <category>cs.DS</category>
      <category>math.CO</category>
      <category>math.PR</category>
      <category>stat.TH</category>
      <pubDate>Mon, 02 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Dmitriy Kunisky, Daniel A. Spielman, Alexander S. Wein, Xifan Yu</dc:creator>
    </item>
    <item>
      <title>The Complexity of Graph Exploration Games</title>
      <link>https://arxiv.org/abs/2302.08420</link>
      <description>arXiv:2302.08420v3 Announce Type: replace 
Abstract: Graph Exploration problems ask a searcher to explore an unknown environment. The environment is modeled as a graph, where the searcher needs to visit each vertex beginning at some vertex. Treasure Hunt problems are a variation of Graph Exploration, in which the searcher needs to find a hidden treasure, which is located at a designated vertex. Usually these problems are modeled as online problems, and any online algorithm performs poorly because it has too little knowledge about the instance to react adequately to the requests of the adversary. Thus, the impact of a priori knowledge is of interest. One form of a priori knowledge is an unlabeled map, which is an isomorphic copy of the graph. We analyze Graph Exploration and Treasure Hunt problems with an unlabeled map that is provided to the searcher. For this, we formulate decision variants of both problems by interpreting the online problems as a game between the online algorithm (the searcher) and the adversary. The map, however, is not controllable by the adversary. The question is whether the searcher is able to explore the graph completely or find the treasure for all possible decisions of the adversary. We analyze these games in multiple settings, with and without costs on the edges, on directed and undirected graphs and with different constraints (allowing multiple visits to vertices or edges) on the solution. We prove PSPACE-completeness for most of these games. Additionally, we analyze the complexity of related problems that have additional constraints on the solution.</description>
      <guid isPermaLink="false">oai:arXiv.org:2302.08420v3</guid>
      <category>cs.CC</category>
      <category>cs.GT</category>
      <pubDate>Mon, 02 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Janosch Fuchs, Christoph Gr\"une, Tom Jan{\ss}en</dc:creator>
    </item>
    <item>
      <title>The Computational Complexity of Factored Graphs</title>
      <link>https://arxiv.org/abs/2407.19102</link>
      <description>arXiv:2407.19102v3 Announce Type: replace 
Abstract: While graphs and abstract data structures can be large and complex, practical instances are often regular or highly structured. If the instance has sufficient structure, we might hope to compress the object into a more succinct representation. An efficient algorithm (with respect to the compressed input size) could then lead to more efficient computations than algorithms taking the explicit, uncompressed object as input. This leads to a natural question: when does knowing the input instance has a more succinct representation make computation easier?
  We initiate the study of the computational complexity of problems on factored graphs: graphs that are given as a formula of products and unions on smaller graphs. For any graph problem, we define a parameterized version that takes factored graphs as input, parameterized by the number of (smaller) ordinary graphs used to construct the factored graph. In this setting, we characterize the parameterized complexity of several natural graph problems, exhibiting a variety of complexities. We show that a decision version of lexicographically first maximal independent set is $\mathbf{XP}$-complete, and therefore unconditionally not fixed-parameter tractable ($\mathbf{FPT}$). On the other hand, we show that clique counting is $\mathbf{FPT}$. Finally, we show that reachability is $\mathbf{XNL}$-complete. Moreover, $\mathbf{XNL}$ is contained in $\mathbf{FPT}$ if and only if $\mathbf{NL}$ is contained in some fixed polynomial time.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.19102v3</guid>
      <category>cs.CC</category>
      <pubDate>Mon, 02 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-sa/4.0/</dc:rights>
      <dc:creator>Shreya Gupta, Boyang Huang, Russell Impagliazzo, Stanley Woo, Christopher Ye</dc:creator>
    </item>
    <item>
      <title>The Complexity of Counting Turns in the Line-Based Dial-a-Ride Problem</title>
      <link>https://arxiv.org/abs/2409.15192</link>
      <description>arXiv:2409.15192v2 Announce Type: replace 
Abstract: Dial-a-Ride problems have been proposed to model the challenge to consolidate passenger transportation requests with a fleet of shared vehicles. The line-based Dial-a-Ride problem (LiDARP) is a variant where the passengers are transported along a fixed sequence of stops, with the option of taking shortcuts. In this paper we consider the LiDARP with the objective function to maximize the number of transported requests. We investigate the complexity of two optimization problems: the LiDARP, and the problem to determine the minimum number of turns needed in an optimal LiDARP solution, called the MinTurn problem. Based on a number of instance parameters and characteristics, we are able to state the boundary between polynomially solvable and NP-hard instances for both problems. Furthermore, we provide parameterized algorithms that are able to solve both the LiDARP and MinTurn problem.</description>
      <guid isPermaLink="false">oai:arXiv.org:2409.15192v2</guid>
      <category>cs.CC</category>
      <pubDate>Mon, 02 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Antonio Lauerbach, Kendra Reiter, Marie Schmidt</dc:creator>
    </item>
    <item>
      <title>Stochastic Process Turing Machines</title>
      <link>https://arxiv.org/abs/2410.07131</link>
      <description>arXiv:2410.07131v2 Announce Type: replace 
Abstract: Computer science theory provides many different measures of complexity of a system including Kolmogorov complexity, logical depth, computational depth, and Levin complexity. However, these measures are all defined only for deterministic Turing machines, i.e., deterministic dynamics of the underlying generative process whose output we are interested in. Therefore, by construction they cannot capture complexity of the output of stochastic processes - like those in the real world. Motivated by this observation, we combine probabilistic Turing machines with a prior over the inputs to the Turing machine to define a complete stochastic process of Turing machines. We call this a stochastic process Turing machine. We use stochastic process Turing machines to define a set of new generative complexity measures based on Turing machines, which we call stochastic depth. As we discuss, stochastic depth is related to other such measures including Kolmogorov complexity and Levin complexity. However, as we elaborate, it has many desirable properties that those others measures lack. In addition, stochastic depth is closely related to various thermodynamic properties of computational systems. Stochastic process Turing machines and stochastic depth allow us to study complex, stochastic systems like the human brain, societies, and evolution all from within the framework of formal computation.</description>
      <guid isPermaLink="false">oai:arXiv.org:2410.07131v2</guid>
      <category>cs.CC</category>
      <category>cs.FL</category>
      <category>cs.LO</category>
      <pubDate>Mon, 02 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-nd/4.0/</dc:rights>
      <dc:creator>David Wolpert, Jordan Scharnhorst</dc:creator>
    </item>
  </channel>
</rss>
