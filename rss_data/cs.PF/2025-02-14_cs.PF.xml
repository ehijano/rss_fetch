<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.PF updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.PF</link>
    <description>cs.PF updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.PF" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Feb 2025 05:00:17 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Fri, 14 Feb 2025 00:00:00 -0500</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Novel Lower Bounds on M/G/k Scheduling</title>
      <link>https://arxiv.org/abs/2502.08804</link>
      <description>arXiv:2502.08804v1 Announce Type: new 
Abstract: In queueing systems, effective scheduling algorithms are essential for optimizing performance in a wide range of modern applications. While the theory of optimal M/G/1 scheduling for mean response time is well established, many modern queueing systems operate with multiple servers. Recently, optimal scheduling for the M/G/k queue has been explored in the heavy traffic limit, but much remains unknown about optimal scheduling in the intermediate regime.
  In this paper, we give the first framework for proving nontrivial lower bounds on the mean response time of the M/G/k system under arbitrary scheduling policies. These bounds significantly improve upon previous naive lower bounds, particularly for moderate loads. Key to our approach is a new variable-speed queue, which we call the Increasing Speed Queue, which more accurately captures the work completion behavior of multiserver systems. To analyze the expected work of this Increasing Speed Queue, we develop the DiffeDrift method, a novel manner of employing the drift method/BAR approach, by developing test functions via the solutions to a differential equation.</description>
      <guid isPermaLink="false">oai:arXiv.org:2502.08804v1</guid>
      <category>cs.PF</category>
      <pubDate>Fri, 14 Feb 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Ziyuan Wang, Isaac Grosof</dc:creator>
    </item>
    <item>
      <title>PixLift: Accelerating Web Browsing via AI Upscaling</title>
      <link>https://arxiv.org/abs/2502.08995</link>
      <description>arXiv:2502.08995v1 Announce Type: new 
Abstract: Accessing the internet in regions with expensive data plans and limited connectivity poses significant challenges, restricting information access and economic growth. Images, as a major contributor to webpage sizes, exacerbate this issue, despite advances in compression formats like WebP and AVIF. The continued growth of complex and curated web content, coupled with suboptimal optimization practices in many regions, has prevented meaningful reductions in web page sizes. This paper introduces PixLift, a novel solution to reduce webpage sizes by downscaling their images during transmission and leveraging AI models on user devices to upscale them. By trading computational resources for bandwidth, PixLift enables more affordable and inclusive web access. We address key challenges, including the feasibility of scaled image requests on popular websites, the implementation of PixLift as a browser extension, and its impact on user experience. Through the analysis of 71.4k webpages, evaluations of three mainstream upscaling models, and a user study, we demonstrate PixLift's ability to significantly reduce data usage without compromising image quality, fostering a more equitable internet.</description>
      <guid isPermaLink="false">oai:arXiv.org:2502.08995v1</guid>
      <category>cs.PF</category>
      <category>cs.AI</category>
      <pubDate>Fri, 14 Feb 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Yonas Atinafu, Sarthak Malla, HyunSeok Daniel Jang, Nouar Aldahoul, Matteo Varvello, Yasir Zaki</dc:creator>
    </item>
    <item>
      <title>Modular Stochastic Rewritable Petri Nets</title>
      <link>https://arxiv.org/abs/2502.09217</link>
      <description>arXiv:2502.09217v1 Announce Type: new 
Abstract: Petri Nets (PN) are widely used for modeling concurrent and distributed systems, but face challenges in modeling adaptive systems. To address this, we have formalized "rewritable" PT nets (RwPT) using Maude, a declarative language with sound rewriting logic semantics. Recently, we introduced a modular approach that utilizes algebraic operators to construct large RwPT models. This technique employs composite node labeling to outline symmetries in hierarchical organization, preserved through net rewrites. Once stochastic parameters are added to the formalism, we present an automated process to derive a lumped CTMC from the quotient graph generated by an RwPT.</description>
      <guid isPermaLink="false">oai:arXiv.org:2502.09217v1</guid>
      <category>cs.PF</category>
      <category>cs.SC</category>
      <pubDate>Fri, 14 Feb 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.4204/EPTCS.416.11</arxiv:DOI>
      <arxiv:journal_reference>EPTCS 416, 2025, pp. 128-134</arxiv:journal_reference>
      <dc:creator>Lorenzo Capra</dc:creator>
    </item>
    <item>
      <title>Enhancements to P4TG: Protocols, Performance, and Automation</title>
      <link>https://arxiv.org/abs/2501.17127</link>
      <description>arXiv:2501.17127v2 Announce Type: replace-cross 
Abstract: P4TG is a hardware-based traffic generator (TG) running on the Intel Tofino 1 ASIC and was programmed using the programming language P4. In its initial version, P4TG could generate up to 10x100 Gb/s of traffic and directly measure rates, packet loss, and other metrics in the data plane. Many researchers and industrial partners requested new features to be incorporated into P4TG since its publication in 2023. With the recently added features, P4TG supports the generation of packets encapsulated with a customizable VLAN, QinQ, VxLAN, MPLS, and SRv6 header. Further, generation of IPv6 traffic is added and P4TG is ported to the Intel Tofino 2 platform enabling a generation capability of up to 10x400 Gb/s. The improvement in user experience focuses on ease of operation. Features like automated ARP replies, improved visualization, report generation, and automated testing based on the IMIX distribution and RFC 2544 are added. Future work on P4TG includes NDP to facilitate IPv6 traffic, and a NETCONF integration to further ease the configuration.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.17127v2</guid>
      <category>cs.NI</category>
      <category>cs.PF</category>
      <pubDate>Fri, 14 Feb 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Fabian Ihle, Etienne Zink, Steffen Lindner, Michael Menth</dc:creator>
    </item>
  </channel>
</rss>
