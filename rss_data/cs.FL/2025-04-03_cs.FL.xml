<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.FL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.FL</link>
    <description>cs.FL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.FL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Apr 2025 06:13:47 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 03 Apr 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Input-Erasing Two-Way Finite Automata</title>
      <link>https://arxiv.org/abs/2504.01720</link>
      <description>arXiv:2504.01720v1 Announce Type: new 
Abstract: The present paper introduces and studies an alternative concept of two-way finite automata called input-erasing two-way finite automata. Like the original model, these new automata can also move the reading head freely left or right on the input tape. However, each time they read a symbol, they also erase it from the tape. The paper demonstrates that these automata define precisely the family of linear languages and are thus strictly stronger than the original ones. Furthermore, it introduces a variety of restrictions placed upon these automata and the way they work and investigates the effect of these restrictions on their acceptance power. In particular, it explores the mutual relations of language families resulting from some of these restrictions and shows that some of them reduce the power of these automata to that of even linear grammars or even ordinary finite automata.</description>
      <guid isPermaLink="false">oai:arXiv.org:2504.01720v1</guid>
      <category>cs.FL</category>
      <pubDate>Thu, 03 Apr 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Alexander Meduna, Dominik Nejedl\'y, Zbyn\v{e}k K\v{r}ivka</dc:creator>
    </item>
    <item>
      <title>Modular Decomposition of Hierarchical Finite State Machines</title>
      <link>https://arxiv.org/abs/2111.04902</link>
      <description>arXiv:2111.04902v3 Announce Type: replace 
Abstract: Hierarchical Finite State Machines (HFSMs) are a standard software-modelling concept which extends the classical Finite State Machine (FSM) notion with the useful abstraction of hierarchical nesting. That is, an HFSM is an FSM whose states can be other FSMs. The hierarchy in HFSMs is provided at design time, and can be removed by expanding nested states, allowing HFSMs to inherit the semantics of FSMs. However, because hierarchy is a useful representation of the structure of an FSM, we would like to be able to invert this operation: given an FSM, can we compute equivalent HFSMs? This is the topic of this paper. By adapting the analogous theory of `modular decomposition' from graph theory into automata theory, we are able to compute an efficient representation of the space of equivalent HFSMs to a given one. Specifically, we first define a module of an FSM, which is a collection of nodes which can be treated as a nested FSM. Unlike modules in graphs, some modules in FSMs are lacking in algebraic structure. We identify a simple and natural restriction of the modules, called thin modules, which regain many of the critical properties from modules in graphs. We then construct a linear-space directed graph which uniquely represents every thin module, and hence every equivalent (thin) HFSM. We call this graph the modular decomposition. The modular decomposition makes clear the significant common structure underlying equivalent thin HFSMs. We provide an $O(n^2k)$ algorithm for constructing the modular decomposition of an $n$-state $k$-symbol FSM. We demonstrate the applicability of this theory on the following `bottleneck' problem: given an HFSM, find an equivalent one where the size of the largest component FSM is minimised. The modular decomposition gives a simple greedy algorithm for the bottleneck problem on thin HFSMs, which we demonstrate on a wristwatch HFSM example from Harel (1987).</description>
      <guid isPermaLink="false">oai:arXiv.org:2111.04902v3</guid>
      <category>cs.FL</category>
      <category>cs.DM</category>
      <pubDate>Thu, 03 Apr 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-nd/4.0/</dc:rights>
      <dc:creator>Oliver Biggar, Behzad Zamani, Iman Shames</dc:creator>
    </item>
    <item>
      <title>A Sharper Upper Bound for the Separating Words Problem</title>
      <link>https://arxiv.org/abs/2503.23184</link>
      <description>arXiv:2503.23184v2 Announce Type: replace 
Abstract: We show that for any two distinct words $ s_1, s_2 $ over an arbitrary alphabets, there exists a deterministic finite automaton with $ O(\log^2 n) $ states that accepts $ s_1 $ and rejects $ s_2 $. This improves the previous upper bound of $O(n^{1/3}\log^7 n)$</description>
      <guid isPermaLink="false">oai:arXiv.org:2503.23184v2</guid>
      <category>cs.FL</category>
      <category>math.NT</category>
      <pubDate>Thu, 03 Apr 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Bogdan C. Dumitru</dc:creator>
    </item>
  </channel>
</rss>
