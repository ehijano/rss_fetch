<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.FL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.FL</link>
    <description>cs.FL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.FL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Jul 2025 01:28:03 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Tue, 29 Jul 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Self-Verifying Predicates in B\"uchi Arithmetic</title>
      <link>https://arxiv.org/abs/2507.19717</link>
      <description>arXiv:2507.19717v1 Announce Type: new 
Abstract: We discuss a technique, based on Angluin's algorithm, for automatically generating finite automata for various kinds of useful first-order logic formulas in B\"uchi arithmetic. Construction in this way can be faster and use much less space than more direct methods. We discuss the theory and we present some empirical data for the free software Walnut.</description>
      <guid isPermaLink="false">oai:arXiv.org:2507.19717v1</guid>
      <category>cs.FL</category>
      <category>cs.DM</category>
      <category>math.CO</category>
      <pubDate>Tue, 29 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Mazen Khodier, Luke Schaeffer, Jeffrey Shallit</dc:creator>
    </item>
    <item>
      <title>On Higher Order Busy Beaver Function</title>
      <link>https://arxiv.org/abs/2507.20321</link>
      <description>arXiv:2507.20321v1 Announce Type: cross 
Abstract: In this paper, we extend Busy Beaver function to a class of higher order Busy Beaver functions based on Turing oracle machine. We prove some results about the relation between decidability of number theoretical formula and higher order Busy Beaver functions, and the relation between computability of max-min partial recursive functions and higher order Busy Beaver functions. We also present some conjectures on higher order Busy Beaver functions.</description>
      <guid isPermaLink="false">oai:arXiv.org:2507.20321v1</guid>
      <category>cs.CC</category>
      <category>cs.FL</category>
      <pubDate>Tue, 29 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Zining Cao</dc:creator>
    </item>
    <item>
      <title>Arbitrary-arity Tree Automata and QCTL</title>
      <link>https://arxiv.org/abs/2410.18799</link>
      <description>arXiv:2410.18799v3 Announce Type: replace-cross 
Abstract: We introduce a new class of automata (which we coin EU-automata) running on infininte trees of arbitrary (finite) arity. We develop and study several algorithms to perform classical operations (union, intersection, complement, projection, alternation removal) for those automata, and precisely characterise their complexities. We also develop algorithms for solving membership and emptiness for the languages of trees accepted by EU-automata.
  We then use EU-automata to obtain several algorithmic and expressiveness results for the temporal logic QCTL (which extends CTL with quantification over atomic propositions) and for MSO. On the one hand, we obtain decision procedures with optimal complexity for QCTL satisfiability and model checking; on the other hand, we obtain an algorithm for translating any QCTL formula with k quantifier alternations to formulas with at most one quantifier alternation, at the expense of a $(k + 1)$-exponential blow-up in the size of the formulas. Using the same techniques, we prove that any MSO formula can be translated into a formula with at most four quantifier alternations (and only one second-order-quantifier alternation), this time with a $(k + 2)$-exponential blow-up in the size of the formula.</description>
      <guid isPermaLink="false">oai:arXiv.org:2410.18799v3</guid>
      <category>cs.LO</category>
      <category>cs.FL</category>
      <pubDate>Tue, 29 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Fran\c{c}ois Laroussinie, Nicolas Markey</dc:creator>
    </item>
  </channel>
</rss>
