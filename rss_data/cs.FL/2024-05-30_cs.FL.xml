<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.FL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.FL</link>
    <description>cs.FL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.FL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 May 2024 04:00:15 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 30 May 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>DFAMiner: Mining minimal separating DFAs from labelled samples</title>
      <link>https://arxiv.org/abs/2405.18871</link>
      <description>arXiv:2405.18871v1 Announce Type: new 
Abstract: We propose DFAMiner, a passive learning tool for learning minimal separating deterministic finite automata (DFA) from a set of labelled samples. Separating automata are an interesting class of automata that occurs generally in regular model checking and has raised interest in foundational questions of parity game solving. We first propose a simple and linear-time algorithm that incrementally constructs a three-valued DFA (3DFA) from a set of labelled samples given in the usual lexicographical order. This 3DFA has accepting and rejecting states as well as don't-care states, so that it can exactly recognise the labelled examples. We then apply our tool to mining a minimal separating DFA for the labelled samples by minimising the constructed automata via a reduction to solving SAT problems. Empirical evaluation shows that our tool outperforms current state-of-the-art tools significantly on standard benchmarks for learning minimal separating DFAs from samples. Progress in the efficient construction of separating DFAs can also lead to finding the lower bound of parity game solving, where we show that DFAMiner can create optimal separating automata for simple languages with up to 7 colours. Future improvements might offer inroads to better data structures.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.18871v1</guid>
      <category>cs.FL</category>
      <category>cs.LG</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Daniele Dell'Erba, Yong Li, Sven Schewe</dc:creator>
    </item>
    <item>
      <title>The Polynomial Hierarchy does not collapse</title>
      <link>https://arxiv.org/abs/2405.18439</link>
      <description>arXiv:2405.18439v1 Announce Type: cross 
Abstract: The arithmetical hierarchy (AH) is similar to the polynomial hierarchy (PH). Unlike the PH, the AH does not collapse relative to any oracle. A language in the (k + 1)-st level of the AH is computable enumerable (c.e.) relative to the kth level. So, given an oracle in the kth level of the AH, we could use a black-box search to decide whether the input word is in the language. With very large padding arguments, i.e. the paddings grow faster than any relative to the level k of the AH computable function, we would construct a language contained in the k + 1 level of PH, if we use only a finite set of input words. From the oracle in AH, we would construct an analogue oracle at the kth level of PH. For the input words of the finite set, a word is in the language of AH, if and only if it is in the language of PH. And the input word is in the oracle set of AH, if and only if it is in the oracle of PH. As in the language of AH, we must apply a black-box search in the language of PH. So, we would also have exponentially many oracle queries in the language of PH. The PH does not collapse.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.18439v1</guid>
      <category>cs.CC</category>
      <category>cs.FL</category>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Reiner Czerwinski</dc:creator>
    </item>
    <item>
      <title>A Framework for Universality in Physics, Computer Science, and Beyond</title>
      <link>https://arxiv.org/abs/2307.06851</link>
      <description>arXiv:2307.06851v2 Announce Type: replace-cross 
Abstract: Turing machines and spin models share a notion of universality according to which some simulate all others. Is there a theory of universality that captures this notion? We set up a categorical framework for universality which includes as instances universal Turing machines, universal spin models, NP completeness, top of a preorder, denseness of a subset, and more. By identifying necessary conditions for universality, we show that universal spin models cannot be finite. We also characterize when universality can be distinguished from a trivial one and use it to show that universal Turing machines are non-trivial in this sense. Our framework allows not only to compare universalities within each instance, but also instances themselves. We leverage a Fixed Point Theorem inspired by a result of Lawvere to establish that universality and negation give rise to unreachability (such as uncomputability). As such, this work sets the basis for a unified approach to universality and invites the study of further examples within the framework.</description>
      <guid isPermaLink="false">oai:arXiv.org:2307.06851v2</guid>
      <category>cs.CC</category>
      <category>cs.FL</category>
      <category>cs.LO</category>
      <category>math-ph</category>
      <category>math.MP</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-sa/4.0/</dc:rights>
      <arxiv:DOI>10.32408/compositionality-6-3</arxiv:DOI>
      <arxiv:journal_reference>Compositionality 6, 3 (2024)</arxiv:journal_reference>
      <dc:creator>Tom\'a\v{s} Gonda, Tobias Reinhart, Sebastian Stengele, Gemma De les Coves</dc:creator>
    </item>
  </channel>
</rss>
