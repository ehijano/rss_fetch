<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.CG updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.CG</link>
    <description>cs.CG updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.CG" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Jul 2025 04:03:56 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Fri, 11 Jul 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Topological Machine Learning with Unreduced Persistence Diagrams</title>
      <link>https://arxiv.org/abs/2507.07156</link>
      <description>arXiv:2507.07156v1 Announce Type: cross 
Abstract: Supervised machine learning pipelines trained on features derived from persistent homology have been experimentally observed to ignore much of the information contained in a persistence diagram. Computing persistence diagrams is often the most computationally demanding step in such a pipeline, however. To explore this, we introduce several methods to generate topological feature vectors from unreduced boundary matrices. We compared the performance of pipelines trained on vectorizations of unreduced PDs to vectorizations of fully-reduced PDs across several data and task types. Our results indicate that models trained on PDs built from unreduced diagrams can perform on par and even outperform those trained on fully-reduced diagrams on some tasks. This observation suggests that machine learning pipelines which incorporate topology-based features may benefit in terms of computational cost and performance by utilizing information contained in unreduced boundary matrices.</description>
      <guid isPermaLink="false">oai:arXiv.org:2507.07156v1</guid>
      <category>stat.ML</category>
      <category>cs.CG</category>
      <category>cs.LG</category>
      <category>math.AT</category>
      <pubDate>Fri, 11 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Nicole Abreu, Parker B. Edwards, Francis Motta</dc:creator>
    </item>
    <item>
      <title>A simple proof of a $(p,2)$-theorem for non-piercing regions</title>
      <link>https://arxiv.org/abs/2507.07269</link>
      <description>arXiv:2507.07269v1 Announce Type: cross 
Abstract: A family of sets satisfies the $(p,2)$-property if among any $p$ sets in the family, some two intersect. Two recent works used elaborate geometric techniques to show that any family of non-piercing regions in the plane that satisfies the $(p,2)$-property can be pierced by $O(p^9)$ points. In this note we show that even in a much more general setting, piercing by $O(p)$ points can be deduced from known results on hypergraphs with a hereditarily linear Delaunay graph, which include intersection hypergraphs of non-piercing regions.</description>
      <guid isPermaLink="false">oai:arXiv.org:2507.07269v1</guid>
      <category>math.CO</category>
      <category>cs.CG</category>
      <pubDate>Fri, 11 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Chaya Keller, Shakhar Smorodinsky</dc:creator>
    </item>
    <item>
      <title>The Smooth Power of the "Neandertal Method"</title>
      <link>https://arxiv.org/abs/2507.07569</link>
      <description>arXiv:2507.07569v1 Announce Type: cross 
Abstract: We describe an algorithmic method to transform a Euclidean wallpaper pattern into a Circle Limit-style picture \`a la Escher. The design goals for the method are to be mathematically sound, aesthetically pleasing and fast to compute. It turns out that a certain class of conformal maps is particularly well-suited for the problem. Moreover, in our specific application, a very simple method, sometimes jokingly called the "Neandertal Method" for its almost brutal simplicity, proves to be highly efficient, as it can easily be parallelized to be run on the GPU, unlike many other approaches.</description>
      <guid isPermaLink="false">oai:arXiv.org:2507.07569v1</guid>
      <category>math.MG</category>
      <category>cs.CG</category>
      <category>math.CO</category>
      <category>math.DG</category>
      <pubDate>Fri, 11 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-sa/4.0/</dc:rights>
      <dc:creator>Aaron Montag, Tim Reinhardt, J\"urgen Richter-Gebert</dc:creator>
    </item>
    <item>
      <title>Approximation Depth of Convex Polytopes</title>
      <link>https://arxiv.org/abs/2507.07779</link>
      <description>arXiv:2507.07779v1 Announce Type: cross 
Abstract: We study approximations of polytopes in the standard model for computing polytopes using Minkowski sums and (convex hulls of) unions. Specifically, we study the ability to approximate a target polytope by polytopes of a given depth. Our main results imply that simplices can only be ``trivially approximated''. On the way, we obtain a characterization of simplices as the only ``outer additive'' convex bodies.</description>
      <guid isPermaLink="false">oai:arXiv.org:2507.07779v1</guid>
      <category>math.MG</category>
      <category>cs.CG</category>
      <category>cs.LG</category>
      <category>math.CO</category>
      <pubDate>Fri, 11 Jul 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Egor Bakaev, Florestan Brunck, Amir Yehudayoff</dc:creator>
    </item>
  </channel>
</rss>
