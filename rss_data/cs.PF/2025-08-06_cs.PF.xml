<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.PF updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.PF</link>
    <description>cs.PF updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.PF" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Aug 2025 06:34:12 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Wed, 06 Aug 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>A Novel Hybrid Optical and STAR IRS System for NTN Communications</title>
      <link>https://arxiv.org/abs/2508.03147</link>
      <description>arXiv:2508.03147v1 Announce Type: new 
Abstract: This paper proposes a novel non-terrestrial networks (NTNs) system that integrates optical intelligent reflecting surfaces (OIRS) and simultaneous transmitting and reflecting Intelligent reflecting surfaces (STAR-IRS) to address critical challenges in next-generation communication networks. The proposed system model features a signal transmitted from the optical ground station (OGS) to the earth station (ES) via an OIRS mounted horizontally on a high altitude platform (HAP). The ES uses an amplify-and-forward (AF) relay with fixed gain for signal relaying, which is then transmitted through a STAR-IRS vertically installed on a building to facilitate communication with both indoor and outdoor users. The FSO link incorporates (multiple-input multiple-output) MIMO technology, and this paper develops a channel model specifically designed for scenarios where the number of OIRS units exceeds one. For the radio-frequency (RF) link, a novel and highly precise approximation method is introduced, offering superior accuracy compared to traditional approaches based on the central limit theorem (CLT). Closed-form analytical expressions for key performance metrics, including outage probability (OP), ergodic capacity and average bit error rate (BER) are derived in terms of the bivariate Fox-H function for this novel five hops system. Asymptotic expressions at high SNR are also presented, providing insights into system diversity order.</description>
      <guid isPermaLink="false">oai:arXiv.org:2508.03147v1</guid>
      <category>cs.PF</category>
      <category>cs.IT</category>
      <category>math.IT</category>
      <pubDate>Wed, 06 Aug 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Shunyuan Shang, Emna Zedini, Abla Kammoun, Mohamed-Slim Alouini</dc:creator>
    </item>
    <item>
      <title>Interpreting Performance Profiles with Deep Learning</title>
      <link>https://arxiv.org/abs/2508.02729</link>
      <description>arXiv:2508.02729v1 Announce Type: cross 
Abstract: Profiling tools (also known as profilers) play an important role in understanding program performance at runtime, such as hotspots, bottlenecks, and inefficiencies. While profilers have been proven to be useful, they give extra burden to software engineers. Software engineers, as the users, are responsible to interpret the complex performance data and identify actionable optimization in program source code. However, it can be challenging for users to associate inefficiencies with the program semantics, especially if the users are not the authors of the code, which limits the applicability of profilers.
  In this thesis, we explore a new direction to combine performance profiles and program semantics with a deep learning approach. The key idea is to glean code summary for semantic information (at a certain level) and integrate it into a profiler, which can better understand program inefficiencies for actionable optimization. To be concrete, we combine profiles generated by Async Profiler (the state-of-the-art Java profiler) with code summarization from a fine-tuned CodeBERT-based model. We demonstrate the code summaries of any selected call path in a graphic user interface. Our system can effectively assist analysis on many Java benchmarks.</description>
      <guid isPermaLink="false">oai:arXiv.org:2508.02729v1</guid>
      <category>cs.SE</category>
      <category>cs.AI</category>
      <category>cs.PF</category>
      <pubDate>Wed, 06 Aug 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Zhuoran Liu</dc:creator>
    </item>
  </channel>
</rss>
