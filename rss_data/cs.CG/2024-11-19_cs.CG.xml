<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.CG updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.CG</link>
    <description>cs.CG updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.CG" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Nov 2024 02:48:14 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Tue, 19 Nov 2024 00:00:00 -0500</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Computing Conforming Partitions with Low Stabbing Number for Rectilinear Polygons</title>
      <link>https://arxiv.org/abs/2411.11274</link>
      <description>arXiv:2411.11274v1 Announce Type: new 
Abstract: A \emph{conforming partition} of a rectilinear $ n $-gon\bastien{I change from ``a polygon'', otherwise $ n $ is not defined.} $ P $ is a partition of $ P $ into rectangles without using Steiner points (i.e., all corners of all rectangles must lie on\bastien{Maybe add: the boundary of} $ P $). The stabbing number of such a partition is the maximum number of rectangles intersected by an axis-aligned segment lying in the interior of $ P $. In this paper, we examine the problem of computing conforming partitions with low stabbing number. We show that computing a conforming partition with stabbing number at most~$ 4 $ is $ NP $-hard, which strengthens a previously known hardness result [Durocher \&amp; Mehrabi, Theor. Comput. Sci. 689: 157-168 (2017)] and eliminates the possibility for fixed-parameter-tractable algorithms parameterized by the stabbing number unless $ P = NP $. In contrast, we give (i) an $ O ( n \log n ) $-time\bastien{Reviewer request: changed from "linearithmic".} algorithm to decide whether a conforming partition with stabbing number~$ 2 $ exists, (ii) a fixed-parameter-tractable algorithm parameterized by both the stabbing number and treewidth of the pixelation of the polygon, and (iii) a fixed-parameter-tractable algorithm parameterized by the stabbing number for simple polygons in general position.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.11274v1</guid>
      <category>cs.CG</category>
      <pubDate>Tue, 19 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Therese Biedl, Stephane Durocher, Debajyoti Mondal, Rahnuma Islam Nishat, Bastien Rivier</dc:creator>
    </item>
    <item>
      <title>gDist: Efficient Distance Computation between 3D Meshes on GPU</title>
      <link>https://arxiv.org/abs/2411.11244</link>
      <description>arXiv:2411.11244v1 Announce Type: cross 
Abstract: Computing maximum/minimum distances between 3D meshes is crucial for various applications, i.e., robotics, CAD, VR/AR, etc. In this work, we introduce a highly parallel algorithm (gDist) optimized for Graphics Processing Units (GPUs), which is capable of computing the distance between two meshes with over 15 million triangles in less than 0.4 milliseconds (Fig. 1). By testing on benchmarks with varying characteristics, the algorithm achieves remarkable speedups over prior CPU-based and GPU-based algorithms on a commodity GPU (NVIDIA GeForce RTX 4090). Notably, the algorithm consistently maintains high-speed performance, even in challenging scenarios that pose difficulties for prior algorithms.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.11244v1</guid>
      <category>cs.GR</category>
      <category>cs.CG</category>
      <category>cs.PF</category>
      <pubDate>Tue, 19 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Peng Fang, Wei Wang, Ruofeng Tong, Hailong Li, Min Tang</dc:creator>
    </item>
    <item>
      <title>Efficient Exact Algorithms for Minimum Covering of Orthogonal Polygons with Squares</title>
      <link>https://arxiv.org/abs/2407.02658</link>
      <description>arXiv:2407.02658v2 Announce Type: replace 
Abstract: Let $P$ be an orthogonal polygon of $n$ vertices, without holes. The Orthogonal Polygon Covering with Squares (OPCS) problem takes as input such an orthogonal polygon $P$ with integral vertex coordinates, and asks to find the minimum number of axis-parallel squares whose union is $P$ itself. [Aupperle et. al, 1988] provide an $\mathcal O(N^{1.5})$-time algorithm for OPCS, where $N$ is the number of integral lattice points lying in $P$. In their paper, designing algorithms for OPCS with a running time polynomial in $n$, was stated as an open question; $N$ can be arbitrarily larger than $n$. Output sensitive algorithms were known due to [Bar-Yehuda and Ben-Chanoch, 1994], but these fail to address the open question, as the output can be arbitrarily larger than $n$. We address this open question by designing a polynomial-time exact algorithm for OPCS with a worst-case running time of $\mathcal O(n^{10})$.
  We also consider the following structural parameterized version of the problem. Let a knob be a polygon edge whose both endpoints are convex polygon vertices. Given an input orthogonal polygon without holes that has $n$ vertices and at most $k$ knobs, we design an algorithm for OPCS with a worst-case running time $\mathcal O(n^2 + k^{10} \cdot n)$. This algorithm is more efficient than the former, whenever $k = o(n^{9/10})$.
  The problem of Orthogonal Polygon with Holes Covering with Squares (OPCSH) is also studied by [Aupperle et. al, 1988], where the input polygon could have holes. They claim a proof that OPCSH is NP-complete even when the input is the $N$ lattice points inside the polygon. We think there is an error in their proof, where an incorrect reduction from Planar 3-CNF is shown. We provide a correct reduction with a novel construction of one of the gadgets, and show how this leads to a correct proof of NP-completeness of OPCSH.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.02658v2</guid>
      <category>cs.CG</category>
      <pubDate>Tue, 19 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Anubhav Dhar, Subham Ghosh, Sudeshna Kolay</dc:creator>
    </item>
    <item>
      <title>Gathering on a Circle with Limited Visibility by Anonymous Oblivious Robots</title>
      <link>https://arxiv.org/abs/2005.07917</link>
      <description>arXiv:2005.07917v3 Announce Type: replace-cross 
Abstract: A swarm of anonymous oblivious mobile robots, operating in deterministic Look-Compute-Move cycles, is confined within a circular track. All robots agree on the clockwise direction (chirality), they are activated by an adversarial semi-synchronous scheduler (SSYNCH), and an active robot always reaches the destination point it computes (rigidity). Robots have limited visibility: each robot can see only the points on the circle that have an angular distance strictly smaller than a constant $\vartheta$ from the robot's current location, where $0&lt;\vartheta\leq\pi$ (angles are expressed in radians).
  We study the Gathering problem for such a swarm of robots: that is, all robots are initially in distinct locations on the circle, and their task is to reach the same point on the circle in a finite number of turns, regardless of the way they are activated by the scheduler. Note that, due to the anonymity of the robots, this task is impossible if the initial configuration is rotationally symmetric; hence, we have to make the assumption that the initial configuration be rotationally asymmetric.
  We prove that, if $\vartheta=\pi$ (i.e., each robot can see the entire circle except its antipodal point), there is a distributed algorithm that solves the Gathering problem for swarms of any size. By contrast, we also prove that, if $\vartheta\leq \pi/2$, no distributed algorithm solves the Gathering problem, regardless of the size of the swarm, even under the assumption that the initial configuration is rotationally asymmetric and the visibility graph of the robots is connected.
  The latter impossibility result relies on a probabilistic technique based on random perturbations, which is novel in the context of anonymous mobile robots. Such a technique is of independent interest, and immediately applies to other Pattern-Formation problems.</description>
      <guid isPermaLink="false">oai:arXiv.org:2005.07917v3</guid>
      <category>cs.DC</category>
      <category>cs.CG</category>
      <category>cs.RO</category>
      <pubDate>Tue, 19 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Giuseppe A. Di Luna, Ryuhei Uehara, Giovanni Viglietta, Yukiko Yamauchi</dc:creator>
    </item>
    <item>
      <title>Maximizing the Maximum Degree in Ordered Nearest Neighbor Graphs</title>
      <link>https://arxiv.org/abs/2406.08913</link>
      <description>arXiv:2406.08913v2 Announce Type: replace-cross 
Abstract: For an ordered point set in a Euclidean space or, more generally, in an abstract metric space, the ordered Nearest Neighbor Graph is obtained by connecting each of the points to its closest predecessor by a directed edge. We show that for every set of $n$ points in $\mathbb{R}^d$, there exists an order such that the corresponding ordered Nearest Neighbor Graph has maximum degree at least $\log{n}/(4d)$. Apart from the $1/(4d)$ factor, this bound is the best possible. As for the abstract setting, we show that for every $n$-element metric space, there exists an order such that the corresponding ordered Nearest Neighbor Graph has maximum degree $\Omega(\sqrt{\log{n}/\log\log{n}})$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2406.08913v2</guid>
      <category>math.CO</category>
      <category>cs.CG</category>
      <category>math.MG</category>
      <pubDate>Tue, 19 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>P\'eter \'Agoston, Adrian Dumitrescu, Arsenii Sagdeev, Karamjeet Singh, Ji Zeng</dc:creator>
    </item>
  </channel>
</rss>
