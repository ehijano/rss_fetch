<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.AR updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.AR</link>
    <description>cs.AR updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.AR" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Aug 2024 01:38:25 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 08 Aug 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>HeTraX: Energy Efficient 3D Heterogeneous Manycore Architecture for Transformer Acceleration</title>
      <link>https://arxiv.org/abs/2408.03397</link>
      <description>arXiv:2408.03397v1 Announce Type: new 
Abstract: Transformers have revolutionized deep learning and generative modeling to enable unprecedented advancements in natural language processing tasks and beyond. However, designing hardware accelerators for executing transformer models is challenging due to the wide variety of computing kernels involved in the transformer architecture. Existing accelerators are either inadequate to accelerate end-to-end transformer models or suffer notable thermal limitations. In this paper, we propose the design of a three-dimensional heterogeneous architecture referred to as HeTraX specifically optimized to accelerate end-to-end transformer models. HeTraX employs hardware resources aligned with the computational kernels of transformers and optimizes both performance and energy. Experimental results show that HeTraX outperforms existing state-of-the-art by up to 5.6x in speedup and improves EDP by 14.5x while ensuring thermally feasibility.</description>
      <guid isPermaLink="false">oai:arXiv.org:2408.03397v1</guid>
      <category>cs.AR</category>
      <category>cs.LG</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Pratyush Dhingra, Janardhan Rao Doppa, Partha Pratim Pande</dc:creator>
    </item>
    <item>
      <title>LLM-Aided Compilation for Tensor Accelerators</title>
      <link>https://arxiv.org/abs/2408.03408</link>
      <description>arXiv:2408.03408v1 Announce Type: new 
Abstract: Hardware accelerators, in particular accelerators for tensor processing, have many potential application domains. However, they currently lack the software infrastructure to support the majority of domains outside of deep learning. Furthermore, a compiler that can easily be updated to reflect changes at both application and hardware levels would enable more agile development and design space exploration of accelerators, allowing hardware designers to realize closer-to-optimal performance. In this work, we discuss how large language models (LLMs) could be leveraged to build such a compiler. Specifically, we demonstrate the ability of GPT-4 to achieve high pass rates in translating code to the Gemmini accelerator, and prototype a technique for decomposing translation into smaller, more LLM-friendly steps. Additionally, we propose a 2-phase workflow for utilizing LLMs to generate hardware-optimized code.</description>
      <guid isPermaLink="false">oai:arXiv.org:2408.03408v1</guid>
      <category>cs.AR</category>
      <category>cs.LG</category>
      <category>cs.PL</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Charles Hong, Sahil Bhatia, Altan Haan, Shengjun Kris Dong, Dima Nikiforov, Alvin Cheung, Yakun Sophia Shao</dc:creator>
    </item>
    <item>
      <title>Unconventional Universal Computation in Babbage's Analytical Engine</title>
      <link>https://arxiv.org/abs/2408.03334</link>
      <description>arXiv:2408.03334v1 Announce Type: cross 
Abstract: This paper shows that the programming model of Babbage's Analytical Engine, although unconventional, can be harnessed in order to simulate indirect addressing, a capability that was not included in the original instruction set. That is, in a theoretical sense, the Analytical Engine was as universal as computers we have today. We show how to implement indirect addressing for a working memory of fixed size; this makes it possible to simulate a Turing machine with a finite tape. The result is, of course, only of theoretical and historical interest, without any practical implications.</description>
      <guid isPermaLink="false">oai:arXiv.org:2408.03334v1</guid>
      <category>cs.LO</category>
      <category>cs.AR</category>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Raul Rojas</dc:creator>
    </item>
    <item>
      <title>Component reusability evaluation and requirement tracing for agent-based simulation-physical systems</title>
      <link>https://arxiv.org/abs/2303.09565</link>
      <description>arXiv:2303.09565v4 Announce Type: replace-cross 
Abstract: In the early stages of product development, evaluating design concepts is crucial due to its impact on quality and cost. However, this process is often hindered by vague and uncertain design information. We use the Domain Specification Language (DSL) to improve design analysis and evaluation of systems incorporating simulation and physical parts. '
  Goal: Our method evaluates the integrity between the simulated and physical embodiment of the system. The assessment is done in various scopes, e.g. per pair of Digital Twins (DT) and its physical counterpart- Physical Twin (PT), system-wide, or one of many system setups.
  Method: We propose a DSL based on Systems Modeling Language (SysML). The Simulation-Physical Systems Modeling Language (SPSysML) defines the taxonomy of CPS consisting of at least a physical or simulated part. Based on SPSysML, we define quantitative factors and a requirement-based system structuring method, which enhances requirement analysis and allows DT to perceive exogenous actions in the simulated world.
  Result: SPSysML is used to develop a robotic system for the INCARE project. In subsequent iterations of the system's design process, the simulation-physical integrity of the system is improved, and more system components is shared between its simulated and physical embodiments. The designed system was deployed on the physical robot and two simulators. System setups are based on Robot Operating System (ROS) and ROS2. Therefore, we argue that SPSysML is neither specific for a control system framework nor a robot simulator. SPSysML was used by a third-party developer and was assessed by him and other practitioners in a survey.
  Summary: SPSysML allows the design of systems featuring DTs and evaluation for improved integrity between simulation and physical parts. The requirement-based system structuring enhances the traceability of system requirements allocation.</description>
      <guid isPermaLink="false">oai:arXiv.org:2303.09565v4</guid>
      <category>cs.SE</category>
      <category>cs.AR</category>
      <category>cs.MA</category>
      <category>cs.RO</category>
      <category>cs.SY</category>
      <category>eess.SY</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-sa/4.0/</dc:rights>
      <dc:creator>Wojciech Dudek, Narcis Miguel, Tomasz Winiarski</dc:creator>
    </item>
  </channel>
</rss>
