<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.FL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.FL</link>
    <description>cs.FL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.FL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Mar 2024 04:00:23 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Tue, 26 Mar 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>A short survey around the pumping lemma for context-free languages</title>
      <link>https://arxiv.org/abs/2403.15899</link>
      <description>arXiv:2403.15899v1 Announce Type: new 
Abstract: Following a seminar the present author gave to an Automata Theory course to computer science students, it will be presented, in a very synthetic and mostly selfcontained way, the principal properties of context free languages (CFL), with particular attention given to the Pumping Lemma (PL), and of grammars which generate them(CFG). We refer to Chomsky and Schutzenberger for the first works about it. What is known in literature as the Iteration Theorem here will be referred to as the Ogden's Lemma in a fully justified way. All definitions not strictly connected with the notion of context freeness will be omitted (we will give precise references for all of them). The symbology used is substantially the classical one, but we will replace some symbols to avoid confusion with those used in logic</description>
      <guid isPermaLink="false">oai:arXiv.org:2403.15899v1</guid>
      <category>cs.FL</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Gabriele Gull\`a</dc:creator>
    </item>
    <item>
      <title>Presenting Interval Pomsets with Interfaces</title>
      <link>https://arxiv.org/abs/2403.16626</link>
      <description>arXiv:2403.16626v1 Announce Type: new 
Abstract: Interval-order partially ordered multisets with interfaces (ipomsets) have shown to be a versatile model for executions of concurrent systems in which both precedence and concurrency need to be taken into account. In this paper, we develop a presentation of ipomsets as generated by a graph of certain discrete ipomsets (starters and terminators) under the relation which composes subsequent starters and subsequent terminators. Using this presentation, we show that also subsumptions are generated by elementary relations. We develop a similar correspondence on the automata side, relating higher-dimensional automata, which generate ipomsets, and ST-automata, which generate step sequences, and their respective languages.</description>
      <guid isPermaLink="false">oai:arXiv.org:2403.16626v1</guid>
      <category>cs.FL</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Amazigh Amrane, Hugo Bazille, Emily Clement, Uli Fahrenberg, Krzysztof Ziemianski</dc:creator>
    </item>
    <item>
      <title>Simulations for Event-Clock Automata</title>
      <link>https://arxiv.org/abs/2207.02633</link>
      <description>arXiv:2207.02633v4 Announce Type: replace 
Abstract: Event-clock automata (ECA) are a well-known semantic subclass of timed automata (TA) which enjoy admirable theoretical properties, e.g., determinizability, and are practically useful to capture timed specifications. However, unlike for timed automata, there exist no implementations for checking non-emptiness of event-clock automata. As ECAs contain special prophecy clocks that guess and maintain the time to the next occurrence of specific events, they cannot be seen as a syntactic subclass of TA. Therefore, implementations for TA cannot be directly used for ECAs, and moreover the translation of an ECA to a semantically equivalent TA is expensive. Another reason for the lack of ECA implementations is the difficulty in adapting zone-based algorithms, critical in the timed automata setting, to the event-clock automata setting. This difficulty was studied by Geeraerts et al. in 2011, where the authors proposed a zone enumeration procedure that uses zone extrapolations for finiteness.
  In this article, we propose a different zone-based algorithm to solve the reachability problem for event-clock automata, using simulations for finiteness. A surprising consequence of our result is that for event-predicting automata, the subclass of event-clock automata that only use prophecy clocks, we obtain finiteness even without any simulations. For general event-clock automata, our new algorithm exploits the G-simulation framework, which is the coarsest known simulation relation in timed automata literature, and has been recently used for advances in other extensions of timed automata.</description>
      <guid isPermaLink="false">oai:arXiv.org:2207.02633v4</guid>
      <category>cs.FL</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>S Akshay, Paul Gastin, R Govind, B Srivathsan</dc:creator>
    </item>
    <item>
      <title>Lemur: Integrating Large Language Models in Automated Program Verification</title>
      <link>https://arxiv.org/abs/2310.04870</link>
      <description>arXiv:2310.04870v3 Announce Type: replace 
Abstract: The demonstrated code-understanding capability of LLMs raises the question of whether they can be used for automated program verification, a task that demands high-level abstract reasoning about program properties that is challenging for verification tools. We propose a general methodology to combine the power of LLMs and automated reasoners for automated program verification. We formally describe this methodology as a set of derivation rules and prove its soundness. We instantiate the calculus as a sound automated verification procedure, which led to practical improvements on a set of synthetic and competition benchmarks.</description>
      <guid isPermaLink="false">oai:arXiv.org:2310.04870v3</guid>
      <category>cs.FL</category>
      <category>cs.AI</category>
      <category>cs.LG</category>
      <category>cs.LO</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-sa/4.0/</dc:rights>
      <dc:creator>Haoze Wu, Clark Barrett, Nina Narodytska</dc:creator>
    </item>
    <item>
      <title>Automata and coalgebras in categories of species</title>
      <link>https://arxiv.org/abs/2401.04242</link>
      <description>arXiv:2401.04242v3 Announce Type: replace-cross 
Abstract: We study generalized automata (in the sense of Ad\'amek-Trnkov\'a) in Joyal's category of (set-valued) combinatorial species, and as an important preliminary step, we study coalgebras for its derivative endofunctor $\partial$ and for the `Euler homogeneity operator' $L\circ\partial$ arising from the adjunction $L\dashv\partial\dashv R$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2401.04242v3</guid>
      <category>math.CT</category>
      <category>cs.FL</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Fosco Loregian</dc:creator>
    </item>
    <item>
      <title>Beatty Sequences for a Quadratic Irrational: Decidability and Applications</title>
      <link>https://arxiv.org/abs/2402.08331</link>
      <description>arXiv:2402.08331v2 Announce Type: replace-cross 
Abstract: Let $\alpha$ and $\beta$ belong to the same quadratic field. We show that the inhomogeneous Beatty sequence $(\lfloor n \alpha + \beta \rfloor)_{n \geq 1}$ is synchronized, in the sense that there is a finite automaton that takes as input the Ostrowski representations of $n$ and $y$ in parallel, and accepts if and only if $y = \lfloor n \alpha + \beta \rfloor$. Since it is already known that the addition relation is computable for Ostrowski representations based on a quadratic number, a consequence is a new and rather simple proof that the first-order logical theory of these sequences with addition is decidable. The decision procedure is easily implemented in the free software Walnut.
  As an application, we show that for each $r \geq 1$ it is decidable whether the set $\{ \lfloor n \alpha + \beta \rfloor \, : \, n \geq 1 \}$ forms an additive basis (or asymptotic additive basis) of order $r$. Using our techniques, we also solve some open problems of Reble and Kimberling, and give an explicit characterization of a sequence of Hildebrand et al.</description>
      <guid isPermaLink="false">oai:arXiv.org:2402.08331v2</guid>
      <category>math.NT</category>
      <category>cs.DM</category>
      <category>cs.FL</category>
      <category>math.CO</category>
      <category>math.LO</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Luke Schaeffer, Jeffrey Shallit, Stefan Zorcic</dc:creator>
    </item>
  </channel>
</rss>
