<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.CG updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.CG</link>
    <description>cs.CG updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.CG" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Aug 2024 01:39:11 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Tue, 13 Aug 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Gromov's Approximating Tree and the All-Pairs Bottleneck Paths Problem</title>
      <link>https://arxiv.org/abs/2408.05338</link>
      <description>arXiv:2408.05338v1 Announce Type: new 
Abstract: Given a pointed metric space $(X,\mathsf{dist}, w)$ on $n$ points, its Gromov's approximating tree is a 0-hyperbolic pseudo-metric space $(X,\mathsf{dist}_T)$ such that $\mathsf{dist}(x,w)=\mathsf{dist}_T(x,w)$ and $\mathsf{dist}(x, y)-2 \delta \log_2n \leq \mathsf{dist}_T (x, y) \leq \mathsf{dist}(x, y)$ for all $x, y \in X$ where $\delta$ is the Gromov hyperbolicity of $X$. On the other hand, the all pairs bottleneck paths (APBP) problem asks, given an undirected graph with some capacities on its edges, to find the maximal path capacity between each pair of vertices. In this note, we prove:
  $\bullet$ Computing Gromov's approximating tree for a metric space with $n+1$ points from its matrix of distances reduces to solving the APBP problem on an connected graph with $n$ vertices.
  $\bullet$ There is an explicit algorithm that computes Gromov's approximating tree for a graph from its adjacency matrix in quadratic time.
  $\bullet$ Solving the APBP problem on a weighted graph with $n$ vertices reduces to finding Gromov's approximating tree for a metric space with $n+1$ points from its distance matrix.</description>
      <guid isPermaLink="false">oai:arXiv.org:2408.05338v1</guid>
      <category>cs.CG</category>
      <category>cs.CC</category>
      <category>cs.DM</category>
      <category>math.CO</category>
      <category>math.OC</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Anders Cornect, Eduardo Mart\'inez-Pedroza</dc:creator>
    </item>
    <item>
      <title>Rapid Vector-based Any-angle Path Planning with Non-convex Obstacles</title>
      <link>https://arxiv.org/abs/2408.05806</link>
      <description>arXiv:2408.05806v1 Announce Type: cross 
Abstract: Vector-based algorithms are novel algorithms in optimal any-angle path planning that are motivated by bug algorithms, bypassing free space by directly conducting line-of-sight checks between two queried points, and searching along obstacle contours if a check collides with an obstacle. The algorithms outperform conventional free-space planners such as A* especially when the queried points are far apart. The thesis presents novel search methods to speed up vector-based algorithms in non-convex obstacles by delaying line-of-sight checks. The "best hull" is a notable method that allows for monotonically increasing path cost estimates even without verifying line-of-sight, utilizing "phantom points" placed on non-convex corners to mimic future turning points. Building upon the methods, the algorithms R2 and R2+ are formulated, which outperform other vector-based algorithms when the optimal path solution is expected to have few turning points. Other novel methods include a novel and versatile multi-dimensional ray tracer for occupancy grids, and a description of the three-dimensional angular sector for future works.</description>
      <guid isPermaLink="false">oai:arXiv.org:2408.05806v1</guid>
      <category>cs.RO</category>
      <category>cs.CG</category>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Yan Kai Lai</dc:creator>
    </item>
    <item>
      <title>Sequential non-determinism in tile self-assembly: a general framework and an application to efficient temperature-1 self-assembly of squares</title>
      <link>https://arxiv.org/abs/2408.06241</link>
      <description>arXiv:2408.06241v1 Announce Type: cross 
Abstract: In this paper, we work in a 2D version of the probabilistic variant of Winfree's abstract Tile Assembly Model defined by Chandran, Gopalkrishnan and Reif (SICOMP 2012) in which attaching tiles are sampled uniformly with replacement. First, we develop a framework called ``sequential non-determinism'' for analyzing the probabilistic correctness of a non-deterministic, temperature-1 tile assembly system (TAS) in which most (but not all) tile attachments are deterministic and the non-deterministic attachments always occur in a specific order. Our main sequential non-determinism result equates the probabilistic correctness of such a TAS to a finite product of probabilities, each of which 1) corresponds to the probability of the correct type of tile attaching at a point where it is possible for two different types to attach, and 2) ignores all other tile attachments that do not affect the non-deterministic attachment. We then show that sequential non-determinism allows for efficient and geometrically expressive self-assembly. To that end, we constructively prove that for any positive integer $N$ and any real $\delta \in (0,1)$, there exists a TAS that self-assembles into an $N \times N$ square with probability at least $1 - \delta$ using only $O\left( \log N + \log \frac{1}{\delta} \right)$ types of tiles. Our bound improves upon the previous state-of-the-art bound for this problem by Cook, Fu and Schweller (SODA 2011).</description>
      <guid isPermaLink="false">oai:arXiv.org:2408.06241v1</guid>
      <category>cs.DS</category>
      <category>cs.CG</category>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>David Furcy, Scott M. Summers</dc:creator>
    </item>
    <item>
      <title>Shadoks Approach to Convex Covering</title>
      <link>https://arxiv.org/abs/2303.07696</link>
      <description>arXiv:2303.07696v2 Announce Type: replace 
Abstract: We describe the heuristics used by the Shadoks team in the CG:SHOP 2023 Challenge. The Challenge consists of 206 instances, each being a polygon with holes. The goal is to cover each instance polygon with a small number of convex polygons. Our general strategy is the following. We find a big collection of large (often maximal) convex polygons inside the instance polygon and then solve several set cover problems to find a small subset of the collection that covers the whole polygon.</description>
      <guid isPermaLink="false">oai:arXiv.org:2303.07696v2</guid>
      <category>cs.CG</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.4230/LIPIcs.SoCG.2023.67</arxiv:DOI>
      <arxiv:journal_reference>In 39th International Symposium on Computational Geometry (SoCG 2023). Leibniz International Proceedings in Informatics (LIPIcs), Volume 258, pp. 67:1-67:9, 2023</arxiv:journal_reference>
      <dc:creator>Guilherme D. da Fonseca</dc:creator>
    </item>
  </channel>
</rss>
