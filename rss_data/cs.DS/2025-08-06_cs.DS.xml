<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.DS updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.DS</link>
    <description>cs.DS updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.DS" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Aug 2025 04:00:15 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Wed, 06 Aug 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Finding Colorings in One-Sided Expanders</title>
      <link>https://arxiv.org/abs/2508.02825</link>
      <description>arXiv:2508.02825v1 Announce Type: new 
Abstract: We establish new algorithmic guarantees with matching hardness results for coloring and independent set problems in one-sided expanders and related classes of graphs. For example, given a $3$-colorable regular one-sided expander, we compute in polynomial time either an independent set of relative size at least $1/2-o(1)$ or a proper $3$-coloring for all but an $o(1)$ fraction of the vertices, where $o(1)$ stands for a function that tends to $0$ with the second largest eigenvalue of the normalized adjacency matrix. This result improves on recent seminal work of Bafna, Hsieh, and Kothari (STOC 2025) developing an algorithm that efficiently finds independent sets of relative size at least $0.01$ in such graphs. We also obtain an efficient $1.6667$-factor approximation algorithm for VERTEX COVER in sufficiently strong regular one-sided expanders, improving over a previous $(2-\epsilon)$-factor approximation in such graphs for an unspecified constant $\epsilon&gt;0$.
  We propose a new stratification of $k$-COLORING in terms of $k$-by-$k$ matrices akin to predicate sets for constraint satisfaction problems. We prove that whenever this matrix has repeated rows, the corresponding coloring problem is NP-hard for one-sided expanders under the Unique Games Conjecture. On the other hand, if this matrix has no repeated rows, our algorithms can solve the corresponding coloring problem on one-sided expanders in polynomial time.
  As starting point for our algorithmic results, we show a property of graph spectra that, to the best of our knowledge, has not been observed before: The number of negative eigenvalues smaller than $-\tau$ is at most $O(1/\tau^{2})$ times the number of eigenvalues larger than $\tau^{2}/2$. While this result allows us to bound the number of eigenvalues bounded away from $0$ in one-sided spectral expanders, this property alone is insufficient for our algorithmic results.</description>
      <guid isPermaLink="false">oai:arXiv.org:2508.02825v1</guid>
      <category>cs.DS</category>
      <pubDate>Wed, 06 Aug 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Rares-Darius Buhai, Yiding Hua, David Steurer, Andor V\'ari-Kakas</dc:creator>
    </item>
    <item>
      <title>Coloring 3-Colorable Graphs with Low Threshold Rank</title>
      <link>https://arxiv.org/abs/2508.03093</link>
      <description>arXiv:2508.03093v1 Announce Type: new 
Abstract: We present a new algorithm for finding large independent sets in $3$-colorable graphs with small $1$-sided threshold rank. Specifically, given an $n$-vertex $3$-colorable graph whose uniform random walk matrix has at most $r$ eigenvalues larger than $\varepsilon$, our algorithm finds a proper $3$-coloring on at least $(\frac{1}{2}-O(\varepsilon))n$ vertices in time $n^{O(r/\varepsilon^2)}$. This extends and improves upon the result of Bafna, Hsieh, and Kothari on $1$-sided expanders. Furthermore, an independent work by Buhai, Hua, Steurer, and V\'ari-Kakas shows that it is UG-hard to properly $3$-color more than $(\frac{1}{2}+\varepsilon)n$ vertices, thus establishing the tightness of our result.
  Our proof is short and simple, relying on the observation that for any distribution over proper $3$-colorings, the correlation across an edge must be large if the marginals of the endpoints are not concentrated on any single color. Notably, this property fails for $4$-colorings, which is consistent with the hardness result of [BHK25] for $4$-colorable $1$-sided expanders.</description>
      <guid isPermaLink="false">oai:arXiv.org:2508.03093v1</guid>
      <category>cs.DS</category>
      <pubDate>Wed, 06 Aug 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Jun-Ting Hsieh</dc:creator>
    </item>
    <item>
      <title>When is String Reconstruction using de Bruijn Graphs Hard?</title>
      <link>https://arxiv.org/abs/2508.03433</link>
      <description>arXiv:2508.03433v1 Announce Type: new 
Abstract: The reduction of the fragment assembly problem to (variations of) the classical Eulerian trail problem [Pevzner et al., PNAS 2001] has led to remarkable progress in genome assembly. This reduction employs the notion of de Bruijn graph $G=(V,E)$ of order $k$ over an alphabet $\Sigma$. A single Eulerian trail in $G$ represents a candidate genome reconstruction. Bernardini et al. have also introduced the complementary idea in data privacy [ALENEX 2020] based on $z$-anonymity.
  The pressing question is: How hard is it to reconstruct a best string from a de Bruijn graph given a function that models domain knowledge? Such a function maps every length-$k$ string to an interval of positions where it may occur in the reconstructed string. By the above reduction to de Bruijn graphs, the latter function translates into a function $c$ mapping every edge to an interval where it may occur in an Eulerian trail. This gives rise to the following basic problem on graphs: Given an instance $(G,c)$, can we efficiently compute an Eulerian trail respecting $c$? Hannenhalli et al.~[CABIOS 1996] formalized this problem and showed that it is NP-complete.
  We focus on parametrization aiming to capture the quality of our domain knowledge in the complexity. Ben-Dor et al. developed an algorithm to solve the problem on de Bruijn graphs in $O(m \cdot w^{1.5} 4^{w})$ time, where $m=|E|$ and $w$ is the maximum interval length over all edges. Bumpus and Meeks [Algorithmica 2023] rediscovered the same algorithm on temporal graphs, highlighting the relevance of this problem in other contexts. We give combinatorial insights that lead to exponential-time improvements over the state-of-the-art. For the important class of de Bruijn graphs, we develop an algorithm parametrized by $w (\log w+1) /(k-1)$. Our improved algorithm shows that it is enough when the range of positions is small relative to $k$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2508.03433v1</guid>
      <category>cs.DS</category>
      <pubDate>Wed, 06 Aug 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Ben Bals, Sebastiaan van Krieken, Solon P. Pissis, Leen Stougie, Hilde Verbeek</dc:creator>
    </item>
    <item>
      <title>Fast algorithms for Vizing's theorem on bounded degree graphs</title>
      <link>https://arxiv.org/abs/2303.05408</link>
      <description>arXiv:2303.05408v5 Announce Type: replace 
Abstract: Vizing's theorem states that every graph $G$ of maximum degree $\Delta$ can be properly edge-colored using $\Delta + 1$ colors. The fastest currently known $(\Delta+1)$-edge-coloring algorithm for general graphs is due to Sinnamon and runs in time $O(m\sqrt{n})$, where $n :=|V(G)|$ and $m :=|E(G)|$. We investigate the case when $\Delta$ is constant, i.e., $\Delta = O(1)$. In this regime, the runtime of Sinnamon's algorithm is $O(n^{3/2})$, which can be improved to $O(n \log n)$, as shown by Gabow, Nishizeki, Kariv, Leven, and Terada. Here we give an algorithm whose running time is only $O(n)$, which is obviously best possible. Prior to this work, no linear-time $(\Delta+1)$-edge-coloring algorithm was known for any $\Delta \geq 4$. Using some of the same ideas, we also develop new algorithms for $(\Delta+1)$-edge-coloring in the $\mathsf{LOCAL}$ model of distributed computation. Namely, when $\Delta$ is constant, we design a deterministic $\mathsf{LOCAL}$ algorithm with running time $\tilde{O}(\log^5 n)$ and a randomized $\mathsf{LOCAL}$ algorithm with running time $O(\log ^2 n)$. Although our focus is on the constant $\Delta$ regime, our results remain interesting for $\Delta$ up to $\log^{o(1)} n$, since the dependence of their running time on $\Delta$ is polynomial. The key new ingredient in our algorithms is a novel application of the entropy compression method.</description>
      <guid isPermaLink="false">oai:arXiv.org:2303.05408v5</guid>
      <category>cs.DS</category>
      <category>cs.DC</category>
      <category>cs.DM</category>
      <category>math.CO</category>
      <pubDate>Wed, 06 Aug 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Anton Bernshteyn, Abhishek Dhawan</dc:creator>
    </item>
    <item>
      <title>Optimality of Frequency Moment Estimation</title>
      <link>https://arxiv.org/abs/2411.02148</link>
      <description>arXiv:2411.02148v2 Announce Type: replace 
Abstract: Estimating the second frequency moment of a stream up to $(1\pm\varepsilon)$ multiplicative error requires at most $O(\log n / \varepsilon^2)$ bits of space, due to a seminal result of Alon, Matias, and Szegedy. It is also known that at least $\Omega(\log n + 1/\varepsilon^{2})$ space is needed. We prove an optimal lower bound of $\Omega\left(\log \left(n \varepsilon^2 \right) / \varepsilon^2\right)$ for all $\varepsilon = \Omega(1/\sqrt{n})$. Note that when $\varepsilon&gt;n^{-1/2 + c}$, where $c&gt;0$, our lower bound matches the classic upper bound of AMS. For smaller values of $\varepsilon$ we also introduce a revised algorithm that improves the classic AMS bound and matches our lower bound.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.02148v2</guid>
      <category>cs.DS</category>
      <category>cs.CC</category>
      <category>cs.IT</category>
      <category>math.IT</category>
      <pubDate>Wed, 06 Aug 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-nd/4.0/</dc:rights>
      <dc:creator>Mark Braverman, Or Zamir</dc:creator>
    </item>
    <item>
      <title>A Myhill-Nerode Theorem for Generalized Automata, with Applications to Pattern Matching and Compression</title>
      <link>https://arxiv.org/abs/2302.06506</link>
      <description>arXiv:2302.06506v3 Announce Type: replace-cross 
Abstract: The model of generalized automata, introduced by Eilenberg in 1974, allows representing a regular language more concisely than conventional automata by allowing edges to be labeled not only with characters, but also strings. Giammaresi and Montalbano introduced a notion of determinism for generalized automata [STACS 1995]. While generalized deterministic automata retain many properties of conventional deterministic automata, the uniqueness of a minimal generalized deterministic automaton is lost.
  In the first part of the paper, we show that the lack of uniqueness can be explained by introducing a set $ \mathcal{W(A)} $ associated with a generalized automaton $ \mathcal{A} $. In this way, we derive for the first time a full Myhill-Nerode theorem for generalized automata, which contains the textbook Myhill-Nerode theorem for conventional automata as a degenerate case. In the second part of the paper, we show that the set $ \mathcal{W(A)} $ leads to applications for pattern matching and data compression. We show that a Wheeler generalized automata can be stored using $ \mathfrak{e} \log \sigma (1 + o(1)) + O(e) $ bits so that pattern matching queries can be solved in $ O(m \log \log \sigma) $ time, where $ \mathfrak{e} $ is the total length of all edge labels, $ e $ is the number of edges, $ \sigma $ is the size of the alphabet and $ m $ is the length of the pattern.</description>
      <guid isPermaLink="false">oai:arXiv.org:2302.06506v3</guid>
      <category>cs.FL</category>
      <category>cs.DS</category>
      <category>cs.LO</category>
      <pubDate>Wed, 06 Aug 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-nd/4.0/</dc:rights>
      <dc:creator>Nicola Cotumaccio</dc:creator>
    </item>
  </channel>
</rss>
