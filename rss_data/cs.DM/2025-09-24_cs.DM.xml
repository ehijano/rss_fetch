<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.DM updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.DM</link>
    <description>cs.DM updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.DM" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Sep 2025 04:00:21 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 25 Sep 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>There is no prime functional digraph: Seifert's proof revisited</title>
      <link>https://arxiv.org/abs/2509.19940</link>
      <description>arXiv:2509.19940v1 Announce Type: cross 
Abstract: A functional digraph is a finite digraph in which each vertex has a unique out-neighbor. Considered up to isomorphism and endowed with the directed sum and product, functional digraphs form a semigroup that has recently attracted significant attention, particularly regarding its multiplicative structure. In this context, a functional digraph $X$ divides a functional digraph $A$ if there exists a functional digraph $Y$ such that $XY$ is isomorphic to $A$. The digraph $X$ is said to be prime if it is not the identity for the product, and if, for all functional digraphs $A$ and $B$, the fact that $X$ divides $AB$ implies that $X$ divides $A$ or $B$. In 2020, Antonio E. Porreca asked whether prime functional digraphs exist, and in 2023, his work led him to conjecture that they do not. However, in 2024, Barbora Hudcov\'a discovered that this result had already been proved by Ralph Seifert in 1971, in a somewhat forgotten paper. The terminology in that work differs significantly from that used in recent studies, the framework is more general, and the non-existence of prime functional digraphs appears only as a part of broader results, relying on (overly) technical lemmas developed within this general setting. The aim of this note is to present a much more accessible version of Seifert's proof $-$ that no prime functional digraph exists $-$ by using the current language and simplifying each step as much as possible.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.19940v1</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <pubDate>Thu, 25 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-sa/4.0/</dc:rights>
      <dc:creator>Adrien Richard</dc:creator>
    </item>
    <item>
      <title>Sunflowers in set systems with small VC-dimension</title>
      <link>https://arxiv.org/abs/2408.04165</link>
      <description>arXiv:2408.04165v2 Announce Type: replace-cross 
Abstract: A family of $r$ distinct sets $\{A_1,\ldots, A_r\}$ is an $r$-sunflower if for all $1 \leqslant i &lt; j \leqslant r$ and $1 \leqslant i' &lt; j' \leqslant r$, we have $A_i \cap A_j = A_{i'} \cap A_{j'}$. Erd\H{o}s and Rado conjectured in 1960 that every family $\mathcal{H}$ of $\ell$-element sets of size at least $K(r)^\ell$ contains an $r$-sunflower, where $K(r)$ is some function that depends only on $r$. We prove that if $\mathcal{H}$ is a family of $\ell$-element sets of VC-dimension at most $d$ and $|\mathcal{H}| &gt; (C r (\log d+\log^\ast \ell))^\ell$ for some absolute constant $C &gt; 0$, then $\mathcal{H}$ contains an $r$-sunflower. This improves a recent result of Fox, Pach, and Suk. When $d=1$, we obtain a sharp bound, namely that $|\mathcal{H}| &gt; (r-1)^\ell$ is sufficient. Along the way, we establish a strengthening of the Kahn-Kalai conjecture for set families of bounded VC-dimension, which is of independent interest.</description>
      <guid isPermaLink="false">oai:arXiv.org:2408.04165v2</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <category>math.PR</category>
      <pubDate>Thu, 25 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>J\'ozsef Balogh, Anton Bernshteyn, Michelle Delcourt, Asaf Ferber, Huy Tuan Pham</dc:creator>
    </item>
    <item>
      <title>Optimal Multi-agent Path Finding in Continuous Time</title>
      <link>https://arxiv.org/abs/2508.16410</link>
      <description>arXiv:2508.16410v2 Announce Type: replace-cross 
Abstract: Continuous-time Conflict Based-Search (CCBS) has long been viewed as the standard optimal baseline for multi-agent path finding in continuous time (MAPFR), yet recent critiques show that the theoretically described CCBS can fail to terminate on solvable MAPFR problems while the publicly available reference implementation can return sub-optimal solutions. This work presents an analytical framework that yields simple and sufficient conditions under which any CCBS-style algorithm is both sound and solution complete. Investigating the reference CCBS implementation reveals that it violates our sufficient conditions for soundness, with counterexamples demonstrating sub-optimality.
  Leveraging the framework, we introduce a branching rule ($\delta$-BR) and prove it restores soundness and termination guarantees. Consequently, the resulting CCBS variant is both sound and solution complete. To our knowledge, this is the first MAPFR solver matching the guarantees of the discrete-time CBS. On a constructed example, CCBS with $\delta$-BR improves sum-of-costs from 10.707 to 9.000 ($\approx$ 16% lower) compared to the reference CCBS implementation. Across benchmarks, the reference CCBS implementation is generally able to find solutions faster than CCBS with $\delta$-BR due to its more aggressive pruning. However, this comes at the cost of occasional sub-optimality and potential non-termination when all solutions are pruned, whereas $\delta$-BR preserves optimality and guarantees termination by design. Because $\delta$-BR largely only affects the branching step, it can be adopted as a drop-in replacement in existing codebases. Beyond CCBS, the analytical framework and termination criterion provide a systematic way to evaluate other CCBS-like MAPFR solvers and future extensions, thereby offering tools for rigorous analysis of next-generation MAPFR algorithms.</description>
      <guid isPermaLink="false">oai:arXiv.org:2508.16410v2</guid>
      <category>cs.MA</category>
      <category>cs.DM</category>
      <category>cs.RO</category>
      <pubDate>Thu, 25 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Alvin Combrink, Sabino Francesco Roselli, Martin Fabian</dc:creator>
    </item>
    <item>
      <title>Vertex-Based Localization of Generalized Tur\'{a}n Problems</title>
      <link>https://arxiv.org/abs/2508.20936</link>
      <description>arXiv:2508.20936v3 Announce Type: replace-cross 
Abstract: Let $\mathcal{F}$ be a family of graphs. A graph is called $\mathcal{F}$-free if it does not contain any member of $\mathcal{F}$. Generalized Tur\'{a}n problems aim to maximize the number of copies of a graph $H$ in an $n$-vertex $\mathcal{F}$-free graph. This maximum is denoted by $ex(n, H, \mathcal{F})$. When $H \cong K_2$, it is simply denoted by $ex(n,F)$. Erd\H{o}s and Gallai established the bounds $ex(n, P_{k+1}) \leq \frac{n(k-1)}{2}$ and $ex(n, C_{\geq k+1}) \leq \frac{k(n-1)}{2}$. This was later extended by Luo \cite{luo2018maximum}, who showed that $ex(n, K_s, P_{k+1}) \leq \frac{n}{k} \binom{k}{s}$ and $ex(n, K_s, C_{\geq k+1}) \leq \frac{n-1}{k-1} \binom{k}{s}$. Let $N(G,K_s)$ denote the number of copies of $K_s$ in $G$. In this paper, we use the vertex-based localization framework, introduced in \cite{adak2025vertex}, to generalize Luo's bounds. In a graph $G$, for each $v \in V(G)$, define $p(v)$ to be the length of the longest path that contains $v$. We show that \[N(G,K_s) \leq \sum_{v \in V(G)} \frac{1}{p(v)+1}{p(v)+1\choose s} = \frac{1}{s}\sum_{v \in V(G)}{p(v) \choose s-1}\] We strengthen the cycle bound from \cite{luo2018maximum} as follows: In graph $G$, for each $v \in V(G)$, let $c(v)$ be the length of the longest cycle that contains $v$, or $2$ if $v$ is not part of any cycle. We prove that \[N(G,K_s) \leq \left(\sum_{v\in V(G)}\frac{1}{c(v)-1}{c(v) \choose s}\right) - \frac{1}{c(u)-1}{c(u) \choose s}\] where $c(u)$ denotes the circumference of $G$. Furthermore, we characterize the class of extremal graphs that attain equality for these bounds. We provide full proofs for the cases $s = 1$ and $s \geq 3$, while the case $s = 2$ follows from the result in \cite{adak2025vertex}. We also conclude with a generalization of a result by Balister-Bollob\'{a}s-Riordan-Schelp \cite{BALISTER2003366}.</description>
      <guid isPermaLink="false">oai:arXiv.org:2508.20936v3</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <pubDate>Thu, 25 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Rajat Adak, L. Sunil Chandran</dc:creator>
    </item>
    <item>
      <title>Smaller Circuits for Bit Addition</title>
      <link>https://arxiv.org/abs/2509.13966</link>
      <description>arXiv:2509.13966v2 Announce Type: replace-cross 
Abstract: Bit addition arises virtually everywhere in digital circuits: arithmetic operations, increment/decrement operators, computing addresses and table indices, and so on. Since bit addition is such a basic task in Boolean circuit synthesis, a lot of research has been done on constructing efficient circuits for various special cases of it. A vast majority of these results are devoted to optimizing the circuit depth (also known as delay).
  In this paper, we investigate the circuit size (also known as area) over the full binary basis of bit addition. Though most of the known circuits are built from Half Adders and Full Adders, we show that, in many interesting scenarios, these circuits have suboptimal size. Namely, we improve an upper bound $5n-3m$ to $4.5n-2m$, where $n$ is the number of input bits and $m$ is the number of output bits. In the regimes where $m$ is small compared to $n$ (for example, for computing the sum of $n$ bits or multiplying two $n$-bit integers), this leads to $10\%$ improvement.
  We complement our theoretical result by an open-source implementation of generators producing circuits for bit addition and multiplication. The generators allow one to produce the corresponding circuits in two lines of code and to compare them to existing designs.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.13966v2</guid>
      <category>cs.CC</category>
      <category>cs.DM</category>
      <category>cs.DS</category>
      <category>cs.LO</category>
      <pubDate>Thu, 25 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Mikhail Goncharov, Alexander S. Kulikov, Georgie Levtsov</dc:creator>
    </item>
  </channel>
</rss>
