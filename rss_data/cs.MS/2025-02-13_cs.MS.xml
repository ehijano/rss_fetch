<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.MS updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.MS</link>
    <description>cs.MS updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.MS" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Feb 2025 02:53:51 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 13 Feb 2025 00:00:00 -0500</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>$\texttt{PrecisionLauricella}$: package for numerical computation of Lauricella functions depending on a parameter</title>
      <link>https://arxiv.org/abs/2502.07935</link>
      <description>arXiv:2502.07935v1 Announce Type: new 
Abstract: We introduce the $\texttt{PrecisionLauricella}$ package, a computational tool developed in Wolfram Mathematica for high-precision numerical evaluations of Lauricella functions with indices linearly dependent on a parameter, $\varepsilon$. The package leverages a method based on analytical continuation via Frobenius generalized power series, providing an efficient and accurate alternative to conventional approaches relying on multi-dimensional series expansions or Mellin--Barnes representations. This one-dimensional approach is particularly advantageous for high-precision calculations and facilitates further optimization through $\varepsilon$-dependent reconstruction from evaluations at specific numerical values, enabling efficient parallelization. The underlying mathematical framework for this method has been detailed in our previous work, while the current paper focuses on the design, implementation, and practical applications of the $\texttt{PrecisionLauricella}$ package.</description>
      <guid isPermaLink="false">oai:arXiv.org:2502.07935v1</guid>
      <category>cs.MS</category>
      <category>cs.NA</category>
      <category>hep-ph</category>
      <category>hep-th</category>
      <category>math.NA</category>
      <pubDate>Thu, 13 Feb 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>M. A. Bezuglov, B. A. Kniehl, A. I. Onishchenko, O. L. Veretin</dc:creator>
    </item>
    <item>
      <title>Assembly of FETI dual operator using CUDA</title>
      <link>https://arxiv.org/abs/2502.08382</link>
      <description>arXiv:2502.08382v1 Announce Type: new 
Abstract: FETI is a numerical method used to solve engineering problems. It builds on the ideas of domain decomposition, which makes it highly scalable and capable of efficiently utilizing whole supercomputers. One of the most time-consuming parts of the FETI solver is the application of the dual operator F in every iteration of the solver.
  It is traditionally performed on the CPU using an implicit approach of applying the individual sparse matrices that form F right-to-left. Another approach is to apply the dual operator explicitly, which primarily involves a simple dense matrix-vector multiplication and can be efficiently performed on the GPU. However, this requires additional preprocessing on the CPU where the dense matrix is assembled, which makes the explicit approach beneficial only after hundreds of iterations are performed.
  In this paper, we use the GPU to accelerate the assembly process as well. This significantly shortens the preprocessing time, thus decreasing the number of solver iterations needed to make the explicit approach beneficial.
  With a proper configuration, we only need a few tens of iterations to achieve speedup relative to the implicit CPU approach. Compared to the CPU-only explicit approach, we achieved up to 10x speedup for the preprocessing and 25x for the application.</description>
      <guid isPermaLink="false">oai:arXiv.org:2502.08382v1</guid>
      <category>cs.MS</category>
      <pubDate>Thu, 13 Feb 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Jakub Homola (IT4Innovations, VSB - Technical University of Ostrava), Radim Vav\v{r}\'ik (IT4Innovations, VSB - Technical University of Ostrava), Ond\v{r}ej Meca (IT4Innovations, VSB - Technical University of Ostrava), Tom\'a\v{s} Brzobohat\'y (IT4Innovations, VSB - Technical University of Ostrava), Lubom\'ir \v{R}\'iha (IT4Innovations, VSB - Technical University of Ostrava)</dc:creator>
    </item>
  </channel>
</rss>
