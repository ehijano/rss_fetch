<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>math.LO updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/math.LO</link>
    <description>math.LO updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/math.LO" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Mar 2025 01:48:34 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Wed, 26 Mar 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Material Interpretation and Constructive Analysis of Maximal Ideals in $\mathbb{Z}[X]$</title>
      <link>https://arxiv.org/abs/2503.19833</link>
      <description>arXiv:2503.19833v1 Announce Type: new 
Abstract: This article introduces the concept of material interpretation to transform classical proofs into constructive ones. Using the case study of maximal ideals in $\mathbb{Z}[X]$, it demonstrates how a classical implication $A \to B$ can be rephrased as a constructive disjunction $\neg A \vee B$, with $\neg A$ representing a strong form of negation. The approach is based on on G\"odel's Dialectica interpretation, the strong negation, and potentially Herbrand disjunctions.
  The classical proof that every maximal ideal in $\mathbb{Z}[X]$ contains a prime number is revisited, highlighting its reliance on non-constructive principles such as the law of excluded middle. A constructive proof is then developed, replacing abstract constructs with explicit case distinctions and direct computations in $\mathbb{Z}[X]$. This proof clarifies the logical structure and reveals computational content.
  The article discusses broader applications, such as Hilbert's Nullstellensatz, Zariski's Lemma, and the Universal Krull-Lindenbaum Lemma, with an emphasis on practical implementation in tools such as Python and proof assistants. The material interpretation offers a promising framework for bridging classical and constructive mathematics, enabling algorithmic realizations.</description>
      <guid isPermaLink="false">oai:arXiv.org:2503.19833v1</guid>
      <category>math.LO</category>
      <category>math.AC</category>
      <pubDate>Wed, 26 Mar 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Franziskus Wiesnet</dc:creator>
    </item>
    <item>
      <title>Degrees of join-distributivity via Bruns-Lakser towers</title>
      <link>https://arxiv.org/abs/2409.04894</link>
      <description>arXiv:2409.04894v2 Announce Type: replace 
Abstract: We utilize the Bruns-Lakser completion to introduce Bruns-Lakser towers of a meet-semilattice. This machinery enables us to develop various hierarchies inside the class of bounded distributive lattices, which measure $\kappa$-degrees of distributivity of bounded distributive lattices and their Dedekind-MacNeille completions. We also use Priestley duality to obtain a dual characterization of the resulting hierarchies. Among other things, this yields a natural generalization of Esakia's representation of Heyting lattices to proHeyting lattices.</description>
      <guid isPermaLink="false">oai:arXiv.org:2409.04894v2</guid>
      <category>math.LO</category>
      <pubDate>Wed, 26 Mar 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>G. Bezhanishvili, F. Dashiell Jr, M. A. Moshier, J. Walters-Wayland</dc:creator>
    </item>
    <item>
      <title>Reasoning Around Paradox with Grounded Deduction</title>
      <link>https://arxiv.org/abs/2409.08243</link>
      <description>arXiv:2409.08243v3 Announce Type: replace 
Abstract: How can we reason around logical paradoxes without falling into them? This paper introduces grounded deduction or GD, a Kripke-inspired approach to first-order logic and arithmetic that is neither classical nor intuitionistic, but nevertheless appears both pragmatically usable and intuitively justifiable. GD permits the direct expression of unrestricted recursive definitions - including paradoxical ones such as 'L := not L' - while adding dynamic typing premises to certain inference rules so that such paradoxes do not lead to inconsistency. This paper constitutes a preliminary development and investigation of grounded deduction, to be extended with further elaboration and deeper analysis of its intriguing properties.</description>
      <guid isPermaLink="false">oai:arXiv.org:2409.08243v3</guid>
      <category>math.LO</category>
      <category>cs.LO</category>
      <pubDate>Wed, 26 Mar 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-nd/4.0/</dc:rights>
      <dc:creator>Bryan Ford</dc:creator>
    </item>
    <item>
      <title>Limits with Signed Digit Streams</title>
      <link>https://arxiv.org/abs/1807.10492</link>
      <description>arXiv:1807.10492v2 Announce Type: replace-cross 
Abstract: We work with the signed digit representation of abstract real numbers, which roughly is the binary representation enriched by the additional digit -1. The main objective of this paper is an algorithm which takes a sequence of signed digit representations of reals and returns the signed digit representation of their limit, if the sequence converges. As a first application we use this algorithm together with Heron's method to build up an algorithm which converts the signed digit representation of a non-negative real number into the signed digit representation of its square root. Instead of writing the algorithms first and proving their correctness afterwards, we work the other way round, in the tradition of program extraction from proofs. In fact we first give constructive proofs, and from these proofs we then compute the extracted terms, which is the desired algorithm. The correctness of the extracted term follows directly by the Soundness Theorem of program extraction. In order to get the extracted term from some proofs which are often quite long, we use the proof assistant Minlog. However, to apply the extracted terms, the programming language Haskell is useful. Therefore after each proof we show a notation of the extracted term, which can be easily rewritten as a definition in Haskell.</description>
      <guid isPermaLink="false">oai:arXiv.org:1807.10492v2</guid>
      <category>cs.LO</category>
      <category>math.LO</category>
      <pubDate>Wed, 26 Mar 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Franziskus Wiesnet</dc:creator>
    </item>
  </channel>
</rss>
