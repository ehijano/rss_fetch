<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.FL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.FL</link>
    <description>cs.FL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.FL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Jun 2024 04:02:11 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 13 Jun 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>$\omega$-regular Expression Synthesis from Transition-Based B\"uchi Automata</title>
      <link>https://arxiv.org/abs/2406.08136</link>
      <description>arXiv:2406.08136v1 Announce Type: new 
Abstract: A popular method for modelling reactive systems is to use $\omega$-regular languages. These languages can be represented as nondeterministic B\"uchi automata (NBAs) or $\omega$-regular expressions. Existing methods synthesise expressions from state-based NBAs. Synthesis from transition-based NBAs is traditionally done by transforming transition-based NBAs into state-based NBAs. This transformation, however, can increase the complexity of the synthesised expressions. This paper proposes a novel method for directly synthesising $\omega$-regular expressions from transition-based NBAs. We prove that the method is sound and complete. Our empirical results show that the $\omega$-regular expressions synthesised from transition-based NBAs are more compact than those synthesised from state-based NBAs. This is particularly the case for NBAs computed from obligation, reactivity, safety and recurrence-type LTL formulas, reporting in the latter case an average reduction of over 50%. We also show that our method successfully synthesises $\omega$-regular expressions from more LTL formulas when using a transition-based instead of a state-based NBA.</description>
      <guid isPermaLink="false">oai:arXiv.org:2406.08136v1</guid>
      <category>cs.FL</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Charles Pert, Dalal Alrajeh, Alessandra Russo</dc:creator>
    </item>
    <item>
      <title>Analyzing constrained LLM through PDFA-learning</title>
      <link>https://arxiv.org/abs/2406.08269</link>
      <description>arXiv:2406.08269v1 Announce Type: new 
Abstract: We define a congruence that copes with null next-symbol probabilities that arise when the output of a language model is constrained by some means during text generation. We develop an algorithm for efficiently learning the quotient with respect to this congruence and evaluate it on case studies for analyzing statistical properties of LLM.</description>
      <guid isPermaLink="false">oai:arXiv.org:2406.08269v1</guid>
      <category>cs.FL</category>
      <category>cs.AI</category>
      <category>cs.LG</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-sa/4.0/</dc:rights>
      <dc:creator>Mat\'ias Carrasco, Franz Mayr, Sergio Yovine, Johny Kidd, Mart\'in Iturbide, Juan Pedro da Silva, Alejo Garat</dc:creator>
    </item>
    <item>
      <title>The Attractor-Cycle Notation for Finite Transformations</title>
      <link>https://arxiv.org/abs/1306.1138</link>
      <description>arXiv:1306.1138v3 Announce Type: replace-cross 
Abstract: We describe a new notation for finite transformations. This attractor-cycle notation extends the orbit-cycle notation for permutations and builds upon existing transformation notations. How the basins of attraction of a finite transformation flow into permuted orbit cycles is visible from the notation. It gives insight into the structure of transformations and reduces the length of expressions without increasing the number of types of symbols.</description>
      <guid isPermaLink="false">oai:arXiv.org:1306.1138v3</guid>
      <category>math.GR</category>
      <category>cs.FL</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Attila Egri-Nagy, Chrystopher L. Nehaniv</dc:creator>
    </item>
    <item>
      <title>On-the-fly Unfolding with Optimal Exploration for Linear Temporal Logic Model Checking of Concurrent Software and Systems</title>
      <link>https://arxiv.org/abs/2306.10707</link>
      <description>arXiv:2306.10707v3 Announce Type: replace-cross 
Abstract: Context: Linear temporal logic (LTL) model checking faces a significant challenge known as the state-explosion problem. The on-the-fly method is a solution that constructs and checks the state space simultaneously, avoiding generating all states in advance. But it is not effective for concurrent interleaving. Unfolding based on Petri nets is a succinct structure covering all states that can mitigate this problem caused by concurrency. Many state-of-the-art methods optimally explore a complete unfolding structure using a tree-like structure. However, it is difficult to apply such a tree-like structure directly to the traditional on-the-fly method of LTL. At the same time, constructing a complete unfolding structure in advance and then checking LTL is also wasteful. Thus, the existing optimal exploration methods are not applicable to the on-the-fly unfolding. Objective: To solve these challenges, we propose an LTL model-checking method called on-the-fly unfolding with optimal exploration. This method is based on program dependence net (PDNet) proposed in the previous work. Method: Firstly, we define conflict transitions of PDNet and an exploration tree with a novel notion of delayed transitions, which differs from the existing tree-like structure. The tree improves the on-the-fly unfolding by exploring each partial-order run only once and avoiding enumerating all possible combinations. Then, we propose an on-the-fly unfolding algorithm that simultaneously constructs the exploration tree and generates the unfolding structure while checking LTL. Results: We implement a tool for concurrent programs. It also improves traditional unfolding generations and performs better than SPIN and DiVine on the used benchmarks.</description>
      <guid isPermaLink="false">oai:arXiv.org:2306.10707v3</guid>
      <category>cs.LO</category>
      <category>cs.FL</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Shuo Li, Liao Zheng, Ru Yang, Zhijun Ding</dc:creator>
    </item>
    <item>
      <title>Repetition Threshold for Binary Automatic Sequences</title>
      <link>https://arxiv.org/abs/2406.06513</link>
      <description>arXiv:2406.06513v2 Announce Type: replace-cross 
Abstract: The critical exponent of an infinite word $\bf x$ is the supremum, over all finite nonempty factors $f$, of the exponent of $f$. In this note we show that for all integers $k\geq 2,$ there is a binary infinite $k$-automatic sequence with critical exponent $\leq 7/3$. The same conclusion holds for Fibonacci-automatic and Tribonacci-automatic sequences.</description>
      <guid isPermaLink="false">oai:arXiv.org:2406.06513v2</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <category>cs.FL</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>J. -P. Allouche, N. Rampersad, J. Shallit</dc:creator>
    </item>
  </channel>
</rss>
