<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.FL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.FL</link>
    <description>cs.FL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.FL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Nov 2024 05:00:16 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Tue, 26 Nov 2024 00:00:00 -0500</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>On Computational Completeness of Semi-Conditional Matrix Grammars</title>
      <link>https://arxiv.org/abs/2411.15338</link>
      <description>arXiv:2411.15338v1 Announce Type: new 
Abstract: Matrix grammars are one of the first approaches ever proposed in regulated rewriting, prescribing that rules have to be applied in a certain order. Originally, they have been introduced by \'Abrah\'am on linguistic grounds. In traditional regulated rewriting, the most interesting case shows up when all rules are context-free. Typical descriptional complexity measures incorporate the number of nonterminals or the matrix length, i.e., the number of rules per matrix. When viewing matrices as program fragments, it becomes natural to consider additional applicability conditions for such matrices. Here, we focus on attaching a permitting and a forbidden string to every matrix in a matrix grammar. The matrix is applicable to a sentential form~$w$ only if the permitting string is a subword in~$w$ and the forbidden string is not a subword in~$w$. We call such a grammar, where the application of a matrix is conditioned as described, a semi-conditional matrix grammar. We consider $(1)$ the maximal lengths of permitting and forbidden strings, $(2)$ the number of nonterminals, $(3)$ the number of conditional matrices, $(4)$ the maximal length of any matrix and $(5)$ the number of conditional matrices with nonempty permitting and forbidden strings, as the resources (descriptional complexity measures) of a semi-conditional matrix grammar.
  In this paper, we show that certain semi-conditional matrix grammar families defined by restricting resources can generate all of the recursively enumerable languages.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.15338v1</guid>
      <category>cs.FL</category>
      <pubDate>Tue, 26 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Henning Fernau, Lakshmanan Kuppusamy, Indhumathi Raman</dc:creator>
    </item>
    <item>
      <title>The Algebras for Automatic Relations</title>
      <link>https://arxiv.org/abs/2404.15496</link>
      <description>arXiv:2404.15496v3 Announce Type: replace 
Abstract: We introduce "synchronous algebras", an algebraic structure tailored to recognize automatic relations (aka. synchronous relations, or regular relations). They are the equivalent of monoids for regular languages, however they conceptually differ in two points: first, they are typed and second, they are equipped with a dependency relation expressing constraints between elements of different types.
  The interest of the proposed definition is that it allows to lift, in an effective way, pseudovarieties of regular languages to that of synchronous relations, and we show how algebraic characterizations of pseudovarieties of regular languages can be lifted to the pseudovarieties of synchronous relations that they induce. A typical example of such a pseudovariety is the class of "group relations", defined as the relations recognized by finite-state synchronous permutation automata.
  In order to prove this result, we adapt two pillars of algebraic language to synchronous algebras: (a) any relation admits a syntactic synchronous algebra recognizing it, and moreover, the relation is synchronous if, and only if, its syntactic algebra is finite and (b) classes of synchronous relations with desirable closure properties (i.e. pseudovarieties) correspond to pseudovarieties of synchronous algebras.</description>
      <guid isPermaLink="false">oai:arXiv.org:2404.15496v3</guid>
      <category>cs.FL</category>
      <category>cs.LO</category>
      <pubDate>Tue, 26 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.4230/LIPIcs.CSL.2025.21</arxiv:DOI>
      <dc:creator>R\'emi Morvan</dc:creator>
    </item>
    <item>
      <title>On the Minimisation of Deterministic and History-Deterministic Generalised (co)B\"uchi Automata</title>
      <link>https://arxiv.org/abs/2407.18090</link>
      <description>arXiv:2407.18090v2 Announce Type: replace 
Abstract: We present a polynomial-time algorithm minimising the number of states of history-deterministic generalised coB\"uchi automata, building on the work of Abu Radi and Kupferman on coB\"uchi automata. On the other hand, we establish that the minimisation problem for both deterministic and history-deterministic generalised B\"uchi automata is NP-complete, as well as the problem of minimising at the same time the number of states and colours of history-deterministic generalised coB\"uchi automata.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.18090v2</guid>
      <category>cs.FL</category>
      <pubDate>Tue, 26 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-nd/4.0/</dc:rights>
      <arxiv:journal_reference>CSL 2025</arxiv:journal_reference>
      <dc:creator>Antonio Casares, Olivier Idir, Denis Kuperberg, Corto Mascle, Aditya Prakash</dc:creator>
    </item>
  </channel>
</rss>
