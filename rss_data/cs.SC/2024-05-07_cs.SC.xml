<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.SC updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.SC</link>
    <description>cs.SC updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.SC" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 May 2024 04:02:05 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Wed, 08 May 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Certifying Phase Abstraction</title>
      <link>https://arxiv.org/abs/2405.04297</link>
      <description>arXiv:2405.04297v1 Announce Type: new 
Abstract: Certification helps to increase trust in formal verification of safety-critical systems which require assurance on their correctness. In hardware model checking, a widely used formal verification technique, phase abstraction is considered one of the most commonly used preprocessing techniques. We present an approach to certify an extended form of phase abstraction using a generic certificate format. As in earlier works our approach involves constructing a witness circuit with an inductive invariant property that certifies the correctness of the entire model checking process, which is then validated by an independent certificate checker. We have implemented and evaluated the proposed approach including certification for various preprocessing configurations on hardware model checking competition benchmarks. As an improvement on previous work in this area, the proposed method is able to efficiently complete certification with an overhead of a fraction of model checking time.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.04297v1</guid>
      <category>cs.SC</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Nils Froleyks, Emily Yu, Armin Biere, Keijo Heljanko</dc:creator>
    </item>
    <item>
      <title>On $n$-Dimensional Sequences. I</title>
      <link>https://arxiv.org/abs/2405.04022</link>
      <description>arXiv:2405.04022v1 Announce Type: cross 
Abstract: Let $R$ be a commutative ring and let $n \geq 1.$ We study $\Gamma(s)$, the generating function and Ann$(s)$, the ideal of characteristic polynomials of $s$, an $n$--dimensional sequence over $R$.
  We express $f(X_1,\ldots,X_n) \cdot \Gamma(s)(X_1^{-1},\ldots ,X_n^{-1})$ as a partitioned sum. That is, we give (i) a $2^n$--fold ``border'' partition (ii) an explicit expression for the product as a $2^n$--fold sum; the support of each summand is contained in precisely one member of the partition. A key summand is $\beta_0(f,s)$, the ``border polynomial'' of $f$ and $s$, which is divisible by $X_1\cdots X_n$.
  We say that $s$ is {\em eventually rectilinear} if the elimination ideals Ann$(s)\cap R[X_i]$ contain an $f_i(X_i)$ for $1 \leq i \leq n$. In this case, we show that $\mbox{Ann}(s)$ is the ideal quotient $(\sum_{i=1}^n(f_i)\ :\ \beta_0(f,s)/(X_1\cdots X_n)).$
  When $R$ and $R[[X_1,X_2, \ldots ,X_n]]$ are factorial domains (e.g. $R$ a principal ideal domain or ${\Bbb F}[X_1,\ldots,X_n]$), we compute {\em the monic generator} $\gamma _i$ of $\mbox{Ann}(s) \cap R[X_i]$ from known $f_i \in \mbox{Ann}(s) \cap R[X_i]$ or from a finite number of $1$--dimensional linear recurring sequences over $R$. Over a field ${\Bbb F}$ this gives an $O(\prod_{i=1}^n \delta \gamma _i^3)$ algorithm to compute an ${\Bbb F}$--basis for $\mbox{Ann}(s)$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.04022v1</guid>
      <category>math.AC</category>
      <category>cs.SC</category>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:journal_reference>J. Symbolic Computation (1995), 20, 71-92</arxiv:journal_reference>
      <dc:creator>Graham H. Norton</dc:creator>
    </item>
    <item>
      <title>Polynomial XL: A Variant of the XL Algorithm Using Macaulay Matrices over Polynomial Rings</title>
      <link>https://arxiv.org/abs/2112.05023</link>
      <description>arXiv:2112.05023v2 Announce Type: replace 
Abstract: Solving a system of $m$ multivariate quadratic equations in $n$ variables over finite fields (the MQ problem) is one of the important problems in the theory of computer science. The XL algorithm (XL for short) is a major approach for solving the MQ problem with linearization over a coefficient field. Furthermore, the hybrid approach with XL (h-XL) is a variant of XL guessing some variables beforehand. In this paper, we present a variant of h-XL, which we call the \textit{polynomial XL (PXL)}. In PXL, the whole $n$ variables are divided into $k$ variables to be fixed and the remaining $n-k$ variables as ``main variables'', and we generate a Macaulay matrix with respect to the $n-k$ main variables over a polynomial ring of the $k$ (sub-)variables. By eliminating some columns of the Macaulay matrix over the polynomial ring before guessing $k$ variables, the amount of operations required for each guessed value can be reduced compared with h-XL. Our complexity analysis of PXL (under some practical assumptions and heuristics) gives a new theoretical bound, and it indicates that PXL could be more efficient than other algorithms in theory on the random system with $n=m$, which is the case of general multivariate signatures. For example, on systems over the finite field with ${2^8}$ elements with $n=m=80$, the numbers of operations deduced from the theoretical bounds of the hybrid approaches with XL and Wiedemann XL, Crossbred, and PXL with optimal $k$ are estimated as $2^{252}$, $2^{234}$, $2^{237}$, and $2^{220}$, respectively.</description>
      <guid isPermaLink="false">oai:arXiv.org:2112.05023v2</guid>
      <category>cs.SC</category>
      <category>cs.CR</category>
      <category>math.AC</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:journal_reference>Proceedings of PQCrypto 2024</arxiv:journal_reference>
      <dc:creator>Hiroki Furue, Momonari Kudo</dc:creator>
    </item>
    <item>
      <title>CFLOBDDs: Context-Free-Language Ordered Binary Decision Diagrams</title>
      <link>https://arxiv.org/abs/2211.06818</link>
      <description>arXiv:2211.06818v4 Announce Type: replace 
Abstract: This paper presents a new compressed representation of Boolean functions, called CFLOBDDs (for Context-Free-Language Ordered Binary Decision Diagrams). They are essentially a plug-compatible alternative to BDDs (Binary Decision Diagrams), and hence useful for representing certain classes of functions, matrices, graphs, relations, etc. in a highly compressed fashion. CFLOBDDs share many of the good properties of BDDs, but--in the best case--the CFLOBDD for a Boolean function can be exponentially smaller than any BDD for that function. Compared with the size of the decision tree for a function, a CFLOBDD--again, in the best case--can give a double-exponential reduction in size. They have the potential to permit applications to (i) execute much faster, and (ii) handle much larger problem instances than has been possible heretofore.
  CFLOBDDs are a new kind of decision diagram that go beyond BDDs (and their many relatives). The key insight is a new way to reuse sub-decision-diagrams: components of CFLOBDDs are structured hierarchically, so that sub-decision-diagrams can be treated as standalone ''procedures'' and reused.
  We applied CFLOBDDs to the problem of simulating quantum circuits, and found that for several standard problems the improvement in scalability--compared to simulation using BDDs--is quite dramatic. In particular, the number of qubits that could be handled using CFLOBDDs was larger, compared to BDDs, by a factor of 128x for GHZ; 1,024x for BV; 8,192x for DJ; and 128x for Grover's algorithm. (With a 15-minute timeout, the number of qubits that CFLOBDDs can handle are 65,536 for GHZ, 524,288 for BV; 4,194,304 for DJ; and 4,096 for Grover's Algorithm.)</description>
      <guid isPermaLink="false">oai:arXiv.org:2211.06818v4</guid>
      <category>cs.SC</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <arxiv:DOI>10.1145/3651157</arxiv:DOI>
      <arxiv:journal_reference>TOPLAS 2024</arxiv:journal_reference>
      <dc:creator>Meghana Sistla, Swarat Chaudhuri, Thomas Reps</dc:creator>
    </item>
  </channel>
</rss>
