<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.CG updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.CG</link>
    <description>cs.CG updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.CG" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Sep 2025 04:00:03 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 18 Sep 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>An open-source heuristic to reboot 2D nesting research</title>
      <link>https://arxiv.org/abs/2509.13329</link>
      <description>arXiv:2509.13329v1 Announce Type: new 
Abstract: 2D nesting problems rank among the most challenging cutting and packing problems. Yet, despite their practical relevance, research over the past decade has seen remarkably little progress. One reasonable explanation could be that nesting problems are already solved to near optimality, leaving little room for improvement. However, as our paper demonstrates, we are not at the limit after all. This paper presents $\texttt{sparrow}$, an open-source heuristic approach to solving 2D irregular strip packing problems, along with ten new real-world instances for benchmarking. Our approach decomposes the optimization problem into a sequence of feasibility problems, where collisions between items are gradually resolved. $\texttt{sparrow}$ consistently outperforms the state of the art - in some cases by an unexpectedly wide margin. We are therefore convinced that the aforementioned stagnation is better explained by both a high barrier to entry and a widespread lack of reproducibility. By releasing $\texttt{sparrow}$'s source code, we directly address both issues. At the same time, we are confident there remains significant room for further algorithmic improvement. The ultimate aim of this paper is not only to take a single step forward, but to reboot the research culture in the domain and enable continued, reproducible progress.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.13329v1</guid>
      <category>cs.CG</category>
      <pubDate>Thu, 18 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Jeroen Gardeyn, Greet Vanden Berghe, Tony Wauters</dc:creator>
    </item>
    <item>
      <title>Computing shortest closed curves on non-orientable surfaces</title>
      <link>https://arxiv.org/abs/2403.11749</link>
      <description>arXiv:2403.11749v2 Announce Type: replace 
Abstract: We initiate the study of computing shortest non-separating simple closed curves with some given topological properties on non-orientable surfaces. While, for orientable surfaces, any two non-separating simple closed curves are related by a self-homeomorphism of the surface, and computing shortest such curves has been vastly studied, for non-orientable ones the classification of non-separating simple closed curves up to ambient homeomorphism is subtler, depending on whether the curve is one-sided or two-sided, and whether it is orienting or not (whether it cuts the surface into an orientable one).
  We prove that computing a shortest orienting (weakly) simple closed curve on a non-orientable combinatorial surface is NP-hard but fixed-parameter tractable in the genus of the surface. In contrast, we can compute a shortest non-separating non-orienting (weakly) simple closed curve with given sidedness in $g^{O(1)}.n\log n$ time, where $g$ is the genus and $n$ the size of the surface.
  For these algorithms, we develop tools that can be of independent interest, to compute a variation on canonical systems of loops for non-orientable surfaces based on the computation of an orienting curve, and some covering spaces that are essentially quotients of homology covers.</description>
      <guid isPermaLink="false">oai:arXiv.org:2403.11749v2</guid>
      <category>cs.CG</category>
      <category>cs.CC</category>
      <category>math.GT</category>
      <pubDate>Thu, 18 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.20382/jocg.v16i2a8</arxiv:DOI>
      <arxiv:journal_reference>Journal of Computational Geometry 16 (2):237-264, 2025</arxiv:journal_reference>
      <dc:creator>Denys Bulavka, \'Eric Colin de Verdi\`ere, Niloufar Fuladi</dc:creator>
    </item>
    <item>
      <title>Super Guarding and Dark Rays in Art Galleries</title>
      <link>https://arxiv.org/abs/2404.04613</link>
      <description>arXiv:2404.04613v3 Announce Type: replace 
Abstract: We explore an Art Gallery variant where each point of a polygon must be seen by k guards, and guards cannot see through other guards. Surprisingly, even covering convex polygons under this variant is not straightforward. For example, covering every point in a triangle k=4 times (a 4-cover) requires 5 guards, and achieving a 10-cover requires 12 guards. Our main result is tight bounds on k-covering a convex polygon of n vertices, for all k and n. The proofs of both upper and lower bounds are nontrivial. We also obtain bounds for simple polygons, leaving tight bounds an open problem.</description>
      <guid isPermaLink="false">oai:arXiv.org:2404.04613v3</guid>
      <category>cs.CG</category>
      <category>math.MG</category>
      <pubDate>Thu, 18 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator> MIT CompGeom Group, Hugo A. Akitaya, Erik D. Demaine, Adam Hesterberg, Anna Lubiw, Jayson Lynch, Joseph O'Rourke, Frederick Stock</dc:creator>
    </item>
    <item>
      <title>Visualization of Event Graphs for Train Schedules</title>
      <link>https://arxiv.org/abs/2503.01808</link>
      <description>arXiv:2503.01808v2 Announce Type: replace 
Abstract: Train timetables can be represented as event graphs, where correspond to a train passing through a location at a certain point in time. A visual representation of an event graph is important for many applications such as dispatching and (the development of) dispatching software. A common way to represent event graphs are time-space diagrams. In such a diagram, key locations are visualized on the y-axis and time on the x-axis of a coordinate system. A train's movement is then represented as a connected sequence of line segments in this coordinate system. This visualization allows for an easy detection of infrastructure conflicts and safety distance violations. However, time-space diagrams are usually used only to depict event graphs that are restricted to corridors, where an obvious ordering of the locations exists.
  In this paper, we consider the visualization of general event graphs in time-space diagrams, where the challenge is to find an ordering of the locations that produces readable drawings. We argue that this means to minimize the number of turns, i.e., the total number of changes in y-direction. To this end, we establish a connection between this problem and Maximum Betweenness. Then we develop a preprocessing strategy to reduce the instance size. We also propose a parameterized algorithm and integer linear programming formulations. We experimentally evaluate the preprocessing strategy and the integer programming formulations on a real-world dataset. Our best algorithm solves every instance in the dataset in less than a second. This suggests that turn-optimal time-space diagrams can be computed in real time.</description>
      <guid isPermaLink="false">oai:arXiv.org:2503.01808v2</guid>
      <category>cs.CG</category>
      <pubDate>Thu, 18 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Johann Hartleb, Marie Schmidt, Samuel Wolf, Alexander Wolff</dc:creator>
    </item>
  </channel>
</rss>
