<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.CC updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.CC</link>
    <description>cs.CC updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.CC" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Jun 2025 04:00:08 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 19 Jun 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Parallel Complexity of Depth-First-Search and Maximal path</title>
      <link>https://arxiv.org/abs/2506.14974</link>
      <description>arXiv:2506.14974v1 Announce Type: cross 
Abstract: Constructing a Depth First Search (DFS) tree is a fundamental graph problem, whose parallel complexity is still not settled. Reif showed parallel intractability of lex-first DFS. In contrast, randomized parallel algorithms (and more recently, deterministic quasipolynomial parallel algorithms) are known for constructing a DFS tree in general (di)graphs. However a deterministic parallel algorithm for DFS in general graphs remains an elusive goal. Working towards this, a series of works gave deterministic NC algorithms for DFS in planar graphs and digraphs. We further extend these results to more general graph classes, by providing NC algorithms for (di)graphs of bounded genus, and for undirected H-minor-free graphs where H is a fixed graph with at most one crossing. For the case of (di)graphs of bounded tree-width, we further improve the complexity to a Logspace bound. Constructing a maximal path is a simpler problem (that reduces to DFS) for which no deterministic parallel bounds are known for general graphs. For planar graphs a bound of O(log n) parallel time on a CREW PRAM (thus in NC2) is known. We improve this bound to Logspace.</description>
      <guid isPermaLink="false">oai:arXiv.org:2506.14974v1</guid>
      <category>cs.DS</category>
      <category>cs.CC</category>
      <pubDate>Thu, 19 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Archit Chauhan, Samir Datta, M. Praveen</dc:creator>
    </item>
    <item>
      <title>An efficient construction of Raz's two-source randomness extractor with improved parameters</title>
      <link>https://arxiv.org/abs/2506.15547</link>
      <description>arXiv:2506.15547v1 Announce Type: cross 
Abstract: Randomness extractors are algorithms that distill weak random sources into near-perfect random numbers. Two-source extractors enable this distillation process by combining two independent weak random sources. Raz's extractor (STOC '05) was the first to achieve this in a setting where one source has linear min-entropy (i.e., proportional to its length), while the other has only logarithmic min-entropy in its length. However, Raz's original construction is impractical due to a polynomial computation time of at least degree 4. Our work solves this problem by presenting an improved version of Raz's extractor with quasi-linear computation time, as well as a new analytic theorem with reduced entropy requirements. We provide comprehensive analytical and numerical comparisons of our construction with others in the literature, and we derive strong and quantum-proof versions of our efficient Raz extractor. Additionally, we offer an easy-to-use, open-source code implementation of the extractor and a numerical parameter calculation module.</description>
      <guid isPermaLink="false">oai:arXiv.org:2506.15547v1</guid>
      <category>cs.CR</category>
      <category>cs.CC</category>
      <category>quant-ph</category>
      <pubDate>Thu, 19 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-nd/4.0/</dc:rights>
      <dc:creator>Cameron Foreman, Lewis Wooltorton, Kevin Milner, Florian J. Curchod</dc:creator>
    </item>
    <item>
      <title>Algorithmic Structure in Subset Sum: Deterministic In-Bound Navigation and the Counting Complexity Divide</title>
      <link>https://arxiv.org/abs/2506.12019</link>
      <description>arXiv:2506.12019v2 Announce Type: replace 
Abstract: This paper presents a deterministic algorithmic approach of exploring the solution space of the Subset Sum Problem. The algorithm presented is input-robust and structurally adaptive. Exploration is guided and narrows into areas in the solution space where solutions are possible, referred to as in-bound solution space, skipping all areas where solutions are impossible. Unfortunately, this can lead to false positives: paths that are hinted to potential have solutions but ultimately realized to not lead to solutions. The in-bound solution space navigated can therefore be filled with only false positives, only true solutions or a mix of the two, affecting the algorithm's performance in different ways. We then detail the challenges of exploring the in-bound solution space for different instances. Further, we show how this algorithm may practically generalize to other NP/NP-complete problems with appropriate adaptation. An introductory discussion is done on this generalization to k-SAT and general CNF-SAT, deferring extensive detail to a follow-up paper. This paper does not satisfy P vs NP proof requirements and does not claim to resolve the problem. However, it has implications for the P vs NP and offers a practical lens through the algorithm of what is feasible with it. The feasibility bounds of the algorithm reveal a nontrivial relationship between decision and counting complexity. To facilitate easy reproducibility, we include in the paper a full C++ implementation of the algorithm.</description>
      <guid isPermaLink="false">oai:arXiv.org:2506.12019v2</guid>
      <category>cs.CC</category>
      <pubDate>Thu, 19 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Thami Nkosi</dc:creator>
    </item>
    <item>
      <title>A Linear Kernel for Planar Vector Domination</title>
      <link>https://arxiv.org/abs/2312.09374</link>
      <description>arXiv:2312.09374v2 Announce Type: replace-cross 
Abstract: Given a graph $G$, an integer $k\geq 0$, and a non-negative integral function $f:V(G) \rightarrow \mathcal{N}$, the Vector Domination problem asks whether a set $S$ of vertices, of cardinality $k$ or less, exists in $G$ so that every vertex $v \in V(G)\setminus S$ has at least $f(v)$ neighbors in $S$. The problem generalizes several domination problems and it has also been shown to generalize Bounded-Degree Vertex Deletion (BDVD). In this paper, the parameterized version of Vector Domination is studied when the input graph is planar. A linear problem kernel is presented. A direct consequence is a kernel bound for BDVD that is linear in the parameter $k$ only. Previously known bounds are functions of both the target degree and the input parameter.</description>
      <guid isPermaLink="false">oai:arXiv.org:2312.09374v2</guid>
      <category>math.CO</category>
      <category>cs.CC</category>
      <category>cs.DM</category>
      <pubDate>Thu, 19 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Mahabba El Sahili, Faisal N. Abu-Khzam</dc:creator>
    </item>
    <item>
      <title>A Dichotomy for Maximum PCSPs on Graphs</title>
      <link>https://arxiv.org/abs/2406.20069</link>
      <description>arXiv:2406.20069v3 Announce Type: replace-cross 
Abstract: Fix two non-empty loopless graphs $G$ and $H$ such that $G$ maps homomorphically to $H$. The Maximum Promise Constraint Satisfaction Problem parameterised by $G$ and $H$ is the following computational problem, denoted by MaxPCSP($G$, $H$): Given an input (multi)graph $X$ that admits a map to $G$ preserving a $\rho$-fraction of the edges, find a map from $X$ to $H$ that preserves a $\rho$-fraction of the edges. As our main result, we give a complete classification of this problem under Khot's Unique Games Conjecture: The only tractable cases are when $G$ is bipartite and $H$ contains a triangle.
  Along the way, we establish several results, including an efficient approximation algorithm for the following problem: Given a (multi)graph $X$ which contains a bipartite subgraph with $\rho$ edges, what is the largest triangle-free subgraph of $X$ that can be found efficiently? We present an SDP-based algorithm that finds one with at least $0.8823 \rho$ edges, thus improving on the subgraph with $0.878 \rho$ edges obtained by the classic Max-Cut algorithm of Goemans and Williamson.</description>
      <guid isPermaLink="false">oai:arXiv.org:2406.20069v3</guid>
      <category>cs.DS</category>
      <category>cs.CC</category>
      <category>cs.DM</category>
      <pubDate>Thu, 19 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Tamio-Vesa Nakajima, Stanislav \v{Z}ivn\'y</dc:creator>
    </item>
    <item>
      <title>Hiding, Shuffling, and Cycle Finding: Quantum Algorithms on Edge Lists</title>
      <link>https://arxiv.org/abs/2412.17786</link>
      <description>arXiv:2412.17786v2 Announce Type: replace-cross 
Abstract: The edge list model is arguably the simplest input model for graphs, where the graph is specified by a list of its edges. In this model, we study the quantum query complexity of three variants of the triangle finding problem. The first asks whether there exists a triangle containing a target edge and raises general questions about the hiding of a problem's input among irrelevant data. The second asks whether there exists a triangle containing a target vertex and raises general questions about the shuffling of a problem's input. The third asks whether there exists a triangle; this problem bridges the $3$-distinctness and $3$-sum problems, which have been extensively studied by both cryptographers and complexity theorists. We provide tight or nearly tight results for these problems as well as some first answers to the general questions they raise.
  Furthermore, given a graph with low maximum degree, such as a random sparse graph, we prove that the quantum query complexity of finding a length-$k$ cycle in its length-$m$ edge list is $m^{3/4-1/(2^{k+2}-4)\pm o(1)}$. We prove the lower bound in Zhandry's recording query framework [CRYPTO '19] as generalized by Hamoudi and Magniez [ToCT '23], and the upper bound by adapting Belovs's learning graph algorithm for $k$-distinctness [FOCS '12].</description>
      <guid isPermaLink="false">oai:arXiv.org:2412.17786v2</guid>
      <category>quant-ph</category>
      <category>cs.CC</category>
      <category>cs.DS</category>
      <pubDate>Thu, 19 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Amin Shiraz Gilani, Daochen Wang, Pei Wu, Xingyu Zhou</dc:creator>
    </item>
  </channel>
</rss>
