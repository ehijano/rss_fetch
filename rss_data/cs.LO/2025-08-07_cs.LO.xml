<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.LO updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.LO</link>
    <description>cs.LO updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.LO" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Aug 2025 01:29:20 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 07 Aug 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Control Closure Certificates</title>
      <link>https://arxiv.org/abs/2508.03947</link>
      <description>arXiv:2508.03947v1 Announce Type: new 
Abstract: This paper introduces the notion of control closure certificates to synthesize controllers for discrete-time control systems against $\omega$-regular specifications. Typical functional approaches to synthesize controllers against $\omega$-regular specifications rely on combining inductive invariants (for example, via barrier certificates) with proofs of well-foundedness (for example, via ranking functions). Transition invariants, provide an alternative where instead of standard well-foundedness arguments one may instead search for disjunctive well-foundedness arguments that together ensure a well-foundedness argument. Closure certificates, functional analogs of transition invariants, provide an effective, automated approach to verify discrete-time dynamical systems against linear temporal logic and $\omega$-regular specifications. We build on this notion to synthesize controllers to ensure the satisfaction of $\omega$-regular specifications. To do so, we first illustrate how one may construct control closure certificates to visit a region infinitely often (or only finitely often) via disjunctive well-founded arguments. We then combine these arguments to provide an argument for parity specifications. Thus, finding an appropriate control closure certificate over the product of the system and a parity automaton specifying a desired $\omega$-regular specification ensures that there exists a controller $\kappa$ to enforce the $\omega$-regular specification. We propose a sum-of-squares optimization approach to synthesize such certificates and demonstrate their efficacy in designing controllers over some case studies.</description>
      <guid isPermaLink="false">oai:arXiv.org:2508.03947v1</guid>
      <category>cs.LO</category>
      <category>cs.SY</category>
      <category>eess.SY</category>
      <pubDate>Thu, 07 Aug 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Vishnu Murali, Mohammed Adib Oumer, Majid Zamani</dc:creator>
    </item>
    <item>
      <title>GradSTL: Comprehensive Signal Temporal Logic for Neurosymbolic Reasoning and Learning</title>
      <link>https://arxiv.org/abs/2508.04438</link>
      <description>arXiv:2508.04438v1 Announce Type: new 
Abstract: We present GradSTL, the first fully comprehensive implementation of signal temporal logic (STL) suitable for integration with neurosymbolic learning. In particular, GradSTL can successfully evaluate any STL constraint over any signal, regardless of how it is sampled. Our formally verified approach specifies smooth STL semantics over tensors, with formal proofs of soundness and of correctness of its derivative function. Our implementation is generated automatically from this formalisation, without manual coding, guaranteeing correctness by construction. We show via a case study that using our implementation, a neurosymbolic process learns to satisfy a pre-specified STL constraint. Our approach offers a highly rigorous foundation for integrating signal temporal logic and learning by gradient descent.</description>
      <guid isPermaLink="false">oai:arXiv.org:2508.04438v1</guid>
      <category>cs.LO</category>
      <pubDate>Thu, 07 Aug 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Mark Chevallier, Filip Smola, Richard Schmoetten, Jacques D. Fleuriot</dc:creator>
    </item>
    <item>
      <title>Generic-to-Specific Reasoning and Learning for Scalable Ad Hoc Teamwork</title>
      <link>https://arxiv.org/abs/2508.04163</link>
      <description>arXiv:2508.04163v1 Announce Type: cross 
Abstract: AI agents deployed in assistive roles often have to collaborate with other agents (humans, AI systems) without prior coordination. Methods considered state of the art for such ad hoc teamwork often pursue a data-driven approach that needs a large labeled dataset of prior observations, lacks transparency, and makes it difficult to rapidly revise existing knowledge in response to changes. As the number of agents increases, the complexity of decision-making makes it difficult to collaborate effectively. This paper advocates leveraging the complementary strengths of knowledge-based and data-driven methods for reasoning and learning for ad hoc teamwork. For any given goal, our architecture enables each ad hoc agent to determine its actions through non-monotonic logical reasoning with: (a) prior commonsense domain-specific knowledge; (b) models learned and revised rapidly to predict the behavior of other agents; and (c) anticipated abstract future goals based on generic knowledge of similar situations in an existing foundation model. We experimentally evaluate our architecture's capabilities in VirtualHome, a realistic physics-based 3D simulation environment.</description>
      <guid isPermaLink="false">oai:arXiv.org:2508.04163v1</guid>
      <category>cs.AI</category>
      <category>cs.LO</category>
      <category>cs.MA</category>
      <pubDate>Thu, 07 Aug 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Hasra Dodampegama, Mohan Sridharan</dc:creator>
    </item>
    <item>
      <title>The decohered ZX-calculus</title>
      <link>https://arxiv.org/abs/2508.04296</link>
      <description>arXiv:2508.04296v1 Announce Type: cross 
Abstract: The discard ZX-calculus is known to be complete and universal for mixed-state quantum mechanics, allowing for both quantum and classical processes. However, if the quantum aspects of ZX-calculus have been explored in depth, little work has been done on the classical side. In this paper, we investigate a fragment of discard ZX-calculus obtained by decohering the usual generators of ZX-calculus. We show that this calculus is universal and complete for affinely supported probability distributions over $\mathbb{F}_{2}^{n}$. To do so, we exhibit a normal form, mixing ideas from the graphical linear algebra program and diagrammatic Fourier transforms. Our results both clarify how to handle hybrid classical-quantum processes in the discard ZX-calculus and pave the way to the picturing of more general random variables and probabilistic processes.</description>
      <guid isPermaLink="false">oai:arXiv.org:2508.04296v1</guid>
      <category>quant-ph</category>
      <category>cs.LO</category>
      <pubDate>Thu, 07 Aug 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Titouan Carette, Daniela Cojocaru, Renaud Vilmart</dc:creator>
    </item>
    <item>
      <title>A Fully Abstract Model of PCF Based on Extended Addressing Machines</title>
      <link>https://arxiv.org/abs/2306.13756</link>
      <description>arXiv:2306.13756v5 Announce Type: replace 
Abstract: Extended addressing machines (EAMs) have been introduced to represent higher-order sequential computations. Previously, we have shown that they are capable of simulating -- via an easy encoding -- the operational semantics of PCF, extended with explicit substitutions. In this paper we prove that the simulation is actually an equivalence: a PCF program terminates in a numeral exactly when the corresponding EAM terminates in the same numeral. It follows that the model of PCF obtained by quotienting typable EAMs by a suitable logical relation is adequate. From a definability result stating that every EAM in the model can be transformed into a PCF program with the same observational behavior, we conclude that the model is fully abstract for PCF.</description>
      <guid isPermaLink="false">oai:arXiv.org:2306.13756v5</guid>
      <category>cs.LO</category>
      <pubDate>Thu, 07 Aug 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Benedetto Intrigila, Giulio Manzonetto, Nicolas Munnich</dc:creator>
    </item>
    <item>
      <title>The Complexity of Generalized HyperLTL with Stuttering and Contexts (full version)</title>
      <link>https://arxiv.org/abs/2504.08509</link>
      <description>arXiv:2504.08509v2 Announce Type: replace 
Abstract: We settle the complexity of satisfiability and model-checking for generalized HyperLTL with stuttering and contexts, an expressive logic for the specification of asynchronous hyperproperties. Such properties cannot be specified in HyperLTL, as it is restricted to synchronous hyperproperties.
  Nevertheless, we prove that satisfiability is $\Sigma_1^1$-complete and thus not harder than for HyperLTL. On the other hand, we prove that model-checking is equivalent to truth in second-order arithmetic, and thus much harder than the decidable HyperLTL model-checking problem. The lower bounds for the model-checking problem hold even when only allowing stuttering or only allowing contexts.</description>
      <guid isPermaLink="false">oai:arXiv.org:2504.08509v2</guid>
      <category>cs.LO</category>
      <pubDate>Thu, 07 Aug 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Ga\"etan Regaud, Martin Zimmermann</dc:creator>
    </item>
    <item>
      <title>Relating homotopy equivalences to conservativity in dependent type theories with computation axioms</title>
      <link>https://arxiv.org/abs/2303.05623</link>
      <description>arXiv:2303.05623v3 Announce Type: replace-cross 
Abstract: We prove a conservativity result for extensional type theories over propositional ones, i.e. dependent type theories with propositional computation rules, or computation axioms, using insights from homotopy type theory. The argument exploits a notion of canonical homotopy equivalence between contexts, and uses the notion of a category with attributes to phrase the semantics of theories of dependent types. Informally, our main result asserts that, for judgements essentially concerning h-sets, reasoning with extensional or propositional type theories is equivalent.</description>
      <guid isPermaLink="false">oai:arXiv.org:2303.05623v3</guid>
      <category>math.LO</category>
      <category>cs.LO</category>
      <category>math.CT</category>
      <pubDate>Thu, 07 Aug 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Matteo Spadetto</dc:creator>
    </item>
    <item>
      <title>Demystifying $\mu$</title>
      <link>https://arxiv.org/abs/2401.01096</link>
      <description>arXiv:2401.01096v5 Announce Type: replace-cross 
Abstract: We explore the theory of illfounded and cyclic proofs for the propositional modal $\mu$-calculus. A fine analysis of provability for classical and intuitionistic modal logic provides a novel bridge between finitary, cyclic and illfounded conceptions of proof and re-enforces the importance of two normal form theorems for the logic: guardedness and disjunctiveness.</description>
      <guid isPermaLink="false">oai:arXiv.org:2401.01096v5</guid>
      <category>math.LO</category>
      <category>cs.LO</category>
      <pubDate>Thu, 07 Aug 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Bahareh Afshari, Graham E. Leigh, Guillermo Men\`endez Turata</dc:creator>
    </item>
    <item>
      <title>APOLLO: Automated LLM and Lean Collaboration for Advanced Formal Reasoning</title>
      <link>https://arxiv.org/abs/2505.05758</link>
      <description>arXiv:2505.05758v3 Announce Type: replace-cross 
Abstract: Formal reasoning and automated theorem proving constitute a challenging subfield of machine learning, in which machines are tasked with proving mathematical theorems using formal languages like Lean. A formal verification system can check whether a formal proof is correct or not almost instantaneously, but generating a completely correct formal proof with LLMs remains a formidable task. The usual approach in the literature is to prompt the LLM many times (up to several thousands) until one of the generated proofs passes the verification system. In this work, we present APOLLO (Automated PrOof repair via LLM and Lean cOllaboration), a modular, modelagnostic pipeline that combines the strengths of the Lean compiler with an LLM's reasoning abilities to achieve better proofgeneration results at a low sampling budget. Apollo directs a fully automated process in which the LLM generates proofs for theorems, a set of agents analyze the proofs, fix the syntax errors, identify the mistakes in the proofs using Lean, isolate failing sublemmas, utilize automated solvers, and invoke an LLM on each remaining goal with a low budget. The repaired subproofs are recombined and reverified, iterating up to a usercontrolled maximum number of attempts. On the miniF2F benchmark, we establish a new stateoftheart accuracy of 84.9% among sub 8Bparameter models while keeping the sampling budget below one hundred. Moreover, Apollo raises the stateoftheart accuracy for GoedelProverSFT to 65.6% while cutting sample complexity from 25,600 to a few hundred. Generalpurpose models (o3mini, o4mini) jump from 3-7% to over 40% accuracy. Our results demonstrate that targeted, compilerguided repair of LLM outputs yields dramatic gains in both efficiency and correctness, suggesting a general paradigm for scalable automated theorem proving. The codebase is available at https://github.com/aziksh-ospanov/APOLLO</description>
      <guid isPermaLink="false">oai:arXiv.org:2505.05758v3</guid>
      <category>cs.AI</category>
      <category>cs.LO</category>
      <pubDate>Thu, 07 Aug 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Azim Ospanov, Farzan Farnia, Roozbeh Yousefzadeh</dc:creator>
    </item>
  </channel>
</rss>
