<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.PF updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.PF</link>
    <description>cs.PF updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.PF" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Apr 2025 03:11:55 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Mon, 31 Mar 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Assembly line balancing considering stochastic task times and production defects</title>
      <link>https://arxiv.org/abs/2503.21832</link>
      <description>arXiv:2503.21832v1 Announce Type: new 
Abstract: In this paper, we address the inherent limitations in traditional assembly line balancing, specifically the assumptions that task times are constant and no defective outputs occur. These assumptions often do not hold in practical scenarios, leading to inefficiencies. To address these challenges, we introduce a framework utilizing an "adjusted processing time" approach based on the distributional information of both processing times and defect occurrences. We validate our framework through the analysis of two case studies from existing literature, demonstrating its robustness and adaptability. Our framework is characterized by its simplicity, both in understanding and implementation, marking a substantial advancement in the field. It presents a viable and efficient solution for industries seeking to enhance operational efficiency through improved resource allocation.</description>
      <guid isPermaLink="false">oai:arXiv.org:2503.21832v1</guid>
      <category>cs.PF</category>
      <pubDate>Mon, 31 Mar 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Gazi Nazia Nur, Mohammad Ahnaf Sadat, Basit Mahmud Shahriar</dc:creator>
    </item>
    <item>
      <title>Service-the-Longest-Queue Among d Choices Policy for Quantum Entanglement Switching</title>
      <link>https://arxiv.org/abs/2503.22292</link>
      <description>arXiv:2503.22292v1 Announce Type: cross 
Abstract: An Entanglement Generation Switch (EGS) is a quantum network hub that provides entangled states to a set of connected nodes by enabling them to share a limited number of hub resources. As entanglement requests arrive, they join dedicated queues corresponding to the nodes from which they originate. We propose a load-balancing policy wherein the EGS queries nodes for entanglement requests by randomly sampling d of all available request queues and choosing the longest of these to service. This policy is an instance of the well-known power-of-d-choices paradigm previously introduced for classical systems such as data-centers. In contrast to previous models, however, we place queues at nodes instead of directly at the EGS, which offers some practical advantages. Additionally, we incorporate a tunable back-off mechanism into our load-balancing scheme to reduce the classical communication load in the network. To study the policy, we consider a homogeneous star network topology that has the EGS at its center, and model it as a queueing system with requests that arrive according to a Poisson process and whose service times are exponentially distributed. We provide an asymptotic analysis of the system by deriving a set of differential equations that describe the dynamics of the mean-field limit and provide expressions for the corresponding unique equilibrium state. Consistent with analogous results from randomized load-balancing for classical systems, we observe a significant decrease in the average request processing time when the number of choices d increases from one to two during the sampling process, with diminishing returns for a higher number of choices. We also observe that our mean-field model provides a good approximation to study even moderately-sized systems.</description>
      <guid isPermaLink="false">oai:arXiv.org:2503.22292v1</guid>
      <category>quant-ph</category>
      <category>cs.PF</category>
      <pubDate>Mon, 31 Mar 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/publicdomain/zero/1.0/</dc:rights>
      <dc:creator>Guo Xian Yau, Thirupathaiah Vasantam, Gayane Vardoyan</dc:creator>
    </item>
    <item>
      <title>It's Not Easy Being Green: On the Energy Efficiency of Programming Languages</title>
      <link>https://arxiv.org/abs/2410.05460</link>
      <description>arXiv:2410.05460v2 Announce Type: replace-cross 
Abstract: Does the choice of programming language affect energy consumption? Previous highly visible studies have established associations between certain programming languages and energy consumption. A causal misinterpretation of this work has led academics and industry leaders to use or support certain languages based on their claimed impact on energy consumption. This paper tackles this causal question directly. It first corrects and improves the measurement methodology used by prior work. It then develops a detailed causal model capturing the complex relationship between programming language choice and energy consumption. This model identifies and incorporates several critical but previously overlooked factors that affect energy usage. These factors, such as distinguishing programming languages from their implementations, the impact of the application implementations themselves, the number of active cores, and memory activity, can significantly skew energy consumption measurements if not accounted for. We show -- via empirical experiments, improved methodology, and careful examination of anomalies -- that when these factors are controlled for, notable discrepancies in prior work vanish. Our analysis suggests that the choice of programming language implementation has no significant impact on energy consumption beyond execution time.</description>
      <guid isPermaLink="false">oai:arXiv.org:2410.05460v2</guid>
      <category>cs.PL</category>
      <category>cs.PF</category>
      <pubDate>Mon, 31 Mar 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Nicolas van Kempen, Hyuk-Je Kwon, Dung Tuan Nguyen, Emery D. Berger</dc:creator>
    </item>
  </channel>
</rss>
