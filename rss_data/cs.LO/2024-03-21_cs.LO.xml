<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.LO updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.LO</link>
    <description>cs.LO updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.LO" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Mar 2024 04:00:14 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 21 Mar 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Mechanized HOL Reasoning in Set Theory</title>
      <link>https://arxiv.org/abs/2403.13403</link>
      <description>arXiv:2403.13403v1 Announce Type: new 
Abstract: We present a mechanized embedding of higher-order logic (HOL) and algebraic data types (ADT) into first-order logic with ZFC axioms. We implement this in the Lisa proof assistant for schematic first-order logic and its library based on axiomatic set theory. HOL proof steps are implemented as proof producing tactics in Lisa, and the types are interpreted as sets, with function (or arrow) types coinciding with set-theoretic function spaces. The embedded HOL proofs, as opposed to being a layer over the existing proofs, are interoperable with the existing library. This yields a form of soft type system supporting top-level polymorphism and ADTs over set theory, and offer tools to reason about functions in set theory.</description>
      <guid isPermaLink="false">oai:arXiv.org:2403.13403v1</guid>
      <category>cs.LO</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-nd/4.0/</dc:rights>
      <dc:creator>Simon Guilloud, Sankalp Gambhir, Andrea Gilot, Viktor Kun\v{c}ak</dc:creator>
    </item>
    <item>
      <title>Reasoning about distributive laws in a concurrent refinement algebra</title>
      <link>https://arxiv.org/abs/2403.13425</link>
      <description>arXiv:2403.13425v1 Announce Type: new 
Abstract: Distributive laws are important for algebraic reasoning in arithmetic and logic. They are equally important for algebraic reasoning about concurrent programs. In existing theories such as Concurrent Kleene Algebra, only partial correctness is handled, and many of its distributive laws are weak, in the sense that they are only refinements in one direction, rather than equalities. The focus of this paper is on strengthening our theory to support the proof of strong distributive laws that are equalities, and in doing so come up with laws that are quite general. Our concurrent refinement algebra supports total correctness by allowing both finite and infinite behaviours. It supports the rely/guarantee approach of Jones by encoding rely and guarantee conditions as rely and guarantee commands. The strong distributive laws may then be used to distribute rely and guarantee commands over sequential compositions and into (and out of) iterations. For handling data refinement of concurrent programs, strong distributive laws are essential.</description>
      <guid isPermaLink="false">oai:arXiv.org:2403.13425v1</guid>
      <category>cs.LO</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Larissa A. Meinicke, Ian J. Hayes</dc:creator>
    </item>
    <item>
      <title>Taming Differentiable Logics with Coq Formalisation</title>
      <link>https://arxiv.org/abs/2403.13700</link>
      <description>arXiv:2403.13700v1 Announce Type: new 
Abstract: For performance and verification in machine learning, new methods have recently been proposed that optimise learning systems to satisfy formally expressed logical properties. Among these methods, differentiable logics (DLs) are used to translate propositional or first-order formulae into loss functions deployed for optimisation in machine learning. At the same time, recent attempts to give programming language support for verification of neural networks showed that DLs can be used to compile verification properties to machine-learning backends. This situation is calling for stronger guarantees about the soundness of such compilers, the soundness and compositionality of DLs, and the differentiability and performance of the resulting loss functions. In this paper, we propose an approach to formalise existing DLs using the Mathematical Components library in the Coq proof assistant. Thanks to this formalisation, we are able to give uniform semantics to otherwise disparate DLs, give formal proofs to existing informal arguments, find errors in previous work, and provide formal proofs to missing conjectured properties. This work is meant as a stepping stone for the development of programming language support for verification of machine learning.</description>
      <guid isPermaLink="false">oai:arXiv.org:2403.13700v1</guid>
      <category>cs.LO</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Reynald Affeldt, Alessandro Bruni, Ekaterina Komendantskaya, Natalia \'Slusarz, Kathrin Stark</dc:creator>
    </item>
    <item>
      <title>A Semantic Search Engine for Mathlib4</title>
      <link>https://arxiv.org/abs/2403.13310</link>
      <description>arXiv:2403.13310v1 Announce Type: cross 
Abstract: The interactive theorem prover, Lean, enables the verification of formal mathematical proofs and is backed by an expanding community. Central to this ecosystem is its mathematical library, mathlib4, which lays the groundwork for the formalization of an expanding range of mathematical theories. However, searching for theorems in mathlib4 can be challenging. To successfully search in mathlib4, users often need to be familiar with its naming conventions or documentation strings. Therefore, creating a semantic search engine that can be used easily by individuals with varying familiarity with mathlib4 is very important. In this paper, we present a semantic search engine for mathlib4 that accepts informal queries and finds the relevant theorems. We also establish a benchmark for assessing the performance of various search engines for mathlib4.</description>
      <guid isPermaLink="false">oai:arXiv.org:2403.13310v1</guid>
      <category>cs.IR</category>
      <category>cs.LG</category>
      <category>cs.LO</category>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Guoxiong Gao, Haocheng Ju, Jiedong Jiang, Zihan Qin, Bin Dong</dc:creator>
    </item>
    <item>
      <title>Hyper Strategy Logic</title>
      <link>https://arxiv.org/abs/2403.13741</link>
      <description>arXiv:2403.13741v1 Announce Type: cross 
Abstract: Strategy logic (SL) is a powerful temporal logic that enables strategic reasoning in multi-agent systems. SL supports explicit (first-order) quantification over strategies and provides a logical framework to express many important properties such as Nash equilibria, dominant strategies, etc. While in SL the same strategy can be used in multiple strategy profiles, each such profile is evaluated w.r.t. a path-property, i.e., a property that considers the single path resulting from a particular strategic interaction. In this paper, we present Hyper Strategy Logic (HyperSL), a strategy logic where the outcome of multiple strategy profiles can be compared w.r.t. a hyperproperty, i.e., a property that relates multiple paths. We show that HyperSL can capture important properties that cannot be expressed in SL, including non-interference, quantitative Nash equilibria, optimal adversarial planning, and reasoning under imperfect information. On the algorithmic side, we identify an expressive fragment of HyperSL with decidable model checking and present a model-checking algorithm. We contribute a prototype implementation of our algorithm and report on encouraging experimental results.</description>
      <guid isPermaLink="false">oai:arXiv.org:2403.13741v1</guid>
      <category>cs.MA</category>
      <category>cs.AI</category>
      <category>cs.LO</category>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Raven Beutner, Bernd Finkbeiner</dc:creator>
    </item>
    <item>
      <title>Non-accessible localizations</title>
      <link>https://arxiv.org/abs/2109.06670</link>
      <description>arXiv:2109.06670v2 Announce Type: replace-cross 
Abstract: In a 2005 paper, Casacuberta, Scevenels and Smith construct a homotopy idempotent functor $E$ on the category of simplicial sets with the property that whether it can be expressed as localization with respect to a map $f$ is independent of the ZFC axioms. We show that this construction can be carried out in homotopy type theory. More precisely, we give a general method of associating to a suitable (possibly large) family of maps, a reflective subuniverse of any universe $\mathcal{U}$. When specialized to an appropriate family, this produces a localization which when interpreted in the $\infty$-topos of spaces agrees with the localization corresponding to $E$. Our approach generalizes the approach of [CSS] in two ways. First, by working in homotopy type theory, our construction can be interpreted in any $\infty$-topos. Second, while the local objects produced by [CSS] are always 1-types, our construction can produce $n$-types, for any $n$. This is new, even in the $\infty$-topos of spaces. In addition, by making use of universes, our proof is very direct.
  Along the way, we prove many results about "small" types that are of independent interest. As an application, we give a new proof that separated localizations exist. We also give results that say when a localization with respect to a family of maps can be presented as localization with respect to a single map, and show that the simplicial model satisfies a strong form of the axiom of choice which implies that sets cover and that the law of excluded middle holds.</description>
      <guid isPermaLink="false">oai:arXiv.org:2109.06670v2</guid>
      <category>math.AT</category>
      <category>cs.LO</category>
      <category>math.CT</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>J. Daniel Christensen</dc:creator>
    </item>
    <item>
      <title>Towards a theory of natural directed paths</title>
      <link>https://arxiv.org/abs/2306.02792</link>
      <description>arXiv:2306.02792v3 Announce Type: replace-cross 
Abstract: We introduce the abstract setting of presheaf category on a thick category of cubes. Precubical sets, symmetric transverse sets, symmetric precubical sets and the new category of (non-symmetric) transverse sets are examples of this structure. All these presheaf categories share the same metric and homotopical properties from a directed homotopy point of view. This enables us to extend Raussen's notion of natural $d$-path for each of them. Finally, we adapt Ziemia\'{n}ski's notion of cube chain to this abstract setting and we prove that it has the expected behavior on precubical sets. As an application, we verify that the formalization of the parallel composition with synchronization of process algebra using the coskeleton functor of the category of symmetric transverse sets has a category of cube chains with the correct homotopy type.</description>
      <guid isPermaLink="false">oai:arXiv.org:2306.02792v3</guid>
      <category>math.CT</category>
      <category>cs.LO</category>
      <category>math.AT</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Philippe Gaucher</dc:creator>
    </item>
    <item>
      <title>The Expressive Power of Transformers with Chain of Thought</title>
      <link>https://arxiv.org/abs/2310.07923</link>
      <description>arXiv:2310.07923v4 Announce Type: replace-cross 
Abstract: Recent theoretical work has identified surprisingly simple reasoning problems, such as checking if two nodes in a graph are connected or simulating finite-state machines, that are provably unsolvable by standard transformers that answer immediately after reading their input. However, in practice, transformers' reasoning can be improved by allowing them to use a "chain of thought" or "scratchpad", i.e., generate and condition on a sequence of intermediate tokens before answering. Motivated by this, we ask: Does such intermediate generation fundamentally extend the computational power of a decoder-only transformer? We show that the answer is yes, but the amount of increase depends crucially on the amount of intermediate generation. For instance, we find that transformer decoders with a logarithmic number of decoding steps (w.r.t. the input length) push the limits of standard transformers only slightly, while a linear number of decoding steps, assuming a slight generalization to standard pre-norm, adds a clear new ability (under standard complexity conjectures): recognizing all regular languages. Our results also imply that linear steps keep transformer decoders within context-sensitive languages, and polynomial steps with generalized pre-norm make them recognize exactly the class of polynomial-time solvable problems -- the first exact characterization of a type of transformers in terms of standard complexity classes. Together, our results provide a nuanced framework for understanding how the length of a transformer's chain of thought or scratchpad impacts its reasoning power.</description>
      <guid isPermaLink="false">oai:arXiv.org:2310.07923v4</guid>
      <category>cs.LG</category>
      <category>cs.CC</category>
      <category>cs.CL</category>
      <category>cs.LO</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>William Merrill, Ashish Sabharwal</dc:creator>
    </item>
    <item>
      <title>Finite Hilbert systems for Weak Kleene logics</title>
      <link>https://arxiv.org/abs/2401.03265</link>
      <description>arXiv:2401.03265v2 Announce Type: replace-cross 
Abstract: Multiple-conclusion Hilbert-style systems allow us to finitely axiomatize every logic defined by a finite matrix. Having obtained such axiomatizations for Paraconsistent Weak Kleene and Bochvar-Kleene logics, we modify them by replacing the multiple-conclusion rules with carefully selected single-conclusion ones. In this way we manage to introduce the first finite Hilbert-style single-conclusion axiomatizations for these logics.</description>
      <guid isPermaLink="false">oai:arXiv.org:2401.03265v2</guid>
      <category>math.LO</category>
      <category>cs.LO</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.1007/s11225-023-10079-w</arxiv:DOI>
      <dc:creator>Vitor Greati, S\'ergio Marcelino, Umberto Rivieccio</dc:creator>
    </item>
  </channel>
</rss>
