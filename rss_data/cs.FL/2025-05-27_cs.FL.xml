<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.FL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.FL</link>
    <description>cs.FL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.FL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 May 2025 04:00:17 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Tue, 27 May 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>A note on Automatic Baire property</title>
      <link>https://arxiv.org/abs/2505.18626</link>
      <description>arXiv:2505.18626v1 Announce Type: new 
Abstract: Automatic Baire property is a variant of the usual Baire property which is
  fulfilled for subsets of the Cantor space accepted by finite automata. We
  consider the family $\mathcal{A}$ of subsets of the Cantor space having the
  Automatic Baire property. In particular we show that not all finite subsets
  have the Automatic Baire property, and that already a slight increase of the
  computational power of the accepting device may lead beyond the class
  $\mathcal{A}$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2505.18626v1</guid>
      <category>cs.FL</category>
      <pubDate>Tue, 27 May 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Ludwig Staiger</dc:creator>
    </item>
    <item>
      <title>Exact Expressive Power of Transformers with Padding</title>
      <link>https://arxiv.org/abs/2505.18948</link>
      <description>arXiv:2505.18948v1 Announce Type: cross 
Abstract: Chain of thought is a natural inference-time method for increasing the computational power of transformer-based large language models (LLMs), but comes at the cost of sequential decoding. Are there more efficient alternatives to expand a transformer's expressive power without adding parameters? We consider transformers with padding tokens as a form of parallelizable test-time compute. We show that averaging-hard-attention, masked-pre-norm transformers with polynomial padding converge to precisely the class $\mathsf{TC}^0$ of extremely parallelizable problems. While the $\mathsf{TC}^0$ upper bound was known, proving a matching lower bound had been elusive. Further, our novel analysis reveals the precise expanded power of padded transformers when coupled with another form of inference-time compute, namely dynamically increasing depth via looping. Our core technical contribution is to show how padding helps bring the notions of complete problems and reductions, which have been a cornerstone of classical complexity theory, to the formal study of transformers. Armed with this new tool, we prove that padded transformers with $O(\log^d n)$ looping on inputs of length $n$ recognize exactly the class $\mathsf{TC}^d$ of moderately parallelizable problems. Thus, padding and looping together systematically expand transformers' expressive power: with polylogarithmic looping, padded transformers converge to the class $\mathsf{NC}$, the best that could be expected without losing parallelism (unless $\mathsf{NC} = \mathsf{P}$). Our results thus motivate further exploration of padding and looping as parallelizable alternatives to chain of thought.</description>
      <guid isPermaLink="false">oai:arXiv.org:2505.18948v1</guid>
      <category>cs.LG</category>
      <category>cs.CC</category>
      <category>cs.FL</category>
      <pubDate>Tue, 27 May 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>William Merrill, Ashish Sabharwal</dc:creator>
    </item>
    <item>
      <title>S-unit equations in modules and linear-exponential Diophantine equations</title>
      <link>https://arxiv.org/abs/2505.19141</link>
      <description>arXiv:2505.19141v1 Announce Type: cross 
Abstract: Let $T$ be a positive integer, and $\mathcal{M}$ be a finitely presented module over the Laurent polynomial ring $\mathbb{Z}_{/T}[X_1^{\pm}, \ldots, X_N^{\pm}]$. We consider S-unit equations over $\mathcal{M}$: these are equations of the form $x_1 m_1 + \cdots + x_K m_K = m_0$, where the variables $x_1, \ldots, x_K$ range over the set of monomials (with coefficient 1) of $\mathbb{Z}_{/T}[X_1^{\pm}, \ldots, X_N^{\pm}]$. When $T$ is a power of a prime number $p$, we show that the solution set of an S-unit equation over $\mathcal{M}$ is effectively $p$-normal in the sense of Derkson and Masser (2015), generalizing their result on S-unit equations in fields of prime characteristic. When $T$ is an arbitrary positive integer, we show that deciding whether an S-unit equation over $\mathcal{M}$ admits a solution is Turing equivalent to solving a system of linear-exponential Diophantine equations, whose base contains the prime divisors of $T$. Combined with a recent result of Karimov, Luca, Nieuwveld, Ouaknine and Worrell (2025), this yields decidability when $T$ has at most two distinct prime divisors. This also shows that proving either decidability or undecidability in the case of arbitrary $T$ would entail major breakthroughs in number theory.
  We mention some potential applications of our results, such as deciding Submonoid Membership in wreath products of the form $\mathbb{Z}_{/p^a q^b} \wr \mathbb{Z}^d$, as well as progressing towards solving the Skolem problem in rings whose additive group is torsion. More connections in these directions will be explored in follow up papers.</description>
      <guid isPermaLink="false">oai:arXiv.org:2505.19141v1</guid>
      <category>math.NT</category>
      <category>cs.FL</category>
      <pubDate>Tue, 27 May 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Ruiwen Dong, Doron Shafrir</dc:creator>
    </item>
    <item>
      <title>On groups with EDT0L word problem</title>
      <link>https://arxiv.org/abs/2505.20057</link>
      <description>arXiv:2505.20057v1 Announce Type: cross 
Abstract: We prove that the word problem for the infinite cyclic group is not EDT0L, and obtain as a corollary that a finitely generated group with EDT0L word problem must be torsion. In addition, we show that the property of having an EDT0L word problem is invariant under change of generating set and passing to finitely generated subgroups. This represents significant progress towards the conjecture that all groups with EDT0L word problem are finite (i.e. precisely the groups with regular word problem).</description>
      <guid isPermaLink="false">oai:arXiv.org:2505.20057v1</guid>
      <category>math.GR</category>
      <category>cs.FL</category>
      <pubDate>Tue, 27 May 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Alex Bishop, Murray Elder, Alex Evetts, Paul Gallot, Alex Levine</dc:creator>
    </item>
    <item>
      <title>Constructing a BPE Tokenization DFA</title>
      <link>https://arxiv.org/abs/2405.07671</link>
      <description>arXiv:2405.07671v2 Announce Type: replace 
Abstract: Many natural language processing systems operate over tokenizations of text to address the open-vocabulary problem. In this paper, we give and analyze an algorithm for the efficient construction of deterministic finite automata (DFA) designed to operate directly on tokenizations produced by the popular byte pair encoding (BPE) technique. This makes it possible to apply many existing techniques and algorithms to the tokenized case, such as pattern matching, equivalence checking of tokenization dictionaries, and composing tokenized languages in various ways. The construction preserves some key properties of the automaton, and we use this to establish asymptotic bounds on the state complexity of the automata that result. Finally, we demonstrate how to construct an input-deterministic (subsequential) string-to-string transducer which precisely describes the relationship between strings and their correct tokenizations.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.07671v2</guid>
      <category>cs.FL</category>
      <category>cs.CL</category>
      <category>cs.LG</category>
      <pubDate>Tue, 27 May 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <arxiv:DOI>10.1007/978-3-031-71112-1_5</arxiv:DOI>
      <dc:creator>Martin Berglund, Willeke Martens, Brink van der Merwe</dc:creator>
    </item>
    <item>
      <title>Reflexive Composition of Elementary State Machines, with an Application to the Reversal of Cellular Automata Rule 90</title>
      <link>https://arxiv.org/abs/2505.07186</link>
      <description>arXiv:2505.07186v3 Announce Type: replace-cross 
Abstract: We explore the dynamics of a one-dimensional lattice of state machines on two states and two symbols sequentially updated via a process of "reflexive composition." The space of 256 machines exhibits a variety of behavior, including substitution, reversible "billiard ball" dynamics, and fractal nesting. We show that one machine generates the Sierpinski Triangle and, for a subset of boundary conditions, is isomorphic to cellular automata Rule 90 in Wolfram's naming scheme. More surprisingly, two other machines follow trajectories that map to Rule 90 in reverse. Whereas previous techniques have been developed to uncover preimages of Rule 90, this is the first study to produce such inverse dynamics naturally from the formalism itself. We argue that the system's symmetric treatment of state and message underlies its expressive power.</description>
      <guid isPermaLink="false">oai:arXiv.org:2505.07186v3</guid>
      <category>cs.DM</category>
      <category>cs.FL</category>
      <category>nlin.CG</category>
      <pubDate>Tue, 27 May 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Chris Salzberg, Hiroki Sayama</dc:creator>
    </item>
    <item>
      <title>HornStr: Invariant Synthesis for Regular Model Checking as Constrained Horn Clauses(Technical Report)</title>
      <link>https://arxiv.org/abs/2505.15959</link>
      <description>arXiv:2505.15959v2 Announce Type: replace-cross 
Abstract: We present HornStr, the first solver for invariant synthesis for Regular Model Checking (RMC) with the specification provided in the SMT-LIB 2.6 theory of strings. It is well-known that invariant synthesis for RMC subsumes various important verification problems, including safety verification for parameterized systems. To achieve a simple and standardized file format, we treat the invariant synthesis problem as a problem of solving Constrained Horn Clauses (CHCs) over strings. Two strategies for synthesizing invariants in terms of regular constraints are supported: (1) L* automata learning, and (2) SAT-based automata learning. HornStr implements these strategies with the help of existing SMT solvers for strings, which are interfaced through SMT-LIB. HornStr provides an easy-to-use interface for string solver developers to apply their techniques to verification. At the same time, it allows verification researchers to painlessly tap into the wealth of modern string solving techniques. To assess the effectiveness of HornStr, we conducted a comprehensive evaluation using benchmarks derived from applications including parameterized verification and string rewriting tasks. Our experiments highlight HornStr's capacity to effectively handle these benchmarks, e.g., as the first solver to verify the challenging MU puzzle automatically. Finally, HornStr can be used to automatically generate a new class of interesting SMT-LIB 2.6 string constraint benchmarks, which might in the future be used in the SMT-COMP strings track. In particular, our experiments on the above invariant synthesis benchmarks produce more than 30000 new QF_S constraints. We also detail the performance of various integrated string solvers, providing insights into their effectiveness on our new benchmarks.</description>
      <guid isPermaLink="false">oai:arXiv.org:2505.15959v2</guid>
      <category>cs.LO</category>
      <category>cs.FL</category>
      <pubDate>Tue, 27 May 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Hongjian Jiang, Anthony W. Lin, Oliver Markgraf, Philipp R\"ummer, Daniel Stan</dc:creator>
    </item>
  </channel>
</rss>
