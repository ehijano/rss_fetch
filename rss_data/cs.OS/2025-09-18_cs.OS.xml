<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.OS updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.OS</link>
    <description>cs.OS updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.OS" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Sep 2025 01:28:09 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 18 Sep 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>A Task Equalization Allocation Algorithm Incorporating Blocking Estimation and Resource Similarity Analysis for Vehicle Control Real-Time Systems</title>
      <link>https://arxiv.org/abs/2509.14086</link>
      <description>arXiv:2509.14086v1 Announce Type: new 
Abstract: In multi-core real-time vehicle control systems, synchronization blocking and resource contention pose critical challenges due to increasing task parallelism and shared resource access. These issues significantly degrade system schedulability and real-time performance, as traditional task allocation algorithms often overlook blocking impacts, leading to high scheduling failure rates under heavy loads. To address this, we propose the BR-WFD algorithm, which integrates blocking time estimation and resource similarity analysis. The algorithm minimizes global blocking overhead by prioritizing tasks with high synchronization sensitivity and aggregating shared-resource-accessing tasks onto the same core. Extensive simulations show that BR-WFD reduces required processor cores by 11\% to 28\% and maintains a 15\% to 20\% higher schedulable ratio compared to traditional methods under high-load and resource-competitive scenarios. This demonstrates its effectiveness in enhancing real-time performance and resource efficiency for multi-core task scheduling in intelligent driving systems.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.14086v1</guid>
      <category>cs.OS</category>
      <pubDate>Thu, 18 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Qianlong Duan, Bide Hao, Fan Zhou, Chen Fei, Shichun Yang</dc:creator>
    </item>
    <item>
      <title>A TRRIP Down Memory Lane: Temperature-Based Re-Reference Interval Prediction For Instruction Caching</title>
      <link>https://arxiv.org/abs/2509.14041</link>
      <description>arXiv:2509.14041v1 Announce Type: cross 
Abstract: Modern mobile CPU software pose challenges for conventional instruction cache replacement policies due to their complex runtime behavior causing high reuse distance between executions of the same instruction. Mobile code commonly suffers from large amounts of stalls in the CPU frontend and thus starvation of the rest of the CPU resources. Complexity of these applications and their code footprint are projected to grow at a rate faster than available on-chip memory due to power and area constraints, making conventional hardware-centric methods for managing instruction caches to be inadequate. We present a novel software-hardware co-design approach called TRRIP (Temperature-based Re-Reference Interval Prediction) that enables the compiler to analyze, classify, and transform code based on "temperature" (hot/cold), and to provide the hardware with a summary of code temperature information through a well-defined OS interface based on using code page attributes. TRRIP's lightweight hardware extension employs code temperature attributes to optimize the instruction cache replacement policy resulting in the eviction rate reduction of hot code. TRRIP is designed to be practical and adoptable in real mobile systems that have strict feature requirements on both the software and hardware components. TRRIP can reduce the L2 MPKI for instructions by 26.5% resulting in geomean speedup of 3.9%, on top of RRIP cache replacement running mobile code already optimized using PGO.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.14041v1</guid>
      <category>cs.AR</category>
      <category>cs.CL</category>
      <category>cs.OS</category>
      <category>cs.PF</category>
      <pubDate>Thu, 18 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Henry Kao, Nikhil Sreekumar, Prabhdeep Singh Soni, Ali Sedaghati, Fang Su, Bryan Chan, Maziar Goudarzi, Reza Azimi</dc:creator>
    </item>
  </channel>
</rss>
