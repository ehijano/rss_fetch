<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.AR updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.AR</link>
    <description>cs.AR updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.AR" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Aug 2024 02:23:01 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Mon, 12 Aug 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>A Comprehensive System Architecture using Field Programmable Gate Arrays Technology, Dijkstra's Algorithm, and Edge Computing for Emergency Response in Smart Cities</title>
      <link>https://arxiv.org/abs/2408.04924</link>
      <description>arXiv:2408.04924v1 Announce Type: cross 
Abstract: Efficient emergency response systems are crucial for smart cities. But their implementation is highly challenging, particularly in regions like Chad where infrastructural constraints are prevalent. The urgency for optimized response times and resource allocation in emergency scenarios is magnified in these contexts, yet existing solutions often assume robust infrastructure and uninterrupted connectivity, which is not always available. Most of the time, they are based on system architectures pre-designed for other purposes. This paper addresses these critical challenges by proposing a comprehensive system architecture that integrates Field Programmable Gate Arrays (FPGAs), Dijkstra's algorithm, and Edge Computing. The objective is to enhance emergency response through accelerated route planning and resource allocation, addressing gaps left by traditional cloud-based systems. Methodologically, key characteristics of the desired system are identified, then its components are described and their integration is explained; the system leverages FPGA-based computations and a distributed implementation of Dijkstra's algorithm to compute the shortest paths rapidly, while Edge Computing ensures decentralized and resilient processing. A theoretical analysis highlights promising improvements in response times and resource management. The proposed system architecture not only enhances emergency response efficiency but is also adaptable to infrastructural constraints of Chadian-like environments.</description>
      <guid isPermaLink="false">oai:arXiv.org:2408.04924v1</guid>
      <category>eess.SY</category>
      <category>cs.AR</category>
      <category>cs.SY</category>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.55969/paradigmplus.v5n2a1</arxiv:DOI>
      <arxiv:journal_reference>ParadigmPlus, Vol. 5, No. 2, pp 1-21, 2024</arxiv:journal_reference>
      <dc:creator>Mahamat Abdel Aziz Assoul, Abakar Mahamat Tahir, Taibi Mahmoud, Garrik Brel Jagho Mdemaya, Milliam Maxime Zekeng Ndadji</dc:creator>
    </item>
    <item>
      <title>Exploiting the Lock: Leveraging MiG-V's Logic Locking for Secret-Data Extraction</title>
      <link>https://arxiv.org/abs/2408.04976</link>
      <description>arXiv:2408.04976v1 Announce Type: cross 
Abstract: The MiG-V was designed for high-security applications and is the first commercially available logic-locked RISC-V processor on the market. In this context logic locking was used to protect the RISC-V processor design during the untrusted manufacturing process by using key-driven logic gates to obfuscate the original design. Although this method defends against malicious modifications, such as hardware Trojans, logic locking's impact on the RISC-V processor's data confidentiality during runtime has not been thoroughly examined. In this study, we evaluate the impact of logic locking on data confidentiality. By altering the logic locking key of the MiG-V while running SSL cryptographic algorithms, we identify data leakages resulting from the exploitation of the logic locking hardware. We show that changing a single bit of the logic locking key can expose 100% of the cryptographic encryption key. This research reveals a critical security flaw in logic locking, highlighting the need for comprehensive security assessments beyond logic locking key-recovery attacks.</description>
      <guid isPermaLink="false">oai:arXiv.org:2408.04976v1</guid>
      <category>cs.CR</category>
      <category>cs.AR</category>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.1098/rsta.2023.0388</arxiv:DOI>
      <dc:creator>Lennart M. Reimann, Yadu Madhukumar Variyar, Lennet Huelser, Chiara Ghinami, Dominik Germek, Rainer Leupers</dc:creator>
    </item>
    <item>
      <title>Uncontrolled learning: co-design of neuromorphic hardware topology for neuromorphic algorithms</title>
      <link>https://arxiv.org/abs/2408.05183</link>
      <description>arXiv:2408.05183v1 Announce Type: cross 
Abstract: Hardware-based neuromorphic computing remains an elusive goal with the potential to profoundly impact future technologies and deepen our understanding of emergent intelligence. The learning-from-mistakes algorithm is one of the few training algorithms inspired by the brain's simple learning rules, utilizing inhibition and pruning to demonstrate self-organized learning. Here we implement this algorithm in purely neuromorphic memristive hardware through a co-design process. This implementation requires evaluating hardware trade-offs and constraints. It has been shown that learning-from-mistakes successfully trains small networks to function as binary classifiers and perceptrons. However, without tailoring the hardware to the algorithm, performance decreases exponentially as the network size increases. When implementing neuromorphic algorithms on neuromorphic hardware, we investigate the trade-offs between depth, controllability, and capacity, the latter being the number of learnable patterns. We emphasize the significance of topology and the use of governing equations, demonstrating theoretical tools to aid in the co-design of neuromorphic hardware and algorithms. We provide quantitative techniques to evaluate the computational capacity of a neuromorphic device based on the measurements performed and the underlying circuit structure. This approach shows that breaking the symmetry of a neural network can increase both the controllability and average network capacity. By pruning the circuit, neuromorphic algorithms in all-memristive device circuits leverage stochastic resources to drive local contrast in network weights. Our combined experimental and simulation efforts explore the parameters that make a network suited for displaying emergent intelligence from simple rules.</description>
      <guid isPermaLink="false">oai:arXiv.org:2408.05183v1</guid>
      <category>cond-mat.dis-nn</category>
      <category>cond-mat.stat-mech</category>
      <category>cs.AR</category>
      <category>cs.ET</category>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Frank Barrows, Jonathan Lin, Francesco Caravelli, Dante R. Chialvo</dc:creator>
    </item>
  </channel>
</rss>
