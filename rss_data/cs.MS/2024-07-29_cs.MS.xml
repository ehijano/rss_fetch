<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.MS updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.MS</link>
    <description>cs.MS updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.MS" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Jul 2024 02:26:41 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Mon, 29 Jul 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Efficient Calculations for Inverse of $k$-diagonal Circulant Matrices and Cyclic Banded Matrices</title>
      <link>https://arxiv.org/abs/2403.05048</link>
      <description>arXiv:2403.05048v2 Announce Type: replace 
Abstract: $k$-diagonal circulant matrices and cyclic banded matrices are widely used in numerical simulations and signal processing of circular linear systems. Algorithms that directly involve or specify linear or quadratic complexity for the inverses of these two types of matrices are rare. We find that the inverse of a $k$-diagonal circulant matrix can be uniquely determined by a recursive formula, which can be derived within $O(k^3 \log n+k^4)$. Similarly for the inverse of a cyclic banded matrix, its inverse can be uniquely determined by a series of recursive formulas, with the initial terms of these recursions computable within $O(k^3 n+k^5)$. The additional costs for solving the complete inverses of these two types of matrices are $kn$ and $kn^2$. Our calculations enable rapid representation with most processes defined by explicit formulas. Additionally, most algorithms for inverting $k$-diagonal circulant matrices rely on the Fast Fourier Transform, which is not applicable to finite fields, while our algorithms can be applied to computations in finite fields.</description>
      <guid isPermaLink="false">oai:arXiv.org:2403.05048v2</guid>
      <category>cs.MS</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Chen Wang, Hailong Yu, Chao Wang</dc:creator>
    </item>
  </channel>
</rss>
