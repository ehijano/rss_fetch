<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.DM updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.DM</link>
    <description>cs.DM updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.DM" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Jun 2025 02:28:56 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Mon, 16 Jun 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Greed is slow on sparse graphs of oriented valued constraints</title>
      <link>https://arxiv.org/abs/2506.11662</link>
      <description>arXiv:2506.11662v1 Announce Type: new 
Abstract: Greedy local search is especially popular for solving valued constraint satisfaction problems (VCSPs). Since any method will be slow for some VCSPs, we ask: what is the simplest VCSP on which greedy local search is slow? We construct a VCSP on 6n Boolean variables for which greedy local search takes 7(2^n - 1) steps to find the unique peak. Our VCSP is simple in two ways. First, it is very sparse: its constraint graph has pathwidth 2 and maximum degree 3. This is the simplest VCSP on which some local search could be slow. Second, it is "oriented" - there is an ordering on the variables such that later variables are conditionally-independent of earlier ones. Being oriented allows many non-greedy local search methods to find the unique peak in a quadratic number of steps. Thus, we conclude that - among local search methods - greed is particularly slow.</description>
      <guid isPermaLink="false">oai:arXiv.org:2506.11662v1</guid>
      <category>cs.DM</category>
      <pubDate>Mon, 16 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Artem Kaznatcheev, Sofia Vazquez Alferez</dc:creator>
    </item>
    <item>
      <title>Model Discovery and Graph Simulation: A Lightweight Alternative to Chaos Engineering</title>
      <link>https://arxiv.org/abs/2506.11176</link>
      <description>arXiv:2506.11176v1 Announce Type: cross 
Abstract: Microservice applications are prone to cascading failures because of dense inter-service dependencies. Ensuring resilience usually demands fault-injection experiments in production-like setups. We propose \textit{model discovery} -- an automated CI/CD step that extracts a live dependency graph from trace data -- and show that this lightweight representation is sufficient for accurate resilience prediction. Using the DeathStarBench Social Network, we build the graph, simulate failures via Monte-Carlo, and run matching chaos experiments on the real system. The graph model closely matches reality: with no replication, 16 trials yield an observed resilience of 0.186 versus a predicted 0.161; with replication, both observed and predicted values converge to 0.305 (mean absolute error \leq 0.0004). These results indicate that even a simple, automatically discovered graph can estimate microservice availability with high fidelity, offering rapid design-time insight without full-scale failure testing.</description>
      <guid isPermaLink="false">oai:arXiv.org:2506.11176v1</guid>
      <category>cs.SE</category>
      <category>cs.DC</category>
      <category>cs.DM</category>
      <category>cs.ET</category>
      <pubDate>Mon, 16 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-sa/4.0/</dc:rights>
      <dc:creator>Anatoly A. Krasnovsky, Alexander Zorkin</dc:creator>
    </item>
    <item>
      <title>String Matching with a Dynamic Pattern</title>
      <link>https://arxiv.org/abs/2506.11318</link>
      <description>arXiv:2506.11318v1 Announce Type: cross 
Abstract: In this work, we tackle a natural variation of the String Matching Problem on the case of a dynamic pattern, that is, given a static text $T$ and a pattern $P$, we want to support character additions and deletions to the pattern, and after each operation compute how many times it occurs in the text. We show a simple and practical algorithm using Suffix Arrays that achieves $\mathcal O(\log |T|)$ update time, after $\mathcal O(|T|)$ preprocess time. We show how to extend our solution to support substring deletion, transposition (moving a substring to another position of the pattern), and copy (copying a substring and pasting it in a specific position), in the same time complexities. Our solution can also be extended to support an online text (adding characters to one end of the text), maintaining the same amortized bounds.</description>
      <guid isPermaLink="false">oai:arXiv.org:2506.11318v1</guid>
      <category>cs.DS</category>
      <category>cs.DM</category>
      <pubDate>Mon, 16 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Bruno Monteiro, Vinicius dos Santos</dc:creator>
    </item>
    <item>
      <title>The Days On Days Off Scheduling Problem</title>
      <link>https://arxiv.org/abs/2410.23056</link>
      <description>arXiv:2410.23056v2 Announce Type: replace-cross 
Abstract: Personnel scheduling problems have received considerable academic attention due to their relevance in various real-world applications. These problems involve preparing feasible schedules for an organization's employees and often account for factors such as qualifications of workers and holiday requests, resulting in complex constraints. While certain versions of the personnel rostering problem are widely acknowledged as NP-hard, there is limited theoretical analysis specific to many of its variants. Many studies simply assert the NP-hardness of the general problem without investigating whether the specific cases they address inherit this computational complexity.
  In this paper, we examine a variant of the personnel scheduling problems, which involves scheduling a homogeneous workforce subject to constraints concerning both the total number and the number of consecutive work days and days off. This problem was claimed to be NP-complete by [Brunner+2013]. In this paper, we prove its NP-completeness and investigate how the combination of constraints contributes to this complexity. Furthermore, we analyze various special cases that arise from the omission of certain parameters, classifying them as either NP-complete or polynomial-time solvable. For the latter, we provide easy-to-implement and efficient algorithms to not only determine feasibility, but also compute a corresponding schedule.</description>
      <guid isPermaLink="false">oai:arXiv.org:2410.23056v2</guid>
      <category>cs.DS</category>
      <category>cs.CC</category>
      <category>cs.DM</category>
      <pubDate>Mon, 16 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Fabien Nie{\ss}en, Paul Paschmanns</dc:creator>
    </item>
    <item>
      <title>Twenty years of Ne\v{s}et\v{r}il's classification programme of Ramsey classes</title>
      <link>https://arxiv.org/abs/2501.17293</link>
      <description>arXiv:2501.17293v2 Announce Type: replace-cross 
Abstract: In the 1970s, structural Ramsey theory emerged as a new branch of combinatorics. This development came with the isolation of the concepts of the $\mathbf{A}$-Ramsey property and Ramsey class. Following the influential Ne\v{s}et\v{r}il-R\"odl theorem, several Ramsey classes have been identified. In the 1980s Ne\v{s}et\v{r}il, inspired by a seminar of Lachlan, discovered a crucial connection between Ramsey classes and Fra\"iss\'e classes and, in his 1989 paper, connected the classification programme of homogeneous structures to structural Ramsey theory. In 2005, Kechris, Pestov, and Todor\v{c}evi\'c revitalized the field by connecting Ramsey classes to topological dynamics. This breakthrough motivated Ne\v{s}et\v{r}il to propose a program for classifying Ramsey classes. We review the progress made on this program in the past two decades, list open problems, and discuss recent extensions to new areas, namely the extension property for partial automorphisms (EPPA), and big Ramsey structures.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.17293v2</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <category>math.HO</category>
      <category>math.LO</category>
      <pubDate>Mon, 16 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Jan Hubi\v{c}ka, Mat\v{e}j Kone\v{c}n\'y</dc:creator>
    </item>
  </channel>
</rss>
