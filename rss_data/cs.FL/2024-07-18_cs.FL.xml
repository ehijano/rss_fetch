<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.FL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.FL</link>
    <description>cs.FL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.FL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Jul 2024 04:00:08 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Fri, 19 Jul 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Quasi-stratified Order Semantics of Concurrency</title>
      <link>https://arxiv.org/abs/2407.13406</link>
      <description>arXiv:2407.13406v1 Announce Type: new 
Abstract: In the development of operational semantics of concurrent systems, a key decision concerns the adoption of a suitable notion of execution model, which basically amounts to choosing a class of partial orders according to which events are arranged along the execution line. Typical kinds of such partial orders are the total, stratified and interval orders. In this paper, we introduce quasi-stratified orders - positioned in-between the stratified and interval orders - which are tailored for transaction-like or hierarchical concurrent executions.
  Dealing directly with the vast number of executions of concurrent system is far from being practical. It was realised long time ago that it can be much more effective to consider behaviours at a more abstract level of behavioural specifications (often based on intrinsic relationships between events such as those represented by causal partial orders), each such specification - typically, a relational structure - encompassing a (large) number of executions.
  In this paper, we introduce and investigate suitable specifications for behaviours represented by quasi-stratified orders. The proposed model of quasi-stratified relational structures is based on two relationships between events - the 'before' and 'not later' relationships - which can be used to express and analyse causality, independence, and simultaneity between events.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.13406v1</guid>
      <category>cs.FL</category>
      <category>cs.LO</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Maciej Koutny, Lukasz Mikulski</dc:creator>
    </item>
    <item>
      <title>Classical and quantum Merlin-Arthur automata</title>
      <link>https://arxiv.org/abs/2212.13801</link>
      <description>arXiv:2212.13801v2 Announce Type: replace 
Abstract: We introduce Merlin-Arthur (MA) automata where Merlin provides a certificate at the beginning of computation and it is scanned by Arthur before reading the input. We define Merlin-Arthur deterministic, probabilistic, and quantum finite state automata (resp., MA-DFAs, MA-PFAs, and MA-QFAs) and postselecting MA-PFAs and MA-QFAs (resp., MA-PostPFA and MA-PostQFA). We present several results using different certificate lengths.
  We show that MA-DFAs use constant length certificates, and they are equivalent to multi-entry DFAs. Thus, they recognize all and only regular languages, but they can be exponential and polynomial state efficient over binary and unary languages, respectively. With sublinear length certificates, MA-PFAs can recognize several nonstochastic unary languages with cutpoint 1/2. With linear length certificates, MA-PostPFAs can recognize these nonstochastic unary languages with bounded error. With arbitrarily long certificates, bounded-error MA-PostPFAs can verify every unary decidable language. With sublinear length certificates, bounded-error MA-PostQFAs can verify several nonstochastic unary languages. With linear length certificates, they can verify every unary language and some NP-complete binary languages. With exponential length certificates, they can verify every binary language.</description>
      <guid isPermaLink="false">oai:arXiv.org:2212.13801v2</guid>
      <category>cs.FL</category>
      <category>cs.CC</category>
      <category>quant-ph</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Abuzer Yakary{\i}lmaz</dc:creator>
    </item>
    <item>
      <title>Closure and Decision Properties for Higher-Dimensional Automata</title>
      <link>https://arxiv.org/abs/2305.02873</link>
      <description>arXiv:2305.02873v3 Announce Type: replace 
Abstract: We report some further developments regarding the language theory of higher-dimensional automata (HDAs). Regular languages of HDAs are sets of finite interval partially ordered multisets (pomsets) with interfaces. We show a pumping lemma which allows us to expose a class of non-regular languages. Concerning decision and closure properties, we show that inclusion of regular languages is decidable (hence is emptiness), and that intersections of regular languages are again regular. On the other hand, complements of regular languages are not always regular. We introduce a width-bounded complement and show that width-bounded complements of regular languages are again regular.
  We also study determinism and ambiguity. We show that it is decidable whether a regular language is accepted by a deterministic HDA and that there exists regular languages with unbounded ambiguity. Finally, we characterize one-letter deterministic languages in terms of utlimately periodic functions.</description>
      <guid isPermaLink="false">oai:arXiv.org:2305.02873v3</guid>
      <category>cs.FL</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Amazigh Amrane, Hugo Bazille, Uli Fahrenberg, Krzysztof Ziemia\'nski</dc:creator>
    </item>
    <item>
      <title>Presenting Interval Pomsets with Interfaces</title>
      <link>https://arxiv.org/abs/2403.16626</link>
      <description>arXiv:2403.16626v2 Announce Type: replace 
Abstract: Interval-order partially ordered multisets with interfaces (ipomsets) have shown to be a versatile model for executions of concurrent systems in which both precedence and concurrency need to be taken into account. In this paper, we develop a presentation of ipomsets as generated by a graph of certain discrete ipomsets (starters and terminators) under the relation which composes subsequent starters and subsequent terminators. Using this presentation, we show that also subsumptions are generated by elementary relations. We develop a similar correspondence on the automata side, relating higher-dimensional automata, which generate ipomsets, and ST-automata, which generate step sequences, and their respective languages.</description>
      <guid isPermaLink="false">oai:arXiv.org:2403.16626v2</guid>
      <category>cs.FL</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Amazigh Amrane, Hugo Bazille, Emily Clement, Uli Fahrenberg, Krzysztof Ziemia\'nski</dc:creator>
    </item>
  </channel>
</rss>
