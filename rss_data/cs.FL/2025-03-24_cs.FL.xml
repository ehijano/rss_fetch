<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.FL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.FL</link>
    <description>cs.FL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.FL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Mar 2025 03:04:13 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Mon, 24 Mar 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Simplifying LTL Model-Checking Given Prior Knowledge</title>
      <link>https://arxiv.org/abs/2503.16891</link>
      <description>arXiv:2503.16891v1 Announce Type: new 
Abstract: We consider the problem of the verification of an LTL specification  $\varphi$ on a system $S$ given some prior knowledge $K$, an LTL  formula that $S$ is known to satisfy.  The automata-theoretic  approach to LTL model checking is implemented as an emptiness check  of the product $S\otimes A_{\lnot\varphi}$ where $A_{\lnot\varphi}$  is an automaton for the negation of the property.  We propose new  operations that simplify an automaton $A_{\lnot\varphi}$  \emph{given} some knowledge automaton $A_K$, to produce an automaton  $B$ that can be used instead of $A_{\lnot\varphi}$ for more  efficient model checking.  Our evaluation of these operations on a large benchmark derived from  the MCC'22 competition shows that even with simple knowledge, half  of the problems can be definitely answered without running an LTL  model checker, and the remaining problems can be simplified  significantly.</description>
      <guid isPermaLink="false">oai:arXiv.org:2503.16891v1</guid>
      <category>cs.FL</category>
      <category>cs.LO</category>
      <pubDate>Mon, 24 Mar 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Alexandre Duret-Lutz (LRE), Denis Poitrenaud (UPCit\'e), Yann Thierry-Mieg</dc:creator>
    </item>
    <item>
      <title>Watson-Crick conjugates of words and languages</title>
      <link>https://arxiv.org/abs/2208.03123</link>
      <description>arXiv:2208.03123v3 Announce Type: replace 
Abstract: In this work, we explore the concept of Watson-Crick conjugates, also known as $\theta$-conjugates (where $\theta$ is an antimorphic involution), of words and languages. This concept extends the classical idea of conjugates by incorporating the Watson-Crick complementarity of DNA sequences. Our investigation initially focuses on the properties of $\theta$-conjugates of words. We then define $\theta$-conjugates of a language and study closure properties of certain families of languages under the $\theta$-conjugate operation. Furthermore, we analyze the iterated $\theta$-conjugate of both words and languages. Finally, we discuss the idea of $\theta$-conjugate-free languages and examine some decidability problems related to it.</description>
      <guid isPermaLink="false">oai:arXiv.org:2208.03123v3</guid>
      <category>cs.FL</category>
      <category>math.CO</category>
      <pubDate>Mon, 24 Mar 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Kalpana Mahalingam, Anuran Maity</dc:creator>
    </item>
    <item>
      <title>Structural Reductions and Stutter Sensitive Properties</title>
      <link>https://arxiv.org/abs/2212.04218</link>
      <description>arXiv:2212.04218v4 Announce Type: replace 
Abstract: Verification of properties expressed as $\omega$-regular languages such as LTL can benefit hugely from stutter insensitivity, using a diverse set of reduction strategies. However properties that are not stutter invariant, for instance due to the use of the neXt operator of LTL or to some form of counting in the logic, are not covered by these techniques in general. We propose in this paper to study a weaker property than stutter insensitivity. In a stutter insensitive language both adding and removing stutter to a word does not change its acceptance, any stuttering can be abstracted away; by decomposing this equivalence relation into two implications we obtain weaker conditions. We define a shortening insensitive language where any word that stutters less than a word in the language must also belong to the language. A lengthening insensitive language has the dual property. A semi-decision procedure is then introduced to reliably prove shortening insensitive properties or deny lengthening insensitive properties while working with a \emph{reduction} of a system. A reduction has the property that it can only shorten runs. Lipton's transaction reductions or Petri net agglomerations are examples of eligible structural reduction strategies. We also present an approach that can reason using a partition of a property language into its stutter insensitive, shortening insensitive, lengthening insensitive and length sensitive parts to still use structural reductions even when working with arbitrary properties. An implementation and experimental evidence is provided showing most non-random properties sensitive to stutter are actually shortening or lengthening insensitive.</description>
      <guid isPermaLink="false">oai:arXiv.org:2212.04218v4</guid>
      <category>cs.FL</category>
      <pubDate>Mon, 24 Mar 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-sa/4.0/</dc:rights>
      <dc:creator>Emmanuel Paviot-Adet, Denis Poitrenaud, Etienne Renault, Yann Thierry-Mieg</dc:creator>
    </item>
    <item>
      <title>Word problems and embedding-obstructions in cellular automata groups on groups</title>
      <link>https://arxiv.org/abs/2503.05572</link>
      <description>arXiv:2503.05572v2 Announce Type: replace-cross 
Abstract: We study groups of reversible cellular automata, or CA groups, on groups. More generally, we consider automorphism groups of subshifts of finite type on groups. It is known that word problems of CA groups on virtually nilpotent groups are in co-NP, and can be co-NP-hard. We show that under the Gap Conjecture of Grigorchuk, their word problems are PSPACE-hard on all other groups. On free and surface groups, we show that they are indeed always in PSPACE. On a group with co-NEXPTIME word problem, CA groups themselves have co-NEXPTIME word problem, and on the lamplighter group (which itself has polynomial-time word problem) we show they can be co-NEXPTIME-hard. We show also two nonembeddability results: the group of cellular automata on a non-cyclic free group does not embed in the group of cellular automata on the integers (this solves a question of Barbieri, Carrasco-Vargas and Rivera-Burgos); and the group of cellular automata in dimension $D$ does not embed in a group of cellular automata in dimension $d$ if $D \geq 3d+2$ (this solves a question of Hochman).</description>
      <guid isPermaLink="false">oai:arXiv.org:2503.05572v2</guid>
      <category>math.GR</category>
      <category>cs.CC</category>
      <category>cs.FL</category>
      <category>math.DS</category>
      <pubDate>Mon, 24 Mar 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Ville Salo</dc:creator>
    </item>
  </channel>
</rss>
