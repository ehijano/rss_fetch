<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.LO updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.LO</link>
    <description>cs.LO updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.LO" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Jan 2025 02:37:49 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 23 Jan 2025 00:00:00 -0500</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Certified Knowledge Compilation with Application to Formally Verified Model Counting</title>
      <link>https://arxiv.org/abs/2501.12906</link>
      <description>arXiv:2501.12906v1 Announce Type: new 
Abstract: Computing many useful properties of Boolean formulas, such as their weighted or unweighted model count, is intractable on general representations. It can become tractable when formulas are expressed in a special form, such as the decision decomposable negation normal form (decision-DNNF). Knowledge compilation is the process of converting a formula into such a form. Unfortunately existing knowledge compilers provide no guarantee that their output correctly represents the original formula, and therefore they cannot validate a model count, or any other computed value.
  We present Partitioned-Operation Graphs (POGs), a form that can encode all of the representations used by existing knowledge compilers. We have designed CPOG, a framework that can express proofs of equivalence between a POG and a Boolean formula in conjunctive normal form (CNF).
  We have developed a program that generates POG representations from the decision-DNNF graphs produced by the state-of-the-art knowledge compiler D4, as well as checkable CPOG proofs certifying that the output POGs are equivalent to the input CNF formulas. Our toolchain for generating and verifying POGs scales to all but the largest graphs produced by D4 for formulas from a recent model counting competition. Additionally, we have developed a formally verified CPOG checker and model counter for POGs in the Lean 4 proof assistant. In doing so, we proved the soundness of our proof framework. These programs comprise the first formally verified toolchain for weighted and unweighted model counting.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.12906v1</guid>
      <category>cs.LO</category>
      <pubDate>Thu, 23 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Randal E. Bryant, Wojciech Nawrocki, Jeremy Avigad, Marijn J. H. Heule</dc:creator>
    </item>
    <item>
      <title>Constructive characterisations of the must-preorder for asynchrony</title>
      <link>https://arxiv.org/abs/2501.13002</link>
      <description>arXiv:2501.13002v1 Announce Type: new 
Abstract: De Nicola and Hennessy's must-preorder is a contextual refinement which states that a server q refines a server p if all clients satisfied by p are also satisfied by q. Owing to the universal quantification over clients, this definition does not yield a practical proof method for the must-preorder, and alternative characterisations are necessary to reason over it. Finding these characterisations for asynchronous semantics, i.e. where outputs are non-blocking, has thus far proven to be a challenge, usually tackled via ad-hoc definitions. We show that the standard characterisations of the must-preorder carry over as they stand to asynchronous communication, if servers are enhanced to act as forwarders, i.e. they can input any message as long as they store it back into the shared buffer. Our development is constructive, is completely mechanised in Coq, and is independent of any calculus: our results pertain to Selinger output-buffered agents with feedback. This is a class of Labelled Transition Systems that captures programs that communicate via a shared unordered buffer, as in asynchronous CCS or the asynchronous pi-calculus. We show that the standard coinductive characterisation lets us prove in Coq that concrete programs are related by the must-preorder. Finally, our proofs show that Brouwer's bar induction principle is a useful technique to reason on liveness preserving program transformations.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.13002v1</guid>
      <category>cs.LO</category>
      <category>cs.PL</category>
      <pubDate>Thu, 23 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Giovanni Bernardi, Ilaria Castellani, Paul Laforgue, L\'eo Stefanesco</dc:creator>
    </item>
    <item>
      <title>A behavioural pseudometric for continuous-time Markov processes</title>
      <link>https://arxiv.org/abs/2501.13008</link>
      <description>arXiv:2501.13008v1 Announce Type: new 
Abstract: In this work, we generalize the concept of bisimulation metric in order to metrize the behaviour of continuous-time processes. Similarly to what is done for discrete-time systems, we follow two approaches and show that they coincide: as a fixpoint of a functional and through a real-valued logic.
  The whole discrete-time approach relies entirely on the step-based dynamics: the process jumps from state to state. We define a behavioural pseudometric for processes that evolve continuously through time, such as Brownian motion or involve jumps or both.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.13008v1</guid>
      <category>cs.LO</category>
      <pubDate>Thu, 23 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Linan Chen, Florence Clerc, Prakash Panangaden</dc:creator>
    </item>
    <item>
      <title>Enriched Categories for Parameterized Circuit Semantics</title>
      <link>https://arxiv.org/abs/2501.12481</link>
      <description>arXiv:2501.12481v1 Announce Type: cross 
Abstract: It is well-known that combinatorial circuits are modeled mathematically by string diagrams in a monoidal category. Given a gate set $\Sigma$, the circuits over $\Sigma$ can be thought of as string diagrams in the free monoidal category generated by $\Sigma$. In this model, circuit semantics are then given by monoidal functors out of this free category. For quantum circuits, this functor is often valued in the category of unitary matrices. This model suffices for concrete quantum circuits, but fails to describe parameterized families of quantum circuits, such as those which arise in the analysis of ansatz circuits. Intuitively, this functor should be valued in parameterized families of unitary matices, though it is not immediately clear what this mean through a categorical lens. In this paper, we show that the parameterized semantics studied in prior work can be understood through enrichment and internal constructions. We determine sufficient conditions under which this construction yields a symmetric monoidal category, and suggest how these semantics could be extended to classical circuit analysis and parameterized equivalence checking.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.12481v1</guid>
      <category>quant-ph</category>
      <category>cs.LO</category>
      <pubDate>Thu, 23 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Scott Wesley</dc:creator>
    </item>
    <item>
      <title>Universal Algebra in UniMath</title>
      <link>https://arxiv.org/abs/2102.05952</link>
      <description>arXiv:2102.05952v3 Announce Type: replace 
Abstract: We present our library for Universal Algebra in the UniMath framework dealing with multi-sorted signatures, their algebras, and the basics for equation systems. We show how to implement term algebras over a signature without resorting to general inductive constructions (currently not allowed in UniMath) still retaining the computational nature of the definition. We prove that our single sorted ground term algebras are instances of homotopy W-types. From this perspective, the library enriches UniMath with a computationally well-behaved implementation of a class of W-types. Moreover, we give neat constructions of the univalent categories of algebras and equational algebras by using the formalism of displayed categories, and show that the term algebra over a signature is the initial object of the category of algebras. Finally, we showcase the computational relevance of our work by sketching some basic examples from algebra and propositional logic.</description>
      <guid isPermaLink="false">oai:arXiv.org:2102.05952v3</guid>
      <category>cs.LO</category>
      <category>math.LO</category>
      <pubDate>Thu, 23 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.1017/S0960129524000367</arxiv:DOI>
      <arxiv:journal_reference>Mathematical Structures in Computer Science. Published online 2024:1-23</arxiv:journal_reference>
      <dc:creator>Gianluca Amato, Matteo Calosci, Marco Maggesi, Cosimo Perini Brogi</dc:creator>
    </item>
    <item>
      <title>Annotated Dependency Pairs for Full Almost-Sure Termination of Probabilistic Term Rewriting</title>
      <link>https://arxiv.org/abs/2408.06768</link>
      <description>arXiv:2408.06768v2 Announce Type: replace 
Abstract: Dependency pairs (DPs) are one of the most powerful techniques for automated termination analysis of term rewrite systems. Recently, we adapted the DP framework to the probabilistic setting to prove almost-sure termination (AST) via annotated DPs (ADPs). However, this adaption only handled AST w.r.t. the innermost evaluation strategy. In this paper, we improve the ADP framework to prove AST for full rewriting. Moreover, we refine the framework for rewrite sequences that start with basic terms containing a single defined function symbol. We implemented and evaluated the new framework in our tool AProVE.</description>
      <guid isPermaLink="false">oai:arXiv.org:2408.06768v2</guid>
      <category>cs.LO</category>
      <pubDate>Thu, 23 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Jan-Christoph Kassing, J\"urgen Giesl</dc:creator>
    </item>
    <item>
      <title>A finite presentation of graphs of treewidth at most three</title>
      <link>https://arxiv.org/abs/2411.18176</link>
      <description>arXiv:2411.18176v2 Announce Type: replace 
Abstract: We provide a finite equational presentation of graphs of treewidth at most three, solving an instanceof an open problem by Courcelle and Engelfriet. We use a syntax generalising series-parallel expressions, denoting graphs with a small interface. Weintroduce appropriate notions of connectivity for such graphs (components, cutvertices, separationpairs). We use those concepts to analyse the structure of graphs of treewidth at most three, showinghow they can be decomposed recursively, first canonically into connected parallel components, andthen non-deterministically. The main difficulty consists in showing that all non-deterministic choicescan be related using only finitely many equational axioms.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.18176v2</guid>
      <category>cs.LO</category>
      <pubDate>Thu, 23 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <arxiv:DOI>10.4230/LIPIcs.ICALP.2024.135</arxiv:DOI>
      <dc:creator>Amina Doumane (PLUME, LIP), Samuel Humeau (PLUME, LIP), Damien Pous (PLUME, LIP)</dc:creator>
    </item>
    <item>
      <title>Classifying the groups of order $p q$ in Lean</title>
      <link>https://arxiv.org/abs/2501.09769</link>
      <description>arXiv:2501.09769v2 Announce Type: replace 
Abstract: This note discusses our formalisation in Lean of the classification of the groups of order $p q$ for (not necessarily distinct) prime numbers $p$ and $q$, together with various intermediate results such as the characterisation of internal direct and semidirect products.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.09769v2</guid>
      <category>cs.LO</category>
      <category>math.GR</category>
      <pubDate>Thu, 23 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Scott Harper, Peiran Wu</dc:creator>
    </item>
    <item>
      <title>Modular Counting CSP: Reductions and Algorithms</title>
      <link>https://arxiv.org/abs/2501.04224</link>
      <description>arXiv:2501.04224v3 Announce Type: replace-cross 
Abstract: The Constraint Satisfaction Problem (CSP) is ubiquitous in various areas of mathematics and computer science. Many of its variations have been studied including the Counting CSP, where the goal is to find the number of solutions to a CSP instance. The complexity of finding the exact number of solutions of a CSP is well understood (Bulatov, 2013, and Dyer and Richerby, 2013) and the focus has shifted to other variations of the Counting CSP such as counting the number of solutions modulo an integer. This problem has attracted considerable attention recently. In the case of CSPs based on undirected graphs Bulatov and Kazeminia (STOC 2022) obtained a complexity classification for the problem of counting solutions modulo p for arbitrary prime p. In this paper we report on the progress made towards a similar classification for the general CSP, not necessarily based on graphs.
  We identify several features that make the general case very different from the graph case such as a stronger form of rigidity and the structure of automorphisms of powers of relational structures. We provide a solution algorithm in the case p=2 that works under some additional conditions and prove the hardness of the problem under some assumptions about automorphisms of the powers of the relational structure. We also reduce the general CSP to the case that only uses binary relations satisfying strong additional conditions.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.04224v3</guid>
      <category>cs.CC</category>
      <category>cs.LO</category>
      <pubDate>Thu, 23 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Amirhossein Kazeminia, Andrei A. Bulatov</dc:creator>
    </item>
  </channel>
</rss>
