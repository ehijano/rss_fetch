<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.FL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.FL</link>
    <description>cs.FL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.FL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 May 2024 04:02:34 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 16 May 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Containment Problem for Deterministic Multicounter Machine Models</title>
      <link>https://arxiv.org/abs/2405.08988</link>
      <description>arXiv:2405.08988v1 Announce Type: new 
Abstract: There are many types of automata and grammar models that have been studied in the literature, and for these models, it is common to determine whether certain problems are decidable. One problem that has been difficult to answer throughout the history of automata and formal language theory is to decide whether a given system $M$ accepts a bounded language (whether there exist words $w_1, \ldots,w_k$ such that $L(M) \subseteq w_1^* \cdots w_k^*$?). Boundedness was only known to be decidable for regular and context-free languages until recently when it was shown to also be decidable for finite automata and pushdown automata augmented with reversal-bounded counters, and for vector addition systems with states. However, decidability of this problem has still gone unanswered for the majority of automata/grammar models with a decidable emptiness problem that have been studied in the literature.
  In this paper, we develop new techniques to show that the boundedness problem is decidable for larger classes of one-way nondeterministic automata and grammar models by reducing the problem to the decidability of boundedness for simpler classes of automata. One technique involves characterizing the models in terms of multi-tape automata. We give new characterizations of finite-turn Turing machines, finite-turn Turing machines augmented with various storage structures (like a pushdown, multiple reversal-bounded counters, partially-blind counters, etc.), and simple matrix grammars. The characterizations are then used to show that the boundedness problem for these models is decidable. Another technique uses the concept of the store language of an automaton. This is used to show that the boundedness problem is decidable for pushdown automata that can "flip" their pushdown a bounded number of times. Boundedness remains decidable even if we augment this device with additional stores.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.08988v1</guid>
      <category>cs.FL</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Oscar H. Ibarra, Ian McQuillan</dc:creator>
    </item>
    <item>
      <title>A Formal Approach for Tuning Stochastic Oscillators</title>
      <link>https://arxiv.org/abs/2405.09183</link>
      <description>arXiv:2405.09183v1 Announce Type: new 
Abstract: Periodic recurrence is a prominent behavioural of many biological phenomena, including cell cycle and circadian rhythms. Although deterministic models are commonly used to represent the dynamics of periodic phenomena, it is known that they are little appropriate in the case of systems in which stochastic noise induced by small population numbers is actually responsible for periodicity. Within the stochastic modelling settings automata-based model checking approaches have proven an effective means for the analysis of oscillatory dynamics, the main idea being that of coupling a period detector automaton with a continuous-time Markov chain model of an alleged oscillator. In this paper we address a complementary aspect, i.e. that of assessing the dependency of oscillation related measure (period and amplitude) against the parameters of a stochastic oscillator. To this aim we introduce a framework which, by combining an Approximate Bayesian Computation scheme with a hybrid automata capable of quantifying how distant an instance of a stochastic oscillator is from matching a desired (average) period, leads us to identify regions of the parameter space in which oscillation with given period are highly likely. The method is demonstrated through a couple of case studies, including a model of the popular Repressilator circuit.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.09183v1</guid>
      <category>cs.FL</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <arxiv:DOI>10.1007/978-3-031-42697-1_1</arxiv:DOI>
      <arxiv:journal_reference>Computational Methods in Systems Biology, Sep 2023, Luxembourg, Luxembourg. pp.1-17</arxiv:journal_reference>
      <dc:creator>Paolo Ballarini (MICS), Mahmoud Bentriou, Paul-Henry Courn\`ede</dc:creator>
    </item>
    <item>
      <title>Extended time Petri nets</title>
      <link>https://arxiv.org/abs/2405.09208</link>
      <description>arXiv:2405.09208v1 Announce Type: new 
Abstract: In many complex systems that can be modeled using Petri nets time can be a very important factor which should be taken into account during creation and analysis of the model. Time data can describe starting moments of some actions or their duration before their immediate effects start to influence some other areas of the modeled system. Places in a Petri net often describe static components of the system, but they can also describe states. Such a state can have time restrictions, for example, telling how long it can influence other elements in the model. Time values describing some system may be inconsistent or incomplete, which can cause problems during the creation of the model. In this paper, a new extension of time Petri nets is proposed, which allows the creation of models with different types of time data, which previously were possible to be properly used in separate types of well-known time Petri nets. The proposed new time Petri net solves this problem by integrating different aspects of already existing time Petri nets into one unified net.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.09208v1</guid>
      <category>cs.FL</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Marcin Radom, Piotr Formanowicz</dc:creator>
    </item>
    <item>
      <title>$O_2$ is a multiple context-free grammar: an implementation-, formalisation-friendly proof</title>
      <link>https://arxiv.org/abs/2405.09396</link>
      <description>arXiv:2405.09396v1 Announce Type: new 
Abstract: Classifying formal languages according to the expressiveness of grammars able to generate them is a fundamental problem in computational linguistics and, therefore, in the theory of computation. Furthermore, such kind of analysis can give insight into the classification of abstract algebraic structure such as groups, for example through the correspondence given by the word problem. While many such classification problems remain open, others have been settled. Recently, it was proved that $n$-balanced languages (i.e., whose strings contain the same occurrences of letters $a_i$ and $A_i$ with $1\leq i \leq n$) can be generated by multiple context-free grammars (MCFGs), which are one of the several slight extensions of context free grammars added to the classical Chomsky hierarchy to make the mentioned classification more precise. This paper analyses the existing proofs from the computational and the proof-theoretical point of views, systematically studying whether each proof can lead to a verified (i.e., checked by a proof assistant) algorithm parsing balanced languages via MCFGs. We conclude that none of the existing proofs is realistically suitable against this practical goal, and proceed to provide a radically new, elementary, extremely short proof for the crucial case $n \leq 2$. A comparative analysis with respect to the existing proofs is finally performed to justify why the proposed proof is a substantial step towards concretely obtaining a verified parsing algorithm for $O_2$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.09396v1</guid>
      <category>cs.FL</category>
      <category>cs.AI</category>
      <category>cs.LO</category>
      <category>math.LO</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-nd/4.0/</dc:rights>
      <dc:creator>Marco B. Caminati</dc:creator>
    </item>
    <item>
      <title>Feasability of Learning Weighted Automata on a Semiring</title>
      <link>https://arxiv.org/abs/2309.07806</link>
      <description>arXiv:2309.07806v3 Announce Type: replace 
Abstract: Since the seminal work by Angluin, active learning of automata, by membership and equivalence queries, has been extensively studied and several generalisations have been developed to learn various extensions of automata. For weighted automata, restricted cases have been tackled in the literature and in this paper we chart the boundaries of the Angluin approach (using a class of hypothesis automata constructed from membership and equivalence queries) applied to learning weighted automata over a general semiring. We show precisely the theoretical limitations of this approach and classify functions with respect to how guessable they are (corresponding to the existence and abundance of solutions of certain systems of equations). We provide a syntactic description of the boundary condition for a correct hypothesis of the prescribed form to exist. Of course, from an algorithmic standpoint, knowing that (many) solutions exist need not translate into an effective algorithm to find one; we conclude with a discussion of some known conditions (and variants thereof) that suffice to ensure this, illustrating the ideas over several familiar semirings (including the natural numbers) and pose some open questions for future research.</description>
      <guid isPermaLink="false">oai:arXiv.org:2309.07806v3</guid>
      <category>cs.FL</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Laure Daviaud, Marianne Johnson</dc:creator>
    </item>
    <item>
      <title>On the minimal memory set of cellular automata</title>
      <link>https://arxiv.org/abs/2404.06394</link>
      <description>arXiv:2404.06394v2 Announce Type: replace-cross 
Abstract: For a group $G$ and a finite set $A$, a cellular automaton (CA) is a transformation $\tau : A^G \to A^G$ defined via a finite memory set $S \subseteq G$ and a local map $\mu : A^S \to A$. Although memory sets are not unique, every CA admits a unique minimal memory set, which consists on all the essential elements of $S$ that affect the behavior of the local map. In this paper, we study the links between the minimal memory set and the generating patterns $\mathcal{P}$ of $\mu$; these are the patterns in $A^S$ that are not fixed when the cellular automaton is applied. In particular, we show that when $\vert S \vert \geq 2$ and $\vert \mathcal{P} \vert$ is not a multiple of $\vert A \vert$, then the minimal memory set must be $S$ itself. Moreover, when $\vert \mathcal{P} \vert = \vert A \vert$, $\vert S \vert \geq 3$, and the restriction of $\mu$ to these patterns is well-behaved, then the minimal memory set must be $S$ or $S \setminus \{s\}$, for some $s \in S \setminus \{e\}$. These are some of the first general theoretical results on the minimal memory set of a cellular automaton.</description>
      <guid isPermaLink="false">oai:arXiv.org:2404.06394v2</guid>
      <category>nlin.CG</category>
      <category>cs.FL</category>
      <category>math.DS</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Alonso Castillo-Ramirez, Eduardo Veliz-Quintero</dc:creator>
    </item>
  </channel>
</rss>
