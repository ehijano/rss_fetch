<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.DS updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.DS</link>
    <description>cs.DS updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.DS" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Aug 2024 01:38:24 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Wed, 31 Jul 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Randomized Rounding Approaches to Online Allocation, Sequencing, and Matching</title>
      <link>https://arxiv.org/abs/2407.20419</link>
      <description>arXiv:2407.20419v1 Announce Type: new 
Abstract: Randomized rounding is a technique that was originally used to approximate hard offline discrete optimization problems from a mathematical programming relaxation. Since then it has also been used to approximately solve sequential stochastic optimization problems, overcoming the curse of dimensionality. To elaborate, one first writes a tractable linear programming relaxation that prescribes probabilities with which actions should be taken. Rounding then designs a (randomized) online policy that approximately preserves all of these probabilities, with the challenge being that the online policy faces hard constraints, whereas the prescribed probabilities only have to satisfy these constraints in expectation. Moreover, unlike classical randomized rounding for offline problems, the online policy's actions unfold sequentially over time, interspersed by uncontrollable stochastic realizations that affect the feasibility of future actions. This tutorial provides an introduction for using randomized rounding to design online policies, through four self-contained examples representing fundamental problems in the area: online contention resolution, stochastic probing, stochastic knapsack, and stochastic matching.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.20419v1</guid>
      <category>cs.DS</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Will Ma</dc:creator>
    </item>
    <item>
      <title>Greedy Conjecture for the Shortest Common Superstring Problem and its Strengthenings</title>
      <link>https://arxiv.org/abs/2407.20422</link>
      <description>arXiv:2407.20422v1 Announce Type: new 
Abstract: In the Shortest Common Superstring problem, one needs to find the shortest superstring for a set of strings. This problem is APX-hard, and many approximation algorithms were proposed, with the current best approximation factor of 2.466. Whereas these algorithms are technically involved, for more than thirty years the Greedy Conjecture remains unsolved, that states that the Greedy Algorithm ``take two strings with the maximum overlap; merge them; repeat'' is a 2-approximation.
  This conjecture is still open, and one way to approach it is to consider its stronger version, which may make the proof easier due to the stronger premise or provide insights from its refutation. In this paper, we propose two directions to strengthen the conjecture. First, we introduce the Locally Greedy Algorithm (LGA), that selects a pair of strings not with the largest overlap but with the \emph{locally largest} overlap, that is, the largest among all pairs of strings with the same first or second string. Second, we change the quality metric: instead of length, we evaluate the solution by the number of occurrences of an arbitrary symbol.
  Despite the double strengthening, we prove that LGA is a \emph{uniform} 4-approximation, that is, it always constructs a superstring with no more than four times as many occurrences of an arbitrary symbol as any other superstring. At the same time, we discover the limitations of the greedy heuristic: we show that LGA is at least 3-approximation, and the Greedy Algorithm is at least uniform 2.5-approximation. These result show that if the Greedy Conjecture is true, it is not because the Greedy Algorithm is locally greedy or is uniformly 2-approximation.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.20422v1</guid>
      <category>cs.DS</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Maksim Nikolaev</dc:creator>
    </item>
    <item>
      <title>Random-Order Interval Selection</title>
      <link>https://arxiv.org/abs/2407.20941</link>
      <description>arXiv:2407.20941v1 Announce Type: new 
Abstract: In the problem of online unweighted interval selection, the objective is to maximize the number of non-conflicting intervals accepted by the algorithm. In the conventional online model of irrevocable decisions, there is an Omega(n) lower bound on the competitive ratio, even for randomized algorithms [Bachmann et al. 2013]. In a line of work that allows for revocable acceptances, [Faigle and Nawijn 1995] gave a greedy 1-competitive (i.e. optimal) algorithm in the real-time model, where intervals arrive in order of non-decreasing starting times. The natural extension of their algorithm in the adversarial (any-order) model is 2k-competitive [Borodin and Karavasilis 2023], when there are at most k different interval lengths, and that is optimal for all deterministic, and memoryless randomized algorithms. We study this problem in the random-order model, where the adversary chooses the instance, but the online sequence is a uniformly random permutation of the items. We consider the same algorithm that is optimal in the cases of the real-time and any-order models, and give an upper bound of 2.5 on the competitive ratio under random-order arrivals.
  We also show how to utilize random-order arrivals to extract a random bit with a worst case bias of 2/3, when there are at least two distinct item types. We use this bit to derandomize the barely random algorithm of [Fung et al. 2014] and get a deterministic 3-competitive algorithm for single-length interval selection with arbitrary weights.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.20941v1</guid>
      <category>cs.DS</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Allan Borodin, Christodoulos Karavasilis</dc:creator>
    </item>
    <item>
      <title>Settling the Pass Complexity of Approximate Matchings in Dynamic Graph Streams</title>
      <link>https://arxiv.org/abs/2407.21005</link>
      <description>arXiv:2407.21005v1 Announce Type: new 
Abstract: A semi-streaming algorithm in dynamic graph streams processes any $n$-vertex graph by making one or multiple passes over a stream of insertions and deletions to edges of the graph and using $O(n \cdot \mbox{polylog}(n))$ space. Semi-streaming algorithms for dynamic streams were first obtained in the seminal work of Ahn, Guha, and McGregor in 2012, alongside the introduction of the graph sketching technique, which remains the de facto way of designing algorithms in this model and a highly popular technique for designing graph algorithms in general.
  We settle the pass complexity of approximating maximum matchings in dynamic streams via semi-streaming algorithms by improving the state-of-the-art in both upper and lower bounds.
  We present a randomized sketching based semi-streaming algorithm for $O(1)$-approximation of maximum matching in dynamic streams using $O(\log\log{n})$ passes. The approximation ratio of this algorithm can be improved to $(1+\epsilon)$ for any fixed $\epsilon &gt; 0$ even on weighted graphs using standard techniques. This exponentially improves upon several $O(\log{n})$ pass algorithms developed for this problem since the introduction of the dynamic graph streaming model.
  In addition, we prove that any semi-streaming algorithm (not only sketching based) for $O(1)$-approximation of maximum matching in dynamic streams requires $\Omega(\log\log{n})$ passes. This presents the first multi-pass lower bound for this problem, which is already also optimal, settling a longstanding open question in this area.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.21005v1</guid>
      <category>cs.DS</category>
      <category>cs.CC</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Sepehr Assadi, Soheil Behnezhad, Christian Konrad, Kheeran K. Naidu, Janani Sundaresan</dc:creator>
    </item>
    <item>
      <title>Fast Static and Dynamic Approximation Algorithms for Geometric Optimization Problems: Piercing, Independent Set, Vertex Cover, and Matching</title>
      <link>https://arxiv.org/abs/2407.20659</link>
      <description>arXiv:2407.20659v1 Announce Type: cross 
Abstract: We develop simple and general techniques to obtain faster (near-linear time) static approximation algorithms, as well as efficient dynamic data structures, for four fundamental geometric optimization problems: minimum piercing set (MPS), maximum independent set (MIS), minimum vertex cover (MVC), and maximum-cardinality matching (MCM). Highlights of our results include the following:
  * For $n$ axis-aligned boxes in any constant dimension $d$, we give an $O(\log \log n)$-approximation algorithm for MPS that runs in $O(n^{1+\delta})$ time for an arbitrarily small constant $\delta&gt;0$. This significantly improves the previous $O(\log\log n)$-approximation algorithm by Agarwal, Har-Peled, Raychaudhury, and Sintos (SODA~2024), which ran in $O(n^{d/2}\mathop{\rm polylog} n)$ time.
  * Furthermore, we show that our algorithm can be made fully dynamic with $O(n^{\delta})$ amortized update time. Previously, Agarwal et al.~(SODA~2024) obtained dynamic results only in $\mathbb{R}^2$ and achieved only $O(\sqrt{n}\mathop{\rm polylog} n)$ amortized expected update time.
  * For $n$ axis-aligned rectangles in $\mathbb{R}^2$, we give an $O(1)$-approximation algorithm for MIS that runs in $O(n^{1+\delta})$ time. Our result significantly improves the running time of the celebrated algorithm by Mitchell (FOCS~2021) (which was about $O(n^{21})$), and answers one of his open questions. Our algorithm can also be made fully dynamic with $O(n^{\delta})$ amortized update time.
  * For $n$ (unweighted or weighted) fat objects in any constant dimension, we give a dynamic $O(1)$-approximation algorithm for MIS with $O(n^{\delta})$ amortized update time.
  * For disks in $\mathbb{R}^2$ or hypercubes in any constant dimension, we give the first fully dynamic $(1+\varepsilon)$-approximation algorithms for MVC and MCM with $O(\mathop{\rm polylog}n)$ amortized update time.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.20659v1</guid>
      <category>cs.CG</category>
      <category>cs.DS</category>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Sujoy Bhore, Timothy M. Chan</dc:creator>
    </item>
    <item>
      <title>Constraint Satisfaction Problems with Advice</title>
      <link>https://arxiv.org/abs/2403.02212</link>
      <description>arXiv:2403.02212v2 Announce Type: replace 
Abstract: We initiate the study of algorithms for constraint satisfaction problems with ML oracle advice. We introduce two models of advice and then design approximation algorithms for Max Cut, Max $2$-Lin, and Max $3$-Lin in these models. In particular, we show the following.
  1. For Max-Cut and Max $2$-Lin, we design an algorithm that yields near-optimal solutions when the average degree is larger than a threshold degree, which only depends on the amount of advice and is independent of the instance size. We also give an algorithm for nearly satisfiable Max $3$-Lin instances with quantitatively similar guarantees.
  2. Further, we provide impossibility results for algorithms in these models. In particular, under standard complexity assumptions, we show that Max $3$-Lin is still $1/2 + \eta$ hard to approximate given access to advice, when there are no assumptions on the instance degree distribution. Additionally, we also show that Max $4$-Lin is $1/2 + \eta$ hard to approximate even when the average degree of the instance is linear in the number of variables.</description>
      <guid isPermaLink="false">oai:arXiv.org:2403.02212v2</guid>
      <category>cs.DS</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Suprovat Ghoshal, Konstantin Makarychev, Yury Makarychev</dc:creator>
    </item>
    <item>
      <title>$(\Delta + 1)$ Vertex Coloring in $O(n)$ Communication</title>
      <link>https://arxiv.org/abs/2404.19081</link>
      <description>arXiv:2404.19081v2 Announce Type: replace 
Abstract: We study the communication complexity of $(\Delta + 1)$ vertex coloring, where the edges of an $n$-vertex graph of maximum degree $\Delta$ are partitioned between two players. We provide a randomized protocol which uses $O(n)$ bits of communication and ends with both players knowing the coloring. Combining this with a folklore $\Omega(n)$ lower bound, this settles the randomized communication complexity of $(\Delta + 1)$-coloring up to constant factors.</description>
      <guid isPermaLink="false">oai:arXiv.org:2404.19081v2</guid>
      <category>cs.DS</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Maxime Flin, Parth Mittal</dc:creator>
    </item>
    <item>
      <title>Adaptive Dynamic Bitvectors</title>
      <link>https://arxiv.org/abs/2405.15088</link>
      <description>arXiv:2405.15088v2 Announce Type: replace 
Abstract: While operations \emph{rank} and \emph{select} on static bitvectors can be supported in constant time, lower bounds show that supporting updates raises the cost per operation to $\Theta(\log n/ \log\log n)$. This is a shame in scenarios where updates are possible but uncommon. We develop a representation of bitvectors that supports all the operations in $O(\log(n/q))$ amortized time. Our experimental results support the theoretical findings, displaying speedups of orders of magnitude compared to standard dynamic implementations.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.15088v2</guid>
      <category>cs.DS</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Gonzalo Navarro</dc:creator>
    </item>
    <item>
      <title>Query-optimal estimation of unitary channels in diamond distance</title>
      <link>https://arxiv.org/abs/2302.14066</link>
      <description>arXiv:2302.14066v2 Announce Type: replace-cross 
Abstract: We consider process tomography for unitary quantum channels. Given access to an unknown unitary channel acting on a $\textsf{d}$-dimensional qudit, we aim to output a classical description of a unitary that is $\varepsilon$-close to the unknown unitary in diamond norm. We design an algorithm achieving error $\varepsilon$ using $O(\textsf{d}^2/\varepsilon)$ applications of the unknown channel and only one qudit. This improves over prior results, which use $O(\textsf{d}^3/\varepsilon^2)$ [via standard process tomography] or $O(\textsf{d}^{2.5}/\varepsilon)$ [Yang, Renner, and Chiribella, PRL 2020] applications. To show this result, we introduce a simple technique to "bootstrap" an algorithm that can produce constant-error estimates to one that can produce $\varepsilon$-error estimates with the Heisenberg scaling. Finally, we prove a complementary lower bound showing that estimation requires $\Omega(\textsf{d}^2/\varepsilon)$ applications, even with access to the inverse or controlled versions of the unknown unitary. This shows that our algorithm has both optimal query complexity and optimal space complexity.</description>
      <guid isPermaLink="false">oai:arXiv.org:2302.14066v2</guid>
      <category>quant-ph</category>
      <category>cs.DS</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <arxiv:DOI>10.1109/FOCS57990.2023.00028</arxiv:DOI>
      <arxiv:journal_reference>2023 IEEE 64th Annual Symposium on Foundations of Computer Science (FOCS), Santa Cruz, CA, USA, 2023, pp. 363-390</arxiv:journal_reference>
      <dc:creator>Jeongwan Haah, Robin Kothari, Ryan O'Donnell, Ewin Tang</dc:creator>
    </item>
  </channel>
</rss>
