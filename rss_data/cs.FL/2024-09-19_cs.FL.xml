<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.FL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.FL</link>
    <description>cs.FL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.FL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Sep 2024 01:45:27 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 19 Sep 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Biological arrow of time: Emergence of tangled information hierarchies and self-modelling dynamics</title>
      <link>https://arxiv.org/abs/2409.12029</link>
      <description>arXiv:2409.12029v1 Announce Type: cross 
Abstract: We study open-ended evolution by focusing on computational and information-processing dynamics underlying major evolutionary transitions. In doing so, we consider biological organisms as hierarchical dynamical systems that generate regularities in their phase-spaces through interactions with their environment. These emergent information patterns can then be encoded within the organism's components, leading to self-modelling "tangled hierarchies". Our main conjecture is that when macro-scale patterns are encoded within micro-scale components, it creates fundamental tensions (computational inconsistencies) between what is encodable at a particular evolutionary stage and what is potentially realisable in the environment. A resolution of these tensions triggers an evolutionary transition which expands the problem-space, at the cost of generating new tensions in the expanded space, in a continual process. We argue that biological complexification can be interpreted computation-theoretically, within the G\"odel--Turing--Post recursion-theoretic framework, as open-ended generation of computational novelty. In general, this process can be viewed as a meta-simulation performed by higher-order systems that successively simulate the computation carried out by lower-order systems. This computation-theoretic argument provides a basis for hypothesising the biological arrow of time.</description>
      <guid isPermaLink="false">oai:arXiv.org:2409.12029v1</guid>
      <category>q-bio.PE</category>
      <category>cs.FL</category>
      <category>cs.LO</category>
      <category>nlin.AO</category>
      <category>nlin.CG</category>
      <pubDate>Thu, 19 Sep 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Mikhail Prokopenko, Paul C. W. Davies, Michael Harr\'e, Marcus Heisler, Zdenka Kuncic, Geraint F. Lewis, Ori Livson, Joseph T. Lizier, Fernando E. Rosas</dc:creator>
    </item>
    <item>
      <title>The repetition threshold for ternary rich words</title>
      <link>https://arxiv.org/abs/2409.12068</link>
      <description>arXiv:2409.12068v1 Announce Type: cross 
Abstract: In 2014, Vesti proposed the problem of determining the repetition threshold for infinite rich words, i.e., for infinite words in which all factors of length $n$ contain $n$ distinct nonempty palindromic factors. In 2020, Currie, Mol, and Rampersad proved a conjecture of Baranwal and Shallit that the repetition threshold for binary rich words is $2 + \sqrt{2}/2$. In this paper, we prove a structure theorem for $16/7$-power-free ternary rich words. Using the structure theorem, we deduce that the repetition threshold for ternary rich words is $1 + 1/(3 - \mu) \approx 2.25876324$, where $\mu$ is the unique real root of the polynomial $x^3 - 2x^2 - 1$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2409.12068v1</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <category>cs.FL</category>
      <pubDate>Thu, 19 Sep 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>James D. Currie, Lucas Mol, Jarkko Peltom\"aki</dc:creator>
    </item>
    <item>
      <title>Computational Dynamical Systems</title>
      <link>https://arxiv.org/abs/2409.12179</link>
      <description>arXiv:2409.12179v1 Announce Type: cross 
Abstract: We study the computational complexity theory of smooth, finite-dimensional dynamical systems. Building off of previous work, we give definitions for what it means for a smooth dynamical system to simulate a Turing machine. We then show that 'chaotic' dynamical systems (more precisely, Axiom A systems) and 'integrable' dynamical systems (more generally, measure-preserving systems) cannot robustly simulate universal Turing machines, although such machines can be robustly simulated by other kinds of dynamical systems. Subsequently, we show that any Turing machine that can be encoded into a structurally stable one-dimensional dynamical system must have a decidable halting problem, and moreover an explicit time complexity bound in instances where it does halt. More broadly, our work elucidates what it means for one 'machine' to simulate another, and emphasizes the necessity of defining low-complexity 'encoders' and 'decoders' to translate between the dynamics of the simulation and the system being simulated. We highlight how the notion of a computational dynamical system leads to questions at the intersection of computational complexity theory, dynamical systems theory, and real algebraic geometry.</description>
      <guid isPermaLink="false">oai:arXiv.org:2409.12179v1</guid>
      <category>cs.CC</category>
      <category>cs.AI</category>
      <category>cs.FL</category>
      <category>math.DS</category>
      <pubDate>Thu, 19 Sep 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Jordan Cotler, Semon Rezchikov</dc:creator>
    </item>
    <item>
      <title>Standard Automata Theory and Process Algebra</title>
      <link>https://arxiv.org/abs/2205.03515</link>
      <description>arXiv:2205.03515v5 Announce Type: replace 
Abstract: The concepts of machine homomorphism and machine products developed in the automata theory literature in the 1960s are more relevant to concurrent systems than is acknowledged in the process algebra literature and offer a sophisticated mathematical basis for understanding concurrent systems.</description>
      <guid isPermaLink="false">oai:arXiv.org:2205.03515v5</guid>
      <category>cs.FL</category>
      <pubDate>Thu, 19 Sep 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-nd/4.0/</dc:rights>
      <dc:creator>Victor Yodaiken</dc:creator>
    </item>
    <item>
      <title>Specify What? Enhancing Neural Specification Synthesis by Symbolic Methods</title>
      <link>https://arxiv.org/abs/2406.15540</link>
      <description>arXiv:2406.15540v2 Announce Type: replace-cross 
Abstract: We investigate how combinations of Large Language Models (LLMs) and symbolic analyses can be used to synthesise specifications of C programs. The LLM prompts are augmented with outputs from two formal methods tools in the Frama-C ecosystem, Pathcrawler and EVA, to produce C program annotations in the specification language ACSL. We demonstrate how the addition of symbolic analysis to the workflow impacts the quality of annotations: information about input/output examples from Pathcrawler produce more context-aware annotations, while the inclusion of EVA reports yields annotations more attuned to runtime errors. In addition, we show that the method infers rather the programs intent than its behaviour, by generating specifications for buggy programs and observing robustness of the result against bugs.</description>
      <guid isPermaLink="false">oai:arXiv.org:2406.15540v2</guid>
      <category>cs.SE</category>
      <category>cs.FL</category>
      <category>cs.LG</category>
      <pubDate>Thu, 19 Sep 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>George Granberry, Wolfgang Ahrendt, Moa Johansson</dc:creator>
    </item>
    <item>
      <title>Reactive graphs in action (extended version)</title>
      <link>https://arxiv.org/abs/2407.14705</link>
      <description>arXiv:2407.14705v2 Announce Type: replace-cross 
Abstract: Reactive graphs are transition structures whereas edges become active and inactive during its evolution, that were introduced by Dov Gabbay from a mathematical's perspective. This paper presents Marge (https://fm-dcc.github.io/MARGe), a web-based tool to visualise and analyse reactive graphs enriched with labels. Marge animates the operational semantics of reactive graphs and offers different graphical views to provide insights over concrete systems. We motivate the applicability of reactive graphs for adaptive systems and for featured transition systems, using Marge to tighten the gap between the existing theoretical models and their usage to analyse concrete systems.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.14705v2</guid>
      <category>cs.PL</category>
      <category>cs.FL</category>
      <pubDate>Thu, 19 Sep 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.1007/978-3-031-71261-6_6</arxiv:DOI>
      <dc:creator>David Tinoco, Alexandre Madeira, Manuel A. Martins, Jos\'e Proen\c{c}a</dc:creator>
    </item>
  </channel>
</rss>
