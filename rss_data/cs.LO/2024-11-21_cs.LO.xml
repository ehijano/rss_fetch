<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.LO updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.LO</link>
    <description>cs.LO updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.LO" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Nov 2024 05:00:10 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 21 Nov 2024 00:00:00 -0500</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Towards Automated Verification of Logarithmic Arithmetic</title>
      <link>https://arxiv.org/abs/2411.12923</link>
      <description>arXiv:2411.12923v1 Announce Type: new 
Abstract: Correctness proofs for floating point programs are difficult to verify. To simplify the task, a similar, but less complex system, known as logarithmic arithmetic can be used. The Boyer-Moore Theorem Prover, NQTHM, mechanically verified the correctness of a simple implementation of logarithmic arithmetic. It also verified some useful theorems about accumulated relative error bounds for addition, multiplication and division in this logarithmic number system. These theorems were used to verify a program that approximates e^x using a truncated Taylor series. Axioms that characterize the finite precision of the logarithmic system using a rational base, b, were shown by the prover to be satisfiable for any choice of 1 &lt; b &lt; 2. The prover verified the correctness of a function for converting an arbitrary rational value to a logarithmic representation. It also verified that multiplication and division implementations produce exact results for exact inputs, and that addition implementation produces a result as accurate as possible for exact inputs. When these operations are used in combination by a program, such as evaluating a polynomial, the relative error increases in a way that can be bounded by simple expressions, referred to here as tolerances. Several mechanically verified theorems about tolerances allow us to construct mechanically verified proofs about logarithmic arithmetic programs. Although similar to interval arithmetic, tolerances are especially suited to logarithmic arithmetic.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.12923v1</guid>
      <category>cs.LO</category>
      <category>cs.AR</category>
      <pubDate>Thu, 21 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Mark G. Arnold, Thomas A. Bailey, John R. Cowles</dc:creator>
    </item>
    <item>
      <title>An Expressive Trace Logic for Recursive Programs</title>
      <link>https://arxiv.org/abs/2411.13125</link>
      <description>arXiv:2411.13125v1 Announce Type: new 
Abstract: We present an expressive logic over trace formulas, based on binary state predicates, chop, and least fixed-points, for precise specification of programs with recursive procedures. Both, programs and trace formulas, are equipped with a direct-style, fully compositional, denotational semantics that on programs coincides with the standard SOS of recursive programs. We design a compositional proof calculus for proving finite-trace program properties, and prove soundness as well as (relative) completeness. We show that each program can be mapped to a semantics-preserving trace formula and, vice versa, each trace formula can be mapped to a canonical program over slightly extended programs, resulting in a Galois connection between programs and formulas. Our results shed light on the correspondence between programming constructs and logical connectives.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.13125v1</guid>
      <category>cs.LO</category>
      <category>cs.SE</category>
      <pubDate>Thu, 21 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Dilian Gurov, Reiner H\"ahnle</dc:creator>
    </item>
    <item>
      <title>Proceedings Sixth International Workshop on Formal Methods for Autonomous Systems</title>
      <link>https://arxiv.org/abs/2411.13215</link>
      <description>arXiv:2411.13215v1 Announce Type: new 
Abstract: This EPTCS volume contains the papers from the Sixth International Workshop on Formal Methods for Autonomous Systems (FMAS 2024), which was held between the 11th and 13th of November 2024. FMAS 2024 was co-located with 19th International Conference on integrated Formal Methods (iFM'24), hosted by the University of Manchester in the United Kingdom, in the University of Manchester's Core Technology Facility. 
</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.13215v1</guid>
      <category>cs.LO</category>
      <category>cs.AI</category>
      <category>cs.RO</category>
      <pubDate>Thu, 21 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.4204/EPTCS.411</arxiv:DOI>
      <arxiv:journal_reference>EPTCS 411, 2024</arxiv:journal_reference>
      <dc:creator>Matt Luckcuck (University of Nottingham, UK), Mengwei Xu (University of Newcastle, UK)</dc:creator>
    </item>
    <item>
      <title>Isomorphism Theorems between Models of Mixed Choice (Revised)</title>
      <link>https://arxiv.org/abs/2411.13500</link>
      <description>arXiv:2411.13500v1 Announce Type: new 
Abstract: We relate the so-called powercone models of mixed non-deterministic and probabilistic choice proposed by Tix, Keimel, Plotkin, Mislove, Ouaknine, Worrell, Morgan, and McIver, to our own models of previsions. Under suitable topological assumptions, we show that they are isomorphic. We rely on Keimel's cone-theoretic variants of the classical Hahn-Banach separation theorems, using functional analytic methods, and on the Schr\"oder-Simpson Theorem. Lemma 3.4 in the original 2017 version, published at MSCS, had a wrong proof, and we prove a repaired, albeit slightly less general version here.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.13500v1</guid>
      <category>cs.LO</category>
      <category>math.FA</category>
      <category>math.PR</category>
      <pubDate>Thu, 21 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Jean Goubault-Larrecq</dc:creator>
    </item>
    <item>
      <title>The Aldous--Hoover Theorem in Categorical Probability</title>
      <link>https://arxiv.org/abs/2411.12840</link>
      <description>arXiv:2411.12840v1 Announce Type: cross 
Abstract: The Aldous-Hoover Theorem concerns an infinite matrix of random variables whose distribution is invariant under finite permutations of rows and columns. It states that, up to equality in distribution, each random variable in the matrix can be expressed as a function only depending on four key variables: one common to the entire matrix, one that encodes information about its row, one that encodes information about its column, and a fourth one specific to the matrix entry.
  We state and prove the theorem within a category-theoretic approach to probability, namely the theory of Markov categories. This makes the proof more transparent and intuitive when compared to measure-theoretic ones. A key role is played by a newly identified categorical property, the Cauchy--Schwarz axiom, which also facilitates a new synthetic de Finetti Theorem.
  We further provide a variant of our proof using the ordered Markov property and the d-separation criterion, both generalized from Bayesian networks to Markov categories. We expect that this approach will facilitate a systematic development of more complex results in the future, such as categorical approaches to hierarchical exchangeability.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.12840v1</guid>
      <category>math.ST</category>
      <category>cs.LO</category>
      <category>math.CT</category>
      <category>math.PR</category>
      <category>stat.TH</category>
      <pubDate>Thu, 21 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Leihao Chen, Tobias Fritz, Tom\'a\v{s} Gonda, Andreas Klingler, Antonio Lorenzin</dc:creator>
    </item>
    <item>
      <title>An Abstract Domain for Heap Commutativity</title>
      <link>https://arxiv.org/abs/2411.12857</link>
      <description>arXiv:2411.12857v1 Announce Type: cross 
Abstract: Commutativity of program code (the equivalence of two code fragments composed in alternate orders) is of ongoing interest in many settings such as program verification, scalable concurrency, and security analysis. While some recent works have explored static analysis for code commutativity, few have specifically catered to heap-manipulating programs. We introduce an abstract domain in which commutativity synthesis or verification techniques can safely be performed on abstract mathematical models and, from those results, one can directly obtain commutativity conditions for concrete heap programs. This approach offloads challenges of concrete heap reasoning into the simpler abstract space. We show this reasoning supports framing and composition, and conclude with commutativity analysis of programs operating on example heap data structures. Our work has been mechanized in Coq and is available in the supplement.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.12857v1</guid>
      <category>cs.PL</category>
      <category>cs.LO</category>
      <pubDate>Thu, 21 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-nd/4.0/</dc:rights>
      <dc:creator>Jared Pincus, Eric Koskinen</dc:creator>
    </item>
    <item>
      <title>Proceedings Combined 31st International Workshop on Expressiveness in Concurrency and 21st Workshop on Structural Operational Semantics</title>
      <link>https://arxiv.org/abs/2411.13318</link>
      <description>arXiv:2411.13318v1 Announce Type: cross 
Abstract: This volume contains the proceedings of EXPRESS/SOS 2024: the Combined 31st International Workshop on Expressiveness in Concurrency and the 21st Workshop on Structural Operational Semantics, which was held in Calgary, Canada, as an affiliated workshop of CONFEST 2024. The EXPRESS/SOS workshop series aims at bringing together researchers interested in the formal semantics of systems and programming concepts, and in the expressiveness of computational models.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.13318v1</guid>
      <category>cs.FL</category>
      <category>cs.LO</category>
      <pubDate>Thu, 21 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.4204/EPTCS.412</arxiv:DOI>
      <arxiv:journal_reference>EPTCS 412, 2024</arxiv:journal_reference>
      <dc:creator>Georgiana Caltais (University of Twente), Cinzia Di Giusto (Universit\'e C\^ote d'Azur)</dc:creator>
    </item>
    <item>
      <title>Complete Test Suites for Automata in Monoidal Closed Categories</title>
      <link>https://arxiv.org/abs/2411.13412</link>
      <description>arXiv:2411.13412v1 Announce Type: cross 
Abstract: Conformance testing of automata is about checking the equivalence of a known specification and a black-box implementation. An important notion in conformance testing is that of a complete test suite, which guarantees that if an implementation satisfying certain conditions passes all tests, then it is equivalent to the specification.
  We introduce a framework for proving completeness of test suites at the general level of automata in monoidal closed categories. Moreover, we provide a generalization of a classical conformance testing technique, the W-method. We demonstrate the applicability of our results by recovering the W-method for deterministic finite automata, Moore machines, and Mealy machines, and by deriving new instances of complete test suites for weighted automata and deterministic nominal automata.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.13412v1</guid>
      <category>cs.FL</category>
      <category>cs.LO</category>
      <pubDate>Thu, 21 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-nd/4.0/</dc:rights>
      <dc:creator>B\'alint Kocsis, Jurriaan Rot</dc:creator>
    </item>
    <item>
      <title>A Demonic Outcome Logic for Randomized Nondeterminism</title>
      <link>https://arxiv.org/abs/2410.22540</link>
      <description>arXiv:2410.22540v2 Announce Type: replace 
Abstract: Programs increasingly rely on randomization in applications such as cryptography and machine learning. Analyzing randomized programs has been a fruitful research direction, but there is a gap when programs also exploit nondeterminism (for concurrency, efficiency, or algorithmic design). In this paper, we introduce Demonic Outcome Logic for reasoning about programs that exploit both randomization and nondeterminism. The logic includes several novel features, such as reasoning about multiple executions in tandem and manipulating pre- and postconditions using familiar equational laws -- including the distributive law of probabilistic choices over nondeterministic ones. We also give rules for loops that both establish termination and quantify the distribution of final outcomes from a single premise. We illustrate the reasoning capabilities of Demonic Outcome Logic through several case studies, including the Monty Hall problem, an adversarial protocol for simulating fair coins, and a heuristic based probabilistic SAT solver.</description>
      <guid isPermaLink="false">oai:arXiv.org:2410.22540v2</guid>
      <category>cs.LO</category>
      <category>cs.PL</category>
      <pubDate>Thu, 21 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.1145/3704855</arxiv:DOI>
      <arxiv:journal_reference>Proc. ACM Program. Lang. 9, POPL, Article 19 (January 2025)</arxiv:journal_reference>
      <dc:creator>Noam Zilberstein, Dexter Kozen, Alexandra Silva, Joseph Tassarotti</dc:creator>
    </item>
    <item>
      <title>Soda: An Object-Oriented Functional Language for Specifying Human-Centered Problems</title>
      <link>https://arxiv.org/abs/2310.01961</link>
      <description>arXiv:2310.01961v2 Announce Type: replace-cross 
Abstract: We present Soda (Symbolic Objective Descriptive Analysis), a language that helps to treat qualities and quantities in a natural way and greatly simplifies the task of checking their correctness. We present key properties for the language motivated by the design of a descriptive language to encode complex requirements on computer systems, and we explain how these key properties must be addressed to model these requirements with simple definitions. We give an overview of a tool that helps to describe problems in an easy way that we consider more transparent and less error-prone.</description>
      <guid isPermaLink="false">oai:arXiv.org:2310.01961v2</guid>
      <category>cs.PL</category>
      <category>cs.AI</category>
      <category>cs.LO</category>
      <pubDate>Thu, 21 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Julian Alfredo Mendez</dc:creator>
    </item>
    <item>
      <title>Reflections on Russell's antinomy</title>
      <link>https://arxiv.org/abs/2409.05903</link>
      <description>arXiv:2409.05903v2 Announce Type: replace-cross 
Abstract: We present Russell's antinomy using three distinct deductive systems, which are then compared to deepen the logical deductions that lead to the contradiction. Some inferential paths are then presented, alternative to the commonly accepted one, that allow for the formal assertion of the antinomy without deriving the contradiction, thus preserving the coherence of the system. In light of this, the purpose of this article is to propose a review of the consequences of asserting Russell's antinomy and, by extension, the widespread belief that any attempt to resolve a paradox is doomed to failure.</description>
      <guid isPermaLink="false">oai:arXiv.org:2409.05903v2</guid>
      <category>math.LO</category>
      <category>cs.LO</category>
      <pubDate>Thu, 21 Nov 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-nd/4.0/</dc:rights>
      <dc:creator>Paola Cattabriga</dc:creator>
    </item>
  </channel>
</rss>
