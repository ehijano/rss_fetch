<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.DM updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.DM</link>
    <description>cs.DM updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.DM" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Oct 2025 02:08:13 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Tue, 30 Sep 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Parameterized Hardness of Zonotope Containment and Neural Network Verification</title>
      <link>https://arxiv.org/abs/2509.22849</link>
      <description>arXiv:2509.22849v1 Announce Type: cross 
Abstract: Neural networks with ReLU activations are a widely used model in machine learning. It is thus important to have a profound understanding of the properties of the functions computed by such networks. Recently, there has been increasing interest in the (parameterized) computational complexity of determining these properties. In this work, we close several gaps and resolve an open problem posted by Froese et al. [COLT '25] regarding the parameterized complexity of various problems related to network verification. In particular, we prove that deciding positivity (and thus surjectivity) of a function $f\colon\mathbb{R}^d\to\mathbb{R}$ computed by a 2-layer ReLU network is W[1]-hard when parameterized by $d$. This result also implies that zonotope (non-)containment is W[1]-hard with respect to $d$, a problem that is of independent interest in computational geometry, control theory, and robotics. Moreover, we show that approximating the maximum within any multiplicative factor in 2-layer ReLU networks, computing the $L_p$-Lipschitz constant for $p\in(0,\infty]$ in 2-layer networks, and approximating the $L_p$-Lipschitz constant in 3-layer networks are NP-hard and W[1]-hard with respect to $d$. Notably, our hardness results are the strongest known so far and imply that the naive enumeration-based methods for solving these fundamental problems are all essentially optimal under the Exponential Time Hypothesis.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.22849v1</guid>
      <category>cs.CC</category>
      <category>cs.DM</category>
      <category>cs.LG</category>
      <category>cs.NE</category>
      <pubDate>Tue, 30 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Vincent Froese, Moritz Grillo, Christoph Hertrich, Moritz Stargalla</dc:creator>
    </item>
    <item>
      <title>Diameter Bounds for Friends-and-Strangers Graphs</title>
      <link>https://arxiv.org/abs/2509.23511</link>
      <description>arXiv:2509.23511v1 Announce Type: cross 
Abstract: Consider two $n$-vertex graphs $X$ and $Y$, where we interpret $X$ as a social network with edges representing friendships and $Y$ as a movement graph with edges representing adjacent positions. The friends-and-strangers graph $\mathsf{FS}(X,Y)$ is a graph on the $n!$ permutations $V(X)\to V(Y)$, where two configurations are adjacent if and only if one can be obtained from the other by swapping two friends located on adjacent positions.
  Friends-and-strangers graphs were first introduced by Defant and Kravitz, and generalize sliding puzzles as well as token swapping problems. Previous work has largely focused on their connectivity properties. In this paper, we study the diameter of the connected components of $\mathsf{FS}(X, Y)$. Our main result shows that when the underlying friendship graph is a star with $n$ vertices, the friends-and-strangers graph has components of diameter $O(n^4)$. This implies, in particular, that sliding puzzles are always solvable in polynomially many moves. Our work also provides explicit efficient algorithms for finding these solutions.
  We then extend our results to general graphs in two ways. First, we show that the diameter is polynomially bounded when both the friendship and the movement graphs have large minimum degree. Second, when both the underlying graphs $X$ and $Y$ are Erd\H{o}s-R\'{e}nyi random graphs, we show that the distance between any pair of configurations is almost always polynomially bounded under certain conditions on the edge probabilities.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.23511v1</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <category>math.PR</category>
      <pubDate>Tue, 30 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Amogh Akella, Rupert Li</dc:creator>
    </item>
    <item>
      <title>Optimally revealing bits for rejection sampling</title>
      <link>https://arxiv.org/abs/2509.24290</link>
      <description>arXiv:2509.24290v1 Announce Type: cross 
Abstract: Rejection sampling is a popular method used to generate numbers that follow some given distribution. We study the use of this method to generate random numbers in the unit interval from increasing probability density functions. We focus on the problem of sampling from $n$ correlated random variables from a joint distribution whose marginal distributions are all increasing. We show that, in the worst case, the expected number of random bits required to accept or reject a sample grows at least linearly and at most quadratically with $n$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.24290v1</guid>
      <category>cs.DS</category>
      <category>cs.DM</category>
      <category>cs.IT</category>
      <category>math.IT</category>
      <category>math.PR</category>
      <pubDate>Tue, 30 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Louis-Roy Langevin, Alex Waese-Perlman</dc:creator>
    </item>
    <item>
      <title>Tree-based formulation for the multi-commodity flow problem</title>
      <link>https://arxiv.org/abs/2509.24656</link>
      <description>arXiv:2509.24656v1 Announce Type: cross 
Abstract: We introduce a tree-based formulation for the minimum-cost multi-commodity flow problem that addresses large-scale instances. The method decomposes the source-based model by representing flows as convex combinations of trees rooted at source nodes, and solves the resulting formulation with column generation. The number of demand constraints now depends on the number of sources $|S|$, not commodities $|K|$, yielding a compact master problem when $|S| \ll |K|$. We conduct a computational study comparing tree-based decomposition against path-based column generation and direct LP solving. The results show speed-ups of up to one order of magnitude over direct LP solving, and improved scalability compared to path-based formulations. Tree-based decomposition enables solving instances with millions of commodities and hundreds of thousands of nodes. This makes it well-suited for applications in transportation and logistics networks where multiple demands often share common origins.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.24656v1</guid>
      <category>math.OC</category>
      <category>cs.DM</category>
      <pubDate>Tue, 30 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Simon Spoorendonk, Bj{\o}rn Petersen</dc:creator>
    </item>
    <item>
      <title>Exercises in Iterational Asymptotics IV</title>
      <link>https://arxiv.org/abs/2509.24918</link>
      <description>arXiv:2509.24918v1 Announce Type: cross 
Abstract: Abel's functional equation for $2^{x/2}$ and half-iterates of $\lambda x (1-x)$ &amp; $\sqrt{1+x}$ are featured in this collection of exercises ($0 &lt; \lambda \neq 1 &lt; 2$).</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.24918v1</guid>
      <category>math.NT</category>
      <category>cs.DM</category>
      <pubDate>Tue, 30 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Steven Finch</dc:creator>
    </item>
    <item>
      <title>The Popular Dimension of Matchings</title>
      <link>https://arxiv.org/abs/2509.25150</link>
      <description>arXiv:2509.25150v1 Announce Type: cross 
Abstract: We study popular matchings in three classical settings: the house allocation problem, the marriage problem, and the roommates problem. In the popular matching problem, (a subset of) the vertices in a graph have preference orderings over their potential matches. A matching is popular if it gets a plurality of votes in a pairwise election against any other matching. Unfortunately, popular matchings typically do not exist. So we study a natural relaxation, namely popular winning sets which are a set of matchings that collectively get a plurality of votes in a pairwise election against any other matching. The $\textit{popular dimension}$ is the minimum cardinality of a popular winning set, in the worst case over the problem class.
  We prove that the popular dimension is exactly $2$ in the house allocation problem, even if the voters are weighted and ties are allowed in their preference lists. For the marriage problem and the roommates problem, we prove that the popular dimension is between $2$ and $3$, when the agents are weighted and/or their preferences orderings allow ties. In the special case where the agents are unweighted and have strict preference orderings, the popular dimension of the marriage problem is known to be exactly $1$ and we prove the popular dimension of the roommates problem is exactly $2$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.25150v1</guid>
      <category>cs.GT</category>
      <category>cs.DM</category>
      <category>cs.DS</category>
      <category>math.CO</category>
      <pubDate>Tue, 30 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Frank Connor, Louis-Roy Langevin, Ndiam\'e Ndiaye, Agn\`es Totschnig, Rohit Vasishta, Adrian Vetta</dc:creator>
    </item>
    <item>
      <title>Gromov's Approximating Tree and the All-Pairs Bottleneck Paths Problem</title>
      <link>https://arxiv.org/abs/2408.05338</link>
      <description>arXiv:2408.05338v2 Announce Type: replace-cross 
Abstract: Given a pointed metric space $(X,\mathsf{dist}, w)$ on $n$ points, its Gromov's approximating tree is a 0-hyperbolic pseudo-metric space $(X,\mathsf{dist}_T)$ such that $\mathsf{dist}(x,w)=\mathsf{dist}_T(x,w)$ and $\mathsf{dist}(x, y)-2 \delta \log_2n \leq \mathsf{dist}_T (x, y) \leq \mathsf{dist}(x, y)$ for all $x, y \in X$ where $\delta$ is the Gromov hyperbolicity of $X$. On the other hand, the all pairs bottleneck paths (APBP) problem asks, given an undirected graph with some capacities on its edges, to find the maximal path capacity between each pair of vertices. In this note, we prove:
  $\bullet$ Computing Gromov's approximating tree for a metric space with $n+1$ points from its matrix of distances reduces to solving the APBP problem on an connected graph with $n$ vertices.
  $\bullet$ There is an explicit algorithm that computes Gromov's approximating tree for a graph from its adjacency matrix in quadratic time.
  $\bullet$ Solving the APBP problem on a weighted graph with $n$ vertices reduces to finding Gromov's approximating tree for a metric space with $n+1$ points from its distance matrix.</description>
      <guid isPermaLink="false">oai:arXiv.org:2408.05338v2</guid>
      <category>cs.CG</category>
      <category>cs.CC</category>
      <category>cs.DM</category>
      <category>math.CO</category>
      <category>math.OC</category>
      <pubDate>Tue, 30 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Anders Cornect, Eduardo Mart\'inez-Pedroza</dc:creator>
    </item>
    <item>
      <title>Interaction graphs of isomorphic automata networks II: universal dynamics</title>
      <link>https://arxiv.org/abs/2409.08041</link>
      <description>arXiv:2409.08041v2 Announce Type: replace-cross 
Abstract: An automata network with $n$ components over a finite alphabet $Q$ of size $q$ is a discrete dynamical system described by the successive iterations of a function $f:Q^n\to Q^n$. In most applications, the main parameter is the interaction graph of $f$: the digraph with vertex set $[n]$ that contains an arc from $j$ to $i$ if $f_i$ depends on input $j$. What can be said on the set $\mathbb{G}(f)$ of the interaction graphs of the automata networks isomorphic to $f$? It seems that this simple question has never been studied. In a previous paper, we prove that the complete digraph $K_n$, with $n^2$ arcs, is universal in that $K_n\in \mathbb{G}(f)$ whenever $f$ is not constant nor the identity (and $n\geq 5$). In this paper, taking the opposite direction, we prove that there exist universal automata networks $f$, in that $\mathbb{G}(f)$ contains all the digraphs on $[n]$, excepted the empty one. Actually, we prove that the presence of only three specific digraphs in $\mathbb{G}(f)$ implies the universality of $f$, and we prove that this forces the alphabet size $q$ to have at least $n$ prime factors (with multiplicity). However, we prove that for any fixed $q\geq 3$, there exists almost universal functions, that is, functions $f:Q^n\to Q^n$ such that the probability that a random digraph belongs to $\mathbb{G}(f)$ tends to $1$ as $n\to\infty$. We do not know if this holds in the binary case $q=2$, providing only partial results.</description>
      <guid isPermaLink="false">oai:arXiv.org:2409.08041v2</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <pubDate>Tue, 30 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-sa/4.0/</dc:rights>
      <dc:creator>Florian Bridoux, Aymeric Picard Marchetto, Adrien Richard</dc:creator>
    </item>
    <item>
      <title>A Polynomial Kernel for Deletion to the Scattered Class of Cliques and Trees</title>
      <link>https://arxiv.org/abs/2409.14209</link>
      <description>arXiv:2409.14209v2 Announce Type: replace-cross 
Abstract: The class of graph deletion problems has been extensively studied in theoretical computer science, particularly in the field of parameterized complexity. Recently, a new notion of graph deletion problems was introduced, called deletion to scattered graph classes, where after deletion, each connected component of the graph should belong to at least one of the given graph classes. While fixed-parameter algorithms were given for a wide variety of problems, little progress has been made on the kernelization complexity of any of them. In this paper, we present the first non-trivial polynomial kernel for one such deletion problem, where, after deletion, each connected component should be a clique or a tree - that is, as densest as possible or as sparsest as possible (while being connected). We develop a kernel consisting of O(k^5) vertices for this problem.</description>
      <guid isPermaLink="false">oai:arXiv.org:2409.14209v2</guid>
      <category>cs.DS</category>
      <category>cs.DM</category>
      <pubDate>Tue, 30 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <arxiv:DOI>10.4230/LIPIcs.ISAAC.2024.41</arxiv:DOI>
      <dc:creator>Ashwin Jacob, Diptapriyo Majumdar, Meirav Zehavi</dc:creator>
    </item>
    <item>
      <title>Enumerating all geodesics</title>
      <link>https://arxiv.org/abs/2409.16955</link>
      <description>arXiv:2409.16955v3 Announce Type: replace-cross 
Abstract: By "geodesic" we mean any sequence of vertices $(v_1,v_2,...,v_k)$ of a graph $G$ that constitute a shortest path from $v_1$ to $v_k$. We propose a novel, natural algorithm to enumerate all geodesics of $G$, and pit it (using Mathematica) against the standard procedure for the task. The distance matrix $D(G)$ plays a crucial role in this. In fact, part of our article is devoted to survey its many uses in related tasks.</description>
      <guid isPermaLink="false">oai:arXiv.org:2409.16955v3</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <pubDate>Tue, 30 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Marcel Wild</dc:creator>
    </item>
  </channel>
</rss>
