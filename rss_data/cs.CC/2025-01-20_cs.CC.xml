<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.CC updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.CC</link>
    <description>cs.CC updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.CC" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Jan 2025 05:00:03 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Mon, 20 Jan 2025 00:00:00 -0500</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>On the Complexity of p-Order Cone Programs</title>
      <link>https://arxiv.org/abs/2501.09828</link>
      <description>arXiv:2501.09828v1 Announce Type: cross 
Abstract: This manuscript explores novel complexity results for the feasibility problem over $p$-order cones, extending the foundational work of Porkolab and Khachiyan. By leveraging the intrinsic structure of $p$-order cones, we derive refined complexity bounds that surpass those obtained via standard semidefinite programming reformulations. Our analysis not only improves theoretical bounds but also provides practical insights into the computational efficiency of solving such problems. In addition to establishing complexity results, we derive explicit bounds for solutions when the feasibility problem admits one. For infeasible instances, we analyze their discrepancy quantifying the degree of infeasibility. Finally, we examine specific cases of interest, highlighting scenarios where the geometry of $p$-order cones or problem structure yields further computational simplifications. These findings contribute to both the theoretical understanding and practical tractability of optimization problems involving $p$-order cones.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.09828v1</guid>
      <category>math.OC</category>
      <category>cs.CC</category>
      <pubDate>Mon, 20 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>V\'ictor Blanco, Victor Magron, Miguel Mart\'inez-Ant\'on</dc:creator>
    </item>
    <item>
      <title>On Approximability of Steiner Tree in $\ell_p$-metrics</title>
      <link>https://arxiv.org/abs/2306.02189</link>
      <description>arXiv:2306.02189v3 Announce Type: replace 
Abstract: In the Continuous Steiner Tree problem (CST), we are given as input a set of points (called terminals) in a metric space and ask for the minimum-cost tree connecting them. Additional points (called Steiner points) from the metric space can be introduced as nodes in the solution. In the Discrete Steiner Tree problem (DST), we are given in addition to the terminals, a set of facilities, and any solution tree connecting the terminals can only contain the Steiner points from this set of facilities.
  Trevisan [SICOMP'00] showed that CST and DST are APX-hard when the input lies in the $\ell_1$-metric (and Hamming metric). Chleb\'ik and Chleb\'ikov\'a [TCS'08] showed that DST is NP-hard to approximate to factor of $96/95\approx 1.01$ in the graph metric (and consequently $\ell_\infty$-metric). Prior to this work, it was unclear if CST and DST are APX-hard in essentially every other popular metric.
  In this work, we prove that DST is APX-hard in every $\ell_p$-metric. We also prove that CST is APX-hard in the $\ell_{\infty}$-metric. Finally, we relate CST and DST, showing a general reduction from CST to DST in $\ell_p$-metrics.</description>
      <guid isPermaLink="false">oai:arXiv.org:2306.02189v3</guid>
      <category>cs.CC</category>
      <category>cs.CG</category>
      <category>cs.DS</category>
      <pubDate>Mon, 20 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.46298/theoretics.25.4</arxiv:DOI>
      <arxiv:journal_reference>TheoretiCS, Volume 4 (2025), Article 4, 1-53</arxiv:journal_reference>
      <dc:creator>Henry Fleischmann, Surya Teja Gavva, Karthik C. S</dc:creator>
    </item>
    <item>
      <title>Quantum and classical query complexities of functions of matrices</title>
      <link>https://arxiv.org/abs/2311.06999</link>
      <description>arXiv:2311.06999v3 Announce Type: replace-cross 
Abstract: Let $A$ be an $s$-sparse Hermitian matrix, $f(x)$ be a univariate function, and $i, j$ be two indices. In this work, we investigate the query complexity of approximating $\bra{i} f(A) \ket{j}$. We show that for any continuous function $f(x):[-1,1]\rightarrow [-1,1]$, the quantum query complexity of computing $\bra{i} f(A) \ket{j}\pm \varepsilon/4$ is lower bounded by $\Omega(\widetilde{\deg}_\varepsilon(f))$. The upper bound is at most quadratic in $\widetilde{\deg}_\varepsilon(f)$ and is linear in $\widetilde{\deg}_\varepsilon(f)$ under certain mild assumptions on $A$. Here the approximate degree $\widetilde{\deg}_\varepsilon(f)$ is the minimum degree such that there is a polynomial of that degree approximating $f$ up to additive error $\varepsilon$ in the interval $[-1,1]$. We also show that the classical query complexity is lower bounded by $\widetilde{\Omega}((s/2)^{(\widetilde{\deg}_{2\varepsilon}(f)-1)/6})$ for any $s\geq 4$. Our results show that the quantum and classical separation is exponential for any continuous function of sparse Hermitian matrices, and also imply the optimality of implementing smooth functions of sparse Hermitian matrices by quantum singular value transformation. As another hardness result, we show that entry estimation problem (i.e., deciding $\bra{i} f(A) \ket{j}\geq \varepsilon$ or $\bra{i} f(A) \ket{j}\leq -\varepsilon$) is BQP-complete for any continuous function $f(x)$ as long as its approximate degree is large enough. The main techniques we used are the dual polynomial method for functions over the reals, linear semi-infinite programming, and tridiagonal matrices.</description>
      <guid isPermaLink="false">oai:arXiv.org:2311.06999v3</guid>
      <category>quant-ph</category>
      <category>cs.CC</category>
      <pubDate>Mon, 20 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.1145/3618260.3649665</arxiv:DOI>
      <arxiv:journal_reference>in Proc. STOC 2024</arxiv:journal_reference>
      <dc:creator>Ashley Montanaro, Changpeng Shao</dc:creator>
    </item>
    <item>
      <title>An alternative explicit circuit diagram for the quantum search algorithm by implementing a non-unitary gate</title>
      <link>https://arxiv.org/abs/2412.16514</link>
      <description>arXiv:2412.16514v4 Announce Type: replace-cross 
Abstract: Since the final quantum state in the Grover search algorithm is the normalized marked quantum state in the Gram-Schmidt process, Abrams and Lloyd[1] has showed that we can generate this vector by using a non-unitary gate. Following their ideas, in this paper, we present multiple explicit unitary implementations by using the square root of the non-unitary matrix and by a unitary matrix that mimics the Gram-Schmidt process. We also discuss the implementation through a linear combination of unitary matrices or similar methods and how these approximations may change the complexity. The reading of the marked element from the given circuits with high probability still requires repetitions similar to the original algorithm. However, it gives an alternative implementations which may be useful in certain platforms</description>
      <guid isPermaLink="false">oai:arXiv.org:2412.16514v4</guid>
      <category>quant-ph</category>
      <category>cs.CC</category>
      <pubDate>Mon, 20 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Ammar Daskin</dc:creator>
    </item>
  </channel>
</rss>
