<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.DM updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.DM</link>
    <description>cs.DM updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.DM" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Dec 2024 05:00:14 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Wed, 04 Dec 2024 00:00:00 -0500</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>A Second Soul: Celebrating the Many Languages of Programming -- Festschrift in Honor of Peter Thiemann's Sixtieth Birthday</title>
      <link>https://arxiv.org/abs/2412.01856</link>
      <description>arXiv:2412.01856v1 Announce Type: cross 
Abstract: This Festschrift is dedicated to Peter Thiemann on the occasion of his sixtieth birthday, celebrating his significant contributions to the field of programming languages. Over the span of more than three decades, Peter has worked on a wide array of topics. This collection of five articles reflects the diversity of his work. The articles cover areas such as partial evaluation and reversible programming, proof assistants and dependent types, discrete mathematics and dynamic programming, functional and object-oriented programming.</description>
      <guid isPermaLink="false">oai:arXiv.org:2412.01856v1</guid>
      <category>cs.PL</category>
      <category>cs.DM</category>
      <category>cs.LO</category>
      <pubDate>Wed, 04 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.4204/EPTCS.413</arxiv:DOI>
      <arxiv:journal_reference>EPTCS 413, 2024</arxiv:journal_reference>
      <dc:creator>Annette Bieniusa (University of Kaiserslautern-Landau), Markus Degen (University of Applied Sciences Augsburg), Stefan Wehr (University of Applied Sciences Offenburg)</dc:creator>
    </item>
    <item>
      <title>Approximately Optimal Search on a Higher-dimensional Sliding Puzzle</title>
      <link>https://arxiv.org/abs/2412.01937</link>
      <description>arXiv:2412.01937v1 Announce Type: cross 
Abstract: Higher-dimensional sliding puzzles are constructed on the vertices of a $d$-dimensional hypercube, where $2^d-l$ vertices are distinctly coloured. Rings with the same colours are initially set randomly on the vertices of the hypercube. The goal of the puzzle is to move each of the $2^d-l$ rings to pre-defined target vertices on the cube. In this setting, the $k$-rule constraint represents a generalisation of edge collision for the movement of colours between vertices, allowing movement only when a hypercube face of dimension $k$ containing a ring is completely free of other rings. Starting from an initial configuration, what is the minimum number of moves needed to make ring colours match the vertex colours? An algorithm that provides us with such a number is called God's algorithm. When such an algorithm exists, it does not have a polynomial time complexity, at least in the case of the 15-puzzle corresponding to $k=1$ in the cubical puzzle. This paper presents a comprehensive computational study of different scenarios of the higher-dimensional puzzle. A benchmark of three computational techniques, an exact algorithm (the A* search) and two approximately optimal search techniques (an evolutionary algorithm (EA) and reinforcement learning (RL)) is presented in this work. The experiments show that all three methods can successfully solve the puzzle of dimension three for different face dimensions and across various difficulty levels. When the dimension increases, the A* search fails, and RL and EA methods can still provide a generally acceptable solution, i.e. a distribution of a number of moves with a median value of less than $30$. Overall, the EA method consistently requires less computational time, while failing in most cases to minimise the number of moves for the puzzle dimensions $d=4$ and $d=5$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2412.01937v1</guid>
      <category>cs.AI</category>
      <category>cs.DM</category>
      <category>cs.LG</category>
      <category>cs.NE</category>
      <pubDate>Wed, 04 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Nono SC Merleau, Miguel O'Malley, \'Erika Rold\'an, Sayan Mukherjee</dc:creator>
    </item>
    <item>
      <title>Vanishing of Schubert Coefficients</title>
      <link>https://arxiv.org/abs/2412.02064</link>
      <description>arXiv:2412.02064v1 Announce Type: cross 
Abstract: Schubert coefficients are nonnegative integers $c^w_{u,v}$ that arise in Algebraic Geometry and play a central role in Algebraic Combinatorics. It is a major open problem whether they have a combinatorial interpretation, i.e, whether $c^w_{u,v} \in \#{\sf P}$. We study the closely related vanishing problem of Schubert coefficients: $\{c^w_{u,v}=^?0\}$. Until this work it was open whether this problem is in the polynomial hierarchy ${\sf PH}$. We prove that $\{c^w_{u,v}=^?0\}$ in ${\sf coAM}$ assuming the GRH. In particular, the vanishing problem is in ${\Sigma_2^{{\text{p}}}}$. Our approach is based on constructions lifted formulations, which give polynomial systems of equations for the problem. The result follows from a reduction to Parametric Hilbert's Nullstellensatz, recently studied in arXiv:2408.13027. We apply our construction to show that the vanishing problem is in ${\sf NP}_{\mathbb{C}} \cap {\sf P}_{\mathbb{R}}$ in the Blum--Shub--Smale (BSS) model of computation over complex and real numbers respectively. Similarly, we prove that computing Schubert coefficients is in $\#{\sf P}_{\mathbb{C}}$, a counting version of the BSS model. We also extend our results to classical types. With one notable exception of the vanishing problem in type $D$, all our results extend to all types.</description>
      <guid isPermaLink="false">oai:arXiv.org:2412.02064v1</guid>
      <category>math.CO</category>
      <category>cs.CC</category>
      <category>cs.DM</category>
      <category>math.AG</category>
      <pubDate>Wed, 04 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Igor Pak, Colleen Robichaux</dc:creator>
    </item>
    <item>
      <title>Algebraic properties of Indigenous semirings</title>
      <link>https://arxiv.org/abs/2412.02118</link>
      <description>arXiv:2412.02118v1 Announce Type: cross 
Abstract: In this paper, we introduce Indigenous semirings and show that they are examples of information algebras. We also attribute a graph to them and discuss their diameters, girths, and clique numbers. Then, we proceed to investigate their algebraic properties (including ideal theory). We also characterize units and idempotent elements of formal power series over Indigenous semirings.</description>
      <guid isPermaLink="false">oai:arXiv.org:2412.02118v1</guid>
      <category>math.AC</category>
      <category>cs.DM</category>
      <category>math.RA</category>
      <pubDate>Wed, 04 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Hussein Behzadipour, Henk Koppelaar, Peyman Nasehpour</dc:creator>
    </item>
    <item>
      <title>A bound for the cops and robber problem in terms of 2-component order connectivity</title>
      <link>https://arxiv.org/abs/2412.02511</link>
      <description>arXiv:2412.02511v1 Announce Type: cross 
Abstract: In the cops and robber game, there are multiple cops and a single robber taking turns moving along the edges of a graph. The goal of the cops is to capture the robber (move to the same vertex as the robber) and the goal of the robber is to avoid capture. The cop number of a given graph is the smallest number of cops required to ensure the capture of the robber. The k-component order connectivity of a graph G = (V, E) is the size of a smallest set U, such that all the connected components of the induced graph on V \ U are of size at most k. In this brief note, we provide a bound on the cop number of graphs in terms of their 2-component order connectivity.</description>
      <guid isPermaLink="false">oai:arXiv.org:2412.02511v1</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <pubDate>Wed, 04 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Suryaansh Jain, Subrahmanyam Kalyanasundaram, Kartheek Sriram Tammana</dc:creator>
    </item>
    <item>
      <title>Cautious Optimizers: Improving Training with One Line of Code</title>
      <link>https://arxiv.org/abs/2411.16085</link>
      <description>arXiv:2411.16085v2 Announce Type: replace-cross 
Abstract: AdamW has been the default optimizer for transformer pretraining. For many years, our community searches for faster and more stable optimizers with only constraint positive outcomes. In this work, we propose a \textbf{single-line modification in Pytorch} to any momentum-based optimizer, which we rename Cautious Optimizer, e.g. C-AdamW and C-Lion. Our theoretical result shows that this modification preserves Adam's Hamiltonian function and it does not break the convergence guarantee under the Lyapunov analysis. In addition, a whole new family of optimizers is revealed by our theoretical insight. Among them, we pick the simplest one for empirical experiments, showing speed-up on Llama and MAE pretraining up to $1.47\times$. Code is available at https://github.com/kyleliang919/C-Optim</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.16085v2</guid>
      <category>cs.LG</category>
      <category>cs.AI</category>
      <category>cs.CL</category>
      <category>cs.CV</category>
      <category>cs.DM</category>
      <pubDate>Wed, 04 Dec 2024 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Kaizhao Liang, Lizhang Chen, Bo Liu, Qiang Liu</dc:creator>
    </item>
  </channel>
</rss>
