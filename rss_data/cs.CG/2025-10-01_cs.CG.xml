<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.CG updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.CG</link>
    <description>cs.CG updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.CG" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Oct 2025 01:49:24 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Wed, 01 Oct 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>PFDepth: Heterogeneous Pinhole-Fisheye Joint Depth Estimation via Distortion-aware Gaussian-Splatted Volumetric Fusion</title>
      <link>https://arxiv.org/abs/2509.26008</link>
      <description>arXiv:2509.26008v1 Announce Type: cross 
Abstract: In this paper, we present the first pinhole-fisheye framework for heterogeneous multi-view depth estimation, PFDepth. Our key insight is to exploit the complementary characteristics of pinhole and fisheye imagery (undistorted vs. distorted, small vs. large FOV, far vs. near field) for joint optimization. PFDepth employs a unified architecture capable of processing arbitrary combinations of pinhole and fisheye cameras with varied intrinsics and extrinsics. Within PFDepth, we first explicitly lift 2D features from each heterogeneous view into a canonical 3D volumetric space. Then, a core module termed Heterogeneous Spatial Fusion is designed to process and fuse distortion-aware volumetric features across overlapping and non-overlapping regions. Additionally, we subtly reformulate the conventional voxel fusion into a novel 3D Gaussian representation, in which learnable latent Gaussian spheres dynamically adapt to local image textures for finer 3D aggregation. Finally, fused volume features are rendered into multi-view depth maps. Through extensive experiments, we demonstrate that PFDepth sets a state-of-the-art performance on KITTI-360 and RealHet datasets over current mainstream depth networks. To the best of our knowledge, this is the first systematic study of heterogeneous pinhole-fisheye depth estimation, offering both technical novelty and valuable empirical insights.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.26008v1</guid>
      <category>cs.CV</category>
      <category>cs.AI</category>
      <category>cs.CG</category>
      <pubDate>Wed, 01 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-sa/4.0/</dc:rights>
      <arxiv:DOI>10.1145/3746027.3755159</arxiv:DOI>
      <dc:creator>Zhiwei Zhang, Ruikai Xu, Weijian Zhang, Zhizhong Zhang, Xin Tan, Jingyu Gong, Yuan Xie, Lizhuang Ma</dc:creator>
    </item>
    <item>
      <title>Analytic Conditions for Differentiable Collision Detection in Trajectory Optimization</title>
      <link>https://arxiv.org/abs/2509.26459</link>
      <description>arXiv:2509.26459v1 Announce Type: cross 
Abstract: Optimization-based methods are widely used for computing fast, diverse solutions for complex tasks such as collision-free movement or planning in the presence of contacts. However, most of these methods require enforcing non-penetration constraints between objects, resulting in a non-trivial and computationally expensive problem. This makes the use of optimization-based methods for planning and control challenging. In this paper, we present a method to efficiently enforce non-penetration of sets while performing optimization over their configuration, which is directly applicable to problems like collision-aware trajectory optimization. We introduce novel differentiable conditions with analytic expressions to achieve this. To enforce non-collision between non-smooth bodies using these conditions, we introduce a method to approximate polytopes as smooth semi-algebraic sets. We present several numerical experiments to demonstrate the performance of the proposed method and compare the performance with other baseline methods recently proposed in the literature.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.26459v1</guid>
      <category>cs.RO</category>
      <category>cs.CG</category>
      <pubDate>Wed, 01 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Akshay Jaitly, Devesh K. Jha, Kei Ota, Yuki Shirai</dc:creator>
    </item>
    <item>
      <title>Sweeping Orders for Simplicial Complex Reconstruction</title>
      <link>https://arxiv.org/abs/2501.01901</link>
      <description>arXiv:2501.01901v2 Announce Type: replace 
Abstract: Standard sweep algorithms require an order of discrete points in Euclidean space, and rely on the property that, at a given point, all points in the halfspace below come earlier in this order. We are motivated by the problem of reconstructing a graph in $\mathbb{R}^d$ from vertex locations and degree information, which was addressed using standard sweep algorithms by Fasy et al. We generalize this to the reconstruction of general simplicial complexes. As our main ingredient, we introduce a generalized \emph{sweeping order} on $i$-simplices, maintaining the property that, at a given $i$-simplex $\sigma$, all $(i+1)$-dimensional cofaces of $\sigma$ in the halfspace below $\sigma$ have an $i$-dimensional face that appeared earlier in the order ("below" with respect to some direction perpendicular to $\sigma$).
  We then go on to incorporate computing such sweeping orders to reconstruct an unknown simplicial complex $K$, starting with only its vertex locations, i.e., its $0$-skeleton. Specifically, once we have found the $i$-skeleton of $K$, we compute a sweeping order for the $i$-simplices, and use it to reconstruct the $(i+1)$-skeleton of $K$ by querying the \emph{indegree}, or the number of $(i+1)$-simplices incident to and below a given $i$-simplex. In addition to generalizing the algorithm by Fasy et al. to simplicial complexes, we improve upon the running time of their central subroutine of radially finding edges above a vertex.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.01901v2</guid>
      <category>cs.CG</category>
      <pubDate>Wed, 01 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Tim Ophelders, Anna Schenfisch</dc:creator>
    </item>
    <item>
      <title>Comparison of nested geometry treatments within GPU-based Monte Carlo neutron transport simulations of fission reactors</title>
      <link>https://arxiv.org/abs/2406.13849</link>
      <description>arXiv:2406.13849v2 Announce Type: replace-cross 
Abstract: Monte Carlo (MC) neutron transport provides detailed estimates of radiological quantities within fission reactors. This involves tracking individual neutrons through a computational geometry. CPU-based MC codes use multiple polymorphic tracker types with different tracking algorithms to exploit the repeated configurations of reactors, but virtual function calls have high overhead on the GPU. The Shift MC code was modified to support GPU-based tracking with three strategies: dynamic polymorphism with virtual functions, static polymorphism, and a single tracker type with tree-based acceleration. On the Frontier supercomputer these methods achieve 77.8%, 91.2%, and 83.4%, respectively, of the tracking rate obtained using a specialized tracker optimized for rectilinear-grid-based reactors. This indicates that all three methods are suitable for typical reactor problems in which tracking does not dominate runtime. The flexibility of the single tracker method is highlighted with a hexagonal-grid microreactor problem, performed without hexagonal-grid-specific tracking routines, providing a 2.19$\times$ speedup over CPU execution.</description>
      <guid isPermaLink="false">oai:arXiv.org:2406.13849v2</guid>
      <category>cs.DC</category>
      <category>cs.CE</category>
      <category>cs.CG</category>
      <pubDate>Wed, 01 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <arxiv:DOI>10.1177/10943420251377295</arxiv:DOI>
      <dc:creator>Elliott Biondo, Thomas Evans, Seth Johnson, Steven Hamilton</dc:creator>
    </item>
  </channel>
</rss>
