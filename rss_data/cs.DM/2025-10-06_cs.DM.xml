<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.DM updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.DM</link>
    <description>cs.DM updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.DM" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Oct 2025 02:45:20 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Mon, 06 Oct 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Optimized Degree Realization: Minimum Dominating Set &amp; Maximum Matching</title>
      <link>https://arxiv.org/abs/2510.03176</link>
      <description>arXiv:2510.03176v1 Announce Type: new 
Abstract: The Degree Realization problem requires, given a sequence $d$ of $n$ positive integers, to decide whether there exists a graph whose degrees correspond to $d$, and to construct such a graph if it exists. A more challenging variant of the problem arises when $d$ has many different realizations, and some of them may be more desirable than others. We study \emph{optimized realization} problems in which the goal is to compute a realization that optimizes some quality measure. Efficient algorithms are known for the problems of finding a realization with the maximum clique, the maximum independent set, or the minimum vertex cover. In this paper, we focus on two problems for which such algorithms were not known. The first is the Degree Realization with Minimum Dominating Set problem, where the goal is to find a realization whose minimum dominating set is minimized among all the realizations of the given sequence $d$. The second is the Degree Realization with Maximum Matching problem, where the goal is to find a realization with the largest matching among all the realizations of $d$. We present polynomial time realization algorithms for these two open problems.
  A related problem of interest and importance is \emph{characterizing} the sequences with a given value of the optimized function. This leads to an efficient computation of the optimized value without providing the realization that achieves that value. For the Maximum Matching problem, a succinct characterization of degree sequences with a maximum matching of a given size was known. This paper provides a succinct characterization of sequences with minimum dominating set of a given size.</description>
      <guid isPermaLink="false">oai:arXiv.org:2510.03176v1</guid>
      <category>cs.DM</category>
      <category>cs.DS</category>
      <pubDate>Mon, 06 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Amotz Bar-Noy, Igor Kalinichev, David Peleg, Dror Rawitz</dc:creator>
    </item>
    <item>
      <title>Higher-arity PAC learning, VC dimension and packing lemma</title>
      <link>https://arxiv.org/abs/2510.02420</link>
      <description>arXiv:2510.02420v1 Announce Type: cross 
Abstract: The aim of this note is to overview some of our work in Chernikov, Towsner'20 (arXiv:2010.00726) developing higher arity VC theory (VC$_n$ dimension), including a generalization of Haussler packing lemma, and an associated tame (slice-wise) hypergraph regularity lemma; and to demonstrate that it characterizes higher arity PAC learning (PAC$_n$ learning) in $n$-fold product spaces with respect to product measures introduced by Kobayashi, Kuriyama and Takeuchi'15. We also point out how some of the recent results in arXiv:2402.14294, arXiv:2505.15688, arXiv:2509.20404 follow from our work in arXiv:2010.00726.</description>
      <guid isPermaLink="false">oai:arXiv.org:2510.02420v1</guid>
      <category>stat.ML</category>
      <category>cs.DM</category>
      <category>cs.LG</category>
      <category>math.CO</category>
      <category>math.LO</category>
      <category>math.ST</category>
      <category>stat.TH</category>
      <pubDate>Mon, 06 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Artem Chernikov, Henry Towsner</dc:creator>
    </item>
    <item>
      <title>Two Proofs of the Hamiltonian Cycle Identity</title>
      <link>https://arxiv.org/abs/2510.02473</link>
      <description>arXiv:2510.02473v1 Announce Type: cross 
Abstract: The Hamiltonian cycle polynomial can be evaluated to count the number of Hamiltonian cycles in a graph. It can also be viewed as a list of all spanning cycles of length $n$. We adopt the latter perspective and present a pair of original proofs for the Hamiltonian cycle identity which relates the Hamiltonian cycle polynomial to the important determinant and permanent polynomials. The first proof is a more accessible combinatorial argument. The second proof relies on viewing polynomials as both linear algebraic and combinatorial objects whose monomials form lists of graphs. Finally, a similar identity is derived for the Hamiltonian path polynomial.</description>
      <guid isPermaLink="false">oai:arXiv.org:2510.02473v1</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <pubDate>Mon, 06 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Hamilton Sawczuk, Edinah Gnang</dc:creator>
    </item>
    <item>
      <title>On the Enumeration of all Unique Paths of Recombining Trinomial Trees</title>
      <link>https://arxiv.org/abs/2510.02727</link>
      <description>arXiv:2510.02727v1 Announce Type: cross 
Abstract: Recombining trinomial trees are a workhorse for modeling discrete-event systems in option pricing, logistics, and feedback control. Because each node stores a state-dependent quantity, a depth-$D$ tree naively yields $\mathcal{O}(3^{D})$ trajectories, making exhaustive enumeration infeasible. Under time-homogeneous dynamics, however, the graph exhibits two exploitable symmetries: (i) translational invariance of nodes and (ii) a canonical bijection between admissible paths and ordered tuples encoding weak compositions. Leveraging these, we introduce a mass-shifting enumeration algorithm that slides integer "masses" through a cardinality tuple to generate exactly one representative per path-equivalence class while implicitly counting the associated weak compositions. This trims the search space by an exponential factor, enabling markedly deeper trees -- and therefore tighter numerical approximations of the underlying evolution -- to be processed in practice. We further derive an upper bound on the combinatorial counting expression that induces a theoretical lower bound on the algorithmic cost of approximately $\mathcal{O}\bigl(D^{1/2}1.612^{D}\bigr)$. This correspondence permits direct benchmarking while empirical tests, whose pseudo-code we provide, corroborate the bound, showing only a small constant overhead and substantial speedups over classical breadth-first traversal. Finally, we highlight structural links between our algorithmic/combinatorial framework and Motzkin paths with Narayana-type refinements, suggesting refined enumerative formulas and new potential analytic tools for path-dependent functionals.</description>
      <guid isPermaLink="false">oai:arXiv.org:2510.02727v1</guid>
      <category>cs.DS</category>
      <category>cs.DM</category>
      <category>math.CO</category>
      <pubDate>Mon, 06 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Ethan Torres, Ramavarapu Sreenivas, Richard Sowers</dc:creator>
    </item>
    <item>
      <title>A polynomial bound on the pathwidth of graphs edge-coverable by $k$ shortest paths</title>
      <link>https://arxiv.org/abs/2510.02901</link>
      <description>arXiv:2510.02901v1 Announce Type: cross 
Abstract: Dumas, Foucaud, Perez and Todinca (2024) recently proved that every graph whose edges can be covered by $k$ shortest paths has pathwidth at most $O(3^k)$. In this paper, we improve this upper bound on the pathwidth to a polynomial one; namely, we show that every graph whose edge set can be covered by $k$ shortest paths has pathwidth $O(k^4)$, answering a question from the same paper. Moreover, we prove that when $k\leq 3$, every such graph has pathwidth at most $k$ (and this bound is tight). Finally, we show that even though there exist graphs with arbitrarily large treewidth whose vertex set can be covered by $2$ isometric trees, every graph whose set of edges can be covered by $2$ isometric trees has treewidth at most $2$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2510.02901v1</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <pubDate>Mon, 06 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Julien Baste, Lucas De Meyer, Ugo Giocanti, Etienne Objois, Timoth\'e Picavet</dc:creator>
    </item>
    <item>
      <title>Low Recourse Arborescence Forests Under Uniformly Random Arcs</title>
      <link>https://arxiv.org/abs/2510.02950</link>
      <description>arXiv:2510.02950v1 Announce Type: cross 
Abstract: In this work, we study how to maintain a forest of arborescences of maximum arc cardinality under arc insertions while minimizing recourse -- the total number of arcs changed in the maintained solution. This problem is the "arborescence version'' of max cardinality matching.
  On the impossibility side, we observe that even in this insertion-only model, it is possible for $m$ adversarial arc arrivals to necessarily incur $\Omega(m \cdot n)$ recourse, matching a trivial upper bound of $O(m \cdot n)$. On the possibility side, we give an algorithm with expected recourse $O(m \cdot \log^2 n)$ if all $m$ arcs arrive uniformly at random.</description>
      <guid isPermaLink="false">oai:arXiv.org:2510.02950v1</guid>
      <category>cs.DS</category>
      <category>cs.DM</category>
      <pubDate>Mon, 06 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>J Niklas Dahlmeier, D Ellis Hershkowitz</dc:creator>
    </item>
    <item>
      <title>On Brooks' Theorem</title>
      <link>https://arxiv.org/abs/2208.02186</link>
      <description>arXiv:2208.02186v2 Announce Type: replace 
Abstract: In this note we give two proofs of Brooks' Theorem. The first is obtained by modifying an earlier proof and the second by combining two earlier proofs. We believe these proofs are easier to teach in Computer Science courses.</description>
      <guid isPermaLink="false">oai:arXiv.org:2208.02186v2</guid>
      <category>cs.DM</category>
      <category>math.CO</category>
      <pubDate>Mon, 06 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Gopalan Sajith (IIT Guwahati), Sanjeev Saxena (IIT Kanpur)</dc:creator>
    </item>
    <item>
      <title>Optimal Inapproximability of Promise Equations over Finite Groups</title>
      <link>https://arxiv.org/abs/2411.01630</link>
      <description>arXiv:2411.01630v3 Announce Type: replace-cross 
Abstract: A celebrated result of Hastad established that, for any constant $\varepsilon&gt;0$, it is NP-hard to find an assignment satisfying a $(1/|G|+\varepsilon)$-fraction of the constraints of a given 3-LIN instance over an Abelian group $G$ even if one is promised that an assignment satisfying a $(1-\varepsilon)$-fraction of the constraints exists. Engebretsen, Holmerin, and Russell showed the same result for 3-LIN instances over any finite (not necessarily Abelian) group. In other words, for almost-satisfiable instances of 3-LIN the random assignment achieves an optimal approximation guarantee. We prove that the random assignment algorithm is still best possible under a stronger promise that the 3-LIN instance is almost satisfiable over an arbitrarily more restrictive group.</description>
      <guid isPermaLink="false">oai:arXiv.org:2411.01630v3</guid>
      <category>cs.CC</category>
      <category>cs.DM</category>
      <pubDate>Mon, 06 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Silvia Butti, Alberto Larrauri, Stanislav \v{Z}ivn\'y</dc:creator>
    </item>
    <item>
      <title>SUperman: Efficient Permanent Computation on GPUs</title>
      <link>https://arxiv.org/abs/2502.16577</link>
      <description>arXiv:2502.16577v3 Announce Type: replace-cross 
Abstract: The permanent is a function, defined for a square matrix, with applications in various domains including quantum computing, statistical physics, complexity theory, combinatorics, and graph theory. Its formula is similar to that of the determinant; however, unlike the determinant, its exact computation is #P-complete, i.e., there is no algorithm to compute the permanent in polynomial time unless P=NP. For an $n \times n$ matrix, the fastest algorithm has a time complexity of $O(2^{n-1}n)$. Although supercomputers have been employed for permanent computation before, there is no work and, more importantly, no publicly available software that leverages cutting-edge High-Performance Computing accelerators such as GPUs. In this work, we design, develop, and investigate the performance of SUperman, a complete software suite that can compute matrix permanents on multiple nodes/GPUs on a cluster while handling various matrix types, e.g., real/complex/binary and sparse/dense, etc., with a unique treatment for each type. SUperman run on a single Nvidia A100 GPU is up to $86\times$ faster than a state-of-the-art parallel algorithm on 44 Intel Xeon cores running at 2.10GHz. Leveraging 192 GPUs, SUperman computes the permanent of a $62 \times 62$ matrix in 1.63 days, marking the largest reported permanent computation to date.</description>
      <guid isPermaLink="false">oai:arXiv.org:2502.16577v3</guid>
      <category>cs.DC</category>
      <category>cs.DM</category>
      <category>cs.NA</category>
      <category>math.NA</category>
      <pubDate>Mon, 06 Oct 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Deniz Elbek, Fatih Ta\c{s}yaran, Bora U\c{c}ar, Kamer Kaya</dc:creator>
    </item>
  </channel>
</rss>
