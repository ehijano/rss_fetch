<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.SC updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.SC</link>
    <description>cs.SC updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.SC" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 May 2024 04:00:23 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 16 May 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Algebraic Tools for Computing Polynomial Loop Invariants</title>
      <link>https://arxiv.org/abs/2405.09232</link>
      <description>arXiv:2405.09232v1 Announce Type: new 
Abstract: Loop invariants are properties of a program loop that hold before and after each iteration of the loop. They are often employed to verify programs and ensure that algorithms consistently produce correct results during execution. Consequently, the generation of invariants becomes a crucial task for loops. We specifically focus on polynomial loops, where both the loop conditions and assignments within the loop are expressed as polynomials. Although computing polynomial invariants for general loops is undecidable, efficient algorithms have been developed for certain classes of loops. For instance, when all assignments within a while loop involve linear polynomials, the loop becomes solvable. In this work, we study the more general case where the polynomials exhibit arbitrary degrees.
  Applying tools from algebraic geometry, we present two algorithms designed to generate all polynomial invariants for a while loop, up to a specified degree. These algorithms differ based on whether the initial values of the loop variables are given or treated as parameters. Furthermore, we introduce various methods to address cases where the algebraic problem exceeds the computational capabilities of our methods. In such instances, we identify alternative approaches to generate specific polynomial invariants.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.09232v1</guid>
      <category>cs.SC</category>
      <category>cs.PL</category>
      <category>math.AG</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Erdenebayar Bayarmagnai, Fatemeh Mohammadi, R\'emi Pr\'ebet</dc:creator>
    </item>
    <item>
      <title>Wronskians form the inverse system of the arcs of a double point</title>
      <link>https://arxiv.org/abs/2405.08964</link>
      <description>arXiv:2405.08964v1 Announce Type: cross 
Abstract: The ideal of the arc scheme of a double point or, equivalently, the differential ideal generated by the ideal of a double point is a primary ideal in an infinite-dimensional polynomial ring supported at the origin. This ideal has a rich combinatorial structure connecting it to singularity theory, partition identities, representation theory, and differential algebra. Macaulay inverse system is a powerful tool for studying the structure of primary ideals which describes an ideal in terms of certain linear differential operators. In the present paper, we show that the inverse system of the ideal of the arc scheme of a double point is precisely a vector space spanned by all the Wronskians of the variables and their formal derivatives. We then apply this characterization to extend our recent result on Poincar\'e-type series for such ideals.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.08964v1</guid>
      <category>math.AC</category>
      <category>cs.SC</category>
      <category>math.AG</category>
      <category>math.CO</category>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Rida Ait El Manssour, Gleb Pogudin</dc:creator>
    </item>
    <item>
      <title>Concatenations of Terms of an Arithmetic Progression</title>
      <link>https://arxiv.org/abs/2201.07127</link>
      <description>arXiv:2201.07127v2 Announce Type: replace-cross 
Abstract: Let $\left(u(n)\right)_{n\in\mathbb{N}}$ be an arithmetic progression of natural integers in base $b\in\mathbb{N}\setminus \{0,1\}$. We consider the following sequences: $s(n)=\overline{u(0)u(1)\cdots u(n) }^b$ formed by concatenating the first $n+1$ terms of $\left(u(n)\right)_{n\in\mathbb{N}}$ in base $b$ from the right; $s_r(n) = \overline{u(n)u(n-1)\cdots u(0)}^b$; and $\left(s_*(n)\right)_{n\in\mathbb{N}}$, given by $s_*(0)=u(0)$, $s_*(n)=\overline{s_r(n-1)s(n)}^b, n\geq 1$. We construct explicit formulas for these sequences and use basic concepts of linear difference operators to prove they are not P-recursive (holonomic). We also present an alternative proof that follows directly from their definitions. We implemented $\left(s(n)\right)_{n\in\mathbb{N}}$ and $\left(s_r(n)\right)_{n\in\mathbb{N}}$ in the decimal base when $(u(n))_{n\in\mathbb{N}}=\mathbb{N}\setminus \{0\}$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2201.07127v2</guid>
      <category>math.CO</category>
      <category>cs.SC</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Florian Luca, Bertrand Teguia Tabuguia</dc:creator>
    </item>
    <item>
      <title>Vector-Symbolic Architecture for Event-Based Optical Flow</title>
      <link>https://arxiv.org/abs/2405.08300</link>
      <description>arXiv:2405.08300v2 Announce Type: replace-cross 
Abstract: From a perspective of feature matching, optical flow estimation for event cameras involves identifying event correspondences by comparing feature similarity across accompanying event frames. In this work, we introduces an effective and robust high-dimensional (HD) feature descriptor for event frames, utilizing Vector Symbolic Architectures (VSA). The topological similarity among neighboring variables within VSA contributes to the enhanced representation similarity of feature descriptors for flow-matching points, while its structured symbolic representation capacity facilitates feature fusion from both event polarities and multiple spatial scales. Based on this HD feature descriptor, we propose a novel feature matching framework for event-based optical flow, encompassing both model-based (VSA-Flow) and self-supervised learning (VSA-SM) methods. In VSA-Flow, accurate optical flow estimation validates the effectiveness of HD feature descriptors. In VSA-SM, a novel similarity maximization method based on the HD feature descriptor is proposed to learn optical flow in a self-supervised way from events alone, eliminating the need for auxiliary grayscale images. Evaluation results demonstrate that our VSA-based method achieves superior accuracy in comparison to both model-based and self-supervised learning methods on the DSEC benchmark, while remains competitive among both methods on the MVSEC benchmark. This contribution marks a significant advancement in event-based optical flow within the feature matching methodology.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.08300v2</guid>
      <category>cs.CV</category>
      <category>cs.SC</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-sa/4.0/</dc:rights>
      <dc:creator>Hongzhi You, Yijun Cao, Wei Yuan, Fanjun Wang, Ning Qiao, Yongjie Li</dc:creator>
    </item>
  </channel>
</rss>
