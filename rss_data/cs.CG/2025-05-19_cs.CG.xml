<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.CG updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.CG</link>
    <description>cs.CG updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.CG" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 May 2025 02:49:48 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Mon, 19 May 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Tracking Low-Level Cloud Systems with Topology</title>
      <link>https://arxiv.org/abs/2505.10850</link>
      <description>arXiv:2505.10850v1 Announce Type: new 
Abstract: Low-level clouds are ubiquitous in Earth's atmosphere, playing a crucial role in transporting heat, moisture, and momentum across the planet. Their evolution and interaction with other atmospheric components, such as aerosols, are essential to understanding the climate system and its sensitivity to anthropogenic influences. Advanced high-resolution geostationary satellites now resolve cloud systems with greater accuracy, establishing cloud tracking as a vital research area for studying their spatiotemporal dynamics. It enables disentangling advective and convective components driving cloud evolution. This, in turn, provides deeper insights into the structure and lifecycle of low-level cloud systems and the atmospheric processes they govern. In this paper, we propose a novel framework for tracking cloud systems using topology-driven techniques based on optimal transport. We first obtain a set of anchor points for the cloud systems based on the merge tree of the cloud optical depth field. We then apply topology-driven probabilistic feature tracking of these anchor points to guide the tracking of cloud systems. We demonstrate the utility of our framework by tracking clouds over the ocean and land to test for systematic differences in the two physically distinct settings. We further evaluate our framework through case studies and statistical analyses, comparing it against two leading cloud tracking tools and two topology-based general-purpose tracking tools. The results demonstrate that incorporating system-based tracking improves the ability to capture the evolution of low-level clouds. Our framework paves the way for detailed low-level cloud characterization studies using satellite data records.</description>
      <guid isPermaLink="false">oai:arXiv.org:2505.10850v1</guid>
      <category>cs.CG</category>
      <pubDate>Mon, 19 May 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Mingzhe Li, Dwaipayan Chatterjee, Franziska Glassmeier, Fabian Senf, Bei Wang</dc:creator>
    </item>
    <item>
      <title>A Practical Approach for Computing the Diameter of a Point Set</title>
      <link>https://arxiv.org/abs/2505.11317</link>
      <description>arXiv:2505.11317v1 Announce Type: new 
Abstract: We present an approximation algorithm for computing the diameter of a point-set in $\Re^d$. The new algorithm is sensitive to the ``hardness'' of computing the diameter of the given input, and for most inputs it is able to compute the exact diameter extremely fast. The new algorithm is simple, robust, has good empirical performance, and can be implemented quickly. As such, it seems to be the algorithm of choice in practice for computing/approximating the diameter.</description>
      <guid isPermaLink="false">oai:arXiv.org:2505.11317v1</guid>
      <category>cs.CG</category>
      <pubDate>Mon, 19 May 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Sariel Har-Peled</dc:creator>
    </item>
    <item>
      <title>Eight-Partitioning Points in 3D, and Efficiently Too</title>
      <link>https://arxiv.org/abs/2403.02627</link>
      <description>arXiv:2403.02627v4 Announce Type: replace 
Abstract: An {\em eight-partition} of a finite set of points (respectively, of a continuous mass distribution) in $\mathbb{R}^3$ consists of three planes that divide the space into $8$ octants, such that each open octant contains at most $1/8$ of the points (respectively, of the mass). In 1966, Hadwiger showed that any mass distribution in $\mathbb{R}^3$ admits an eight-partition; moreover, one can prescribe the normal direction of one of the three planes. The analogous result for finite point sets follows by a standard limit argument.
  We prove the following variant of this result: Any mass distribution (or point set) in $\mathbb{R}^3$ admits an eight-partition for which the intersection of two of the planes is a line with a prescribed direction.
  Moreover, we present an efficient algorithm for calculating an eight-partition of a set of $n$ points in~$\mathbb{R}^3$ (with prescribed normal direction of one of the planes) in time $O^{*}(n^{7/3})$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2403.02627v4</guid>
      <category>cs.CG</category>
      <category>math.CO</category>
      <pubDate>Mon, 19 May 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Boris Aronov, Abdul Basit, Indu Ramesh, Gianluca Tasinato, Uli Wagner</dc:creator>
    </item>
    <item>
      <title>Drawing maps on oriented surfaces</title>
      <link>https://arxiv.org/abs/2505.01480</link>
      <description>arXiv:2505.01480v2 Announce Type: replace 
Abstract: In this article we describe a program -- called planar_draw -- to draw maps on oriented surfaces in the plane. The drawings are coded as tikz
  files that can easily be manipulated and used in latex documents. Next to plane maps -- a case for which already several programs exist -- the program allows
  to draw maps of genus at least one inside a fundamental polygon or with non-contractible cycles displayed as disjoint cycles that have to be identified.
  Several options allow to tailor the output for individual needs -- e.g.\ by forcing some edges to be completely inside the fundamental polygon. In
  combination with a program embedding graphs, the tool can also be used for graphs that do not already come with an embedding in an orientable surface.</description>
      <guid isPermaLink="false">oai:arXiv.org:2505.01480v2</guid>
      <category>cs.CG</category>
      <pubDate>Mon, 19 May 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Gunnar Brinkmann</dc:creator>
    </item>
    <item>
      <title>Simple Compact Monotone Tree Drawings</title>
      <link>https://arxiv.org/abs/1708.09653</link>
      <description>arXiv:1708.09653v4 Announce Type: replace-cross 
Abstract: A monotone drawing of a graph G is a straight-line drawing of G such that every pair of vertices is connected by a path that is monotone with respect to some direction.
  Trees, as a special class of graphs, have been the focus of several papers and, recently, He and He~\cite{mt:4} showed how to produce a monotone drawing of an arbitrary $n$-vertex tree that is contained in a $12n \times 12n$ grid.
  All monotone tree drawing algorithms that have appeared in the literature consider rooted ordered trees and they draw them so that (i) the root of the tree is drawn at the origin of the drawing, (ii) the drawing is confined in the first quadrant, and (iii) the ordering/embedding of the tree is respected. In this paper, we provide a simple algorithm that has the exact same characteristics and, given an $n$-vertex rooted tree $T$, it outputs a monotone drawing of $T$ that fits on a $n \times n$ grid.
  For unrooted ordered trees, we present an algorithms that produces monotone drawings that respect the ordering and fit in an $(n+1) \times (\frac{n}{2} +1)$ grid, while, for unrooted non-ordered trees we produce monotone drawings of good aspect ratio which fit on a grid of size at most $\left\lfloor \frac{3}{4} \left(n+2\right)\right\rfloor \times \left\lfloor \frac{3}{4} \left(n+2\right)\right\rfloor$.</description>
      <guid isPermaLink="false">oai:arXiv.org:1708.09653v4</guid>
      <category>cs.DS</category>
      <category>cs.CG</category>
      <category>cs.DM</category>
      <pubDate>Mon, 19 May 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Anargyros Oikonomou, Antonios Symvonis</dc:creator>
    </item>
  </channel>
</rss>
