<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>math.CT updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/math.CT</link>
    <description>math.CT updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/math.CT" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 May 2024 04:00:11 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Mon, 13 May 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Representability for small and big triangulated categories</title>
      <link>https://arxiv.org/abs/2405.06475</link>
      <description>arXiv:2405.06475v1 Announce Type: new 
Abstract: In this note we give a variant for a Brown representability type theorem in the spirit of Rouquier and Neeman. The main advantage of our arguments are that they can be dualized.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.06475v1</guid>
      <category>math.CT</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>George Ciprian Modoi</dc:creator>
    </item>
    <item>
      <title>Time complexity for deterministic string machines</title>
      <link>https://arxiv.org/abs/2405.06043</link>
      <description>arXiv:2405.06043v1 Announce Type: cross 
Abstract: Algorithms which learn environments represented by automata in the past have had complexity scaling with the number of states in the automaton, which can be exponentially large even for automata recognizing regular expressions with a small description length. We thus formalize a compositional language that can construct automata as transformations between certain types of category, representable as string diagrams, which better reflects the description complexity of various automata. We define complexity constraints on this framework by having them operate on categories enriched over filtered sets, and using these constraints, we prove elementary results on the runtime and expressivity of a subset of these transformations which operate deterministically on finite state spaces. These string diagrams, or "string machines," are themselves morphisms in a category, so it is possible for string machines to create other string machines in runtime to model computations which take more than constant memory. We prove sufficient conditions for polynomial runtime guarantees on these, which can help develop complexity constraints on string machines which also encapsulate runtime complexity.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.06043v1</guid>
      <category>cs.FL</category>
      <category>cs.CC</category>
      <category>math.CT</category>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Ali Cataltepe, Vanessa Kosoy</dc:creator>
    </item>
    <item>
      <title>Cartesian exponentiation and monadicity</title>
      <link>https://arxiv.org/abs/2101.09853</link>
      <description>arXiv:2101.09853v2 Announce Type: replace 
Abstract: An important result in quasi-category theory due to Lurie is the that cocartesian fibrations are exponentiable, in the sense that pullback along a cocartesian fibration admits a right Quillen right adjoint that moreover preserves cartesian fibrations; the same is true with the cartesian and cocartesian fibrations interchanged. To explicate this classical result, we prove that the pullback along a cocartesian fibration between quasi-categories forms the oplax colimit of its "straightening," a homotopy coherent diagram valued in quasi-categories, recovering a result first observed by Gepner, Haugseng, and Nikolaus. As an application of the exponentiation operation of a cartesian fibration by a cocartesian one, we use the Yoneda lemma to construct left and right adjoints to the forgetful functor that carries a cartesian fibration over B to its obB-indexed family of fibers, and prove that this forgetful functor is monadic and comonadic. This monadicity is then applied to construct the reflection of a cartesian fibration into a groupoidal cartesian fibration, whose fibers are Kan complexes rather than quasi-categories.</description>
      <guid isPermaLink="false">oai:arXiv.org:2101.09853v2</guid>
      <category>math.CT</category>
      <category>math.AT</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-sa/4.0/</dc:rights>
      <dc:creator>Emily Riehl, Dominic Verity</dc:creator>
    </item>
    <item>
      <title>Factorization homology of enriched $\infty$-categories</title>
      <link>https://arxiv.org/abs/1710.06414</link>
      <description>arXiv:1710.06414v2 Announce Type: replace-cross 
Abstract: For an arbitrary symmetric monoidal $\infty$-category $\mathcal{V}$, we define the factorization homology of $\mathcal{V}$-enriched $(\infty,1)$-categories over (possibly stratified) 1-manifolds and study some of its basic properties. In the case of spectral enrichment, we show that the value of factorization homology on a circle is topological Hochschild homology.</description>
      <guid isPermaLink="false">oai:arXiv.org:1710.06414v2</guid>
      <category>math.AT</category>
      <category>math-ph</category>
      <category>math.CT</category>
      <category>math.MP</category>
      <category>math.QA</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>David Ayala, John Francis, Aaron Mazel-Gee, Nick Rozenblyum</dc:creator>
    </item>
  </channel>
</rss>
