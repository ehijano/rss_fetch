<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.CG updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.CG</link>
    <description>cs.CG updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.CG" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Sep 2025 04:00:07 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Mon, 29 Sep 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Algorithms for Dynamic Computational Geometry with Applications</title>
      <link>https://arxiv.org/abs/2509.21681</link>
      <description>arXiv:2509.21681v1 Announce Type: new 
Abstract: Most of the literature of computational geometry concerns geometric properties of sets of static points. M.J. Atallah introduced dynamic computational geometry, concerned with both momentary and long-term geometric properties of sets of moving point-objects. This area of research seems to have been dormant recently. The current paper examines new problems in dynamic computational geometry.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.21681v1</guid>
      <category>cs.CG</category>
      <pubDate>Mon, 29 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Laurence Boxer</dc:creator>
    </item>
    <item>
      <title>Square-Domain Area-Preserving Parameterization for Genus-Zero and Genus-One Closed Surfaces</title>
      <link>https://arxiv.org/abs/2509.22269</link>
      <description>arXiv:2509.22269v1 Announce Type: cross 
Abstract: The parameterization of closed surfaces typically requires either multiple charts or a non-planar domain to achieve a seamless global mapping. In this paper, we propose a numerical framework for the seamless parameterization of genus-zero and genus-one closed simplicial surfaces onto a unit square domain. The process begins by slicing the surface with either the shortest-path or the Reeb graph method. The sliced surface is then mapped onto the unit square using a globally convergent algorithm that minimizes the weighted variance of per-triangle area ratios to achieve area preservation. Numerical experiments on benchmark models demonstrate that our method achieves high accuracy and efficiency. Furthermore, the proposed method enables applications such as geometry images, producing accurate and high-quality surface reconstructions.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.22269v1</guid>
      <category>math.NA</category>
      <category>cs.CG</category>
      <category>cs.NA</category>
      <pubDate>Mon, 29 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Shu-Yung Liu, Mei-Heng Yueh</dc:creator>
    </item>
    <item>
      <title>The Flood Complex: Large-Scale Persistent Homology on Millions of Points</title>
      <link>https://arxiv.org/abs/2509.22432</link>
      <description>arXiv:2509.22432v1 Announce Type: cross 
Abstract: We consider the problem of computing persistent homology (PH) for large-scale Euclidean point cloud data, aimed at downstream machine learning tasks, where the exponential growth of the most widely-used Vietoris-Rips complex imposes serious computational limitations. Although more scalable alternatives such as the Alpha complex or sparse Rips approximations exist, they often still result in a prohibitively large number of simplices. This poses challenges in the complex construction and in the subsequent PH computation, prohibiting their use on large-scale point clouds. To mitigate these issues, we introduce the Flood complex, inspired by the advantages of the Alpha and Witness complex constructions. Informally, at a given filtration value $r\geq 0$, the Flood complex contains all simplices from a Delaunay triangulation of a small subset of the point cloud $X$ that are fully covered by balls of radius $r$ emanating from $X$, a process we call flooding. Our construction allows for efficient PH computation, possesses several desirable theoretical properties, and is amenable to GPU parallelization. Scaling experiments on 3D point cloud data show that we can compute PH of up to dimension 2 on several millions of points. Importantly, when evaluating object classification performance on real-world and synthetic data, we provide evidence that this scaling capability is needed, especially if objects are geometrically or topologically complex, yielding performance superior to other PH-based methods and neural networks for point cloud data.</description>
      <guid isPermaLink="false">oai:arXiv.org:2509.22432v1</guid>
      <category>cs.LG</category>
      <category>cs.CG</category>
      <pubDate>Mon, 29 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Florian Graf, Paolo Pellizzoni, Martin Uray, Stefan Huber, Roland Kwitt</dc:creator>
    </item>
    <item>
      <title>Fast Area-Weighted Peeling of Convex Hulls for Outlier Detection</title>
      <link>https://arxiv.org/abs/2410.04544</link>
      <description>arXiv:2410.04544v2 Announce Type: replace 
Abstract: We present a novel 2D convex hull peeling algorithm for outlier detection, which repeatedly removes the point on the hull that decreases the hull's area the most. To find k outliers among n points, one simply peels k points. The algorithm is an efficient heuristic for exact methods, which find the k points whose removal together results in the smallest convex hull. Our algorithm runs in O(nlogn) time using O(n) space for any choice of k. This is a significant speedup compared to the fastest exact algorithms, which run in O(n^2logn + (n - k)^3) time using O(n\logn + (n-k)^3) space by Eppstein et al., and O(nlogn + 4k_C_2k (3k)^k n) time by Atanassov et al. Existing heuristic peeling approaches are not area-based. Instead, an approach by Harsh et al. repeatedly removes the point furthest from the mean using various distance metrics and runs in O(nlogn + kn) time. Other approaches greedily peel one convex layer at a time, which is efficient when using an O(nlogn) time algorithm by Chazelle to compute the convex layers. However, in many cases this fails to recover outliers. For most values of n and k, our approach is the fastest and first practical choice for finding outliers based on minimizing the area of the convex hull. Our algorithm also generalizes to other objectives such as perimeter.</description>
      <guid isPermaLink="false">oai:arXiv.org:2410.04544v2</guid>
      <category>cs.CG</category>
      <pubDate>Mon, 29 Sep 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <arxiv:journal_reference>In Proceedings of the 36th Canadian Conference on Computational Geometry, pages 233-240, 2024</arxiv:journal_reference>
      <dc:creator>Vinesh Sridhar, Rolf Svenning</dc:creator>
    </item>
  </channel>
</rss>
