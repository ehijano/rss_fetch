<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.LO updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.LO</link>
    <description>cs.LO updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.LO" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Jun 2025 01:34:56 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 26 Jun 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Practical Exploration of Polyhedral Model Checking</title>
      <link>https://arxiv.org/abs/2506.20176</link>
      <description>arXiv:2506.20176v1 Announce Type: new 
Abstract: This work explores the potential of spatial model checking of polyhedral models on a number of selected examples. In computer graphics polyhedral models can be found in the form of triangular surface meshes of tetrahedral volume meshes which are abundant. Spatial model checking is used to analyse spatial properties of interest of such models expressed in a suitable spatial logic. The original contributions of this paper are twofold. First we illustrate how a polyhedral model can be enriched by adding the outcome of one model checking session as an atomic proposition to the original model. This is useful as it provides a way to reduce the length of formulas to check on such models and to obtain more insightful results when these models are used for graphical visualisation. Second we show that this form of enrichment also enables practical model minimisation providing deeper insights in the basic spatial structure of the model in terms of the spatial logic properties it enjoys. This work is performed in the context of the geometric spatial model checker PolyLogicA, the visualizer PolyVisualizer and the polyhedral semantics of the Spatial Logic for Closure Spaces SLCS.</description>
      <guid isPermaLink="false">oai:arXiv.org:2506.20176v1</guid>
      <category>cs.LO</category>
      <pubDate>Thu, 26 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Yuri Andriaccio, Vincenzo Ciancia, Diego Latella, Mieke Massink</dc:creator>
    </item>
    <item>
      <title>Unfolding Iterators: Specification and Verification of Higher-Order Iterators, in OCaml</title>
      <link>https://arxiv.org/abs/2506.20310</link>
      <description>arXiv:2506.20310v1 Announce Type: cross 
Abstract: Albeit being a central notion of every programming language, formally and modularly reasoning about iteration proves itself to be a non-trivial feat, specially in the context of higher-order iteration. In this paper, we present a generic approach to the specification and deductive verification of higher-order iterators, written in the OCaml language. Our methodology follows two key principles: first, the usage of the Gospel specification language to describe the general behaviour of any iteration schema; second, the usage of the Cameleer framework to deductively verify that every iteration client is correct with respect to its logical specification. To validate our approach we develop a set of verified case studies, ranging from classic list iterators to graph algorithms implemented in the widely used OCamlGraph library.</description>
      <guid isPermaLink="false">oai:arXiv.org:2506.20310v1</guid>
      <category>cs.PL</category>
      <category>cs.LO</category>
      <pubDate>Thu, 26 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Ion Chirica, M\'ario Pereira</dc:creator>
    </item>
    <item>
      <title>Modal Verification Patterns for Systems</title>
      <link>https://arxiv.org/abs/2506.01719</link>
      <description>arXiv:2506.01719v2 Announce Type: replace 
Abstract: Although they differ in the functionality they offer, low-level systems exhibit certain patterns of design and utilization of computing resources. In this paper, we argue the position that modalities, in the sense of modal logic, should be a go-to approach when specifying and verifying low-level systems code. We explain how the concept of a resource context helps guide the design of new modalities for verification of systems code, and we justify our perspective by discussing prior systems that have used modalities for systems verification successfully, arguing that they fit into the verification design pattern we articulate, and explaining how this approach might apply to other systems verification challenges.</description>
      <guid isPermaLink="false">oai:arXiv.org:2506.01719v2</guid>
      <category>cs.LO</category>
      <pubDate>Thu, 26 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-sa/4.0/</dc:rights>
      <dc:creator>Ismail Kuru, Colin S. Gordon</dc:creator>
    </item>
    <item>
      <title>Matching logic -- a new axiomatization</title>
      <link>https://arxiv.org/abs/2506.13801</link>
      <description>arXiv:2506.13801v3 Announce Type: replace 
Abstract: In these notes we propose a new, simpler proof system for first-order matching logic with application and definedness. The new proof system is inspired by Tarski's axiomatization for first order-logic with equality (simplified by Kalish and Montague), that does not involve the notions of a free variable and free substitution. We give also a proof system for first-order matching logic with application, obtained by adapting to matching logic G\"{o}del's proof system for first-order intuitionistic logic.</description>
      <guid isPermaLink="false">oai:arXiv.org:2506.13801v3</guid>
      <category>cs.LO</category>
      <category>math.LO</category>
      <pubDate>Thu, 26 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Lauren\c{t}iu Leu\c{s}tean, Dafina Trufa\c{s}</dc:creator>
    </item>
    <item>
      <title>Computational Complexity of Model-Checking Quantum Pushdown Systems</title>
      <link>https://arxiv.org/abs/2506.18439</link>
      <description>arXiv:2506.18439v2 Announce Type: replace 
Abstract: In this paper, we study the problem of model-checking quantum pushdown systems from a computational complexity point of view. We arrive at the following equally important, interesting new results:
  We first extend the notions of the {\it probabilistic pushdown systems} and {\it Markov chains} to their quantum analogues and investigate the question of whether it is necessary to define a quantum analogue of {\it probabilistic computational tree logic} to describe the probabilistic and branching-time properties of the {\it quantum Markov chain}. We study its model-checking question and show that model-checking of {\it stateless quantum pushdown systems (qBPA)} against {\it probabilistic computational tree logic (PCTL)} is generally undecidable, i.e., there exists no algorithm for model-checking {\it stateless quantum pushdown systems} against {\it probabilistic computational tree logic}.
  We then study in which case there exists an algorithm for model-checking {\it stateless quantum pushdown systems} and show that the problem of model-checking {\it stateless quantum pushdown systems} against {\it bounded probabilistic computational tree logic} (bPCTL) is decidable, and further show that this problem is in $NP$-complete. Our reduction is from the {\it bounded Post Correspondence Problem} for the first time, a well-known $NP$-complete problem.</description>
      <guid isPermaLink="false">oai:arXiv.org:2506.18439v2</guid>
      <category>cs.LO</category>
      <category>cs.CC</category>
      <pubDate>Thu, 26 Jun 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Deren Lin, Tianrong Lin</dc:creator>
    </item>
  </channel>
</rss>
