<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.DS updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.DS</link>
    <description>cs.DS updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.DS" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 30 Aug 2024 01:35:19 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 29 Aug 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Weighted Matching in the Random-Order Streaming and Robust Communication Models</title>
      <link>https://arxiv.org/abs/2408.15434</link>
      <description>arXiv:2408.15434v1 Announce Type: new 
Abstract: We study the maximum weight matching problem in the random-order semi-streaming model and in the robust communication model. Unlike many other sublinear models, in these two frameworks, there is a large gap between the guarantees of the best known algorithms for the unweighted and weighted versions of the problem.
  In the random-order semi-streaming setting, the edges of an $n$-vertex graph arrive in a stream in a random order. The goal is to compute an approximate maximum weight matching with a single pass over the stream using $O(n\text{ polylog } n)$ space. Our main result is a $(2/3-\epsilon)$-approximation algorithm for maximum weight matching in random-order streams, using space $O(n \log n \log R)$, where $R$ is the ratio between the heaviest and the lightest edge in the graph. Our result nearly matches the best known unweighted $(2/3+\epsilon_0)$-approximation (where $\epsilon_0 \sim 10^{-14}$ is a small constant) achieved by Assadi and Behnezhad [ICALP 2021], and significantly improves upon previous weighted results.
  Our techniques also extend to the related robust communication model, in which the edges of a graph are partitioned randomly between Alice and Bob. Alice sends a single message of size $O(n\text{ polylog }n)$ to Bob, who must compute an approximate maximum weight matching. We achieve a $(5/6-\epsilon)$-approximation using $O(n \log n \log R)$ words of communication, matching the results of Azarmehr and Behnezhad [ICALP 2023] for unweighted graphs.</description>
      <guid isPermaLink="false">oai:arXiv.org:2408.15434v1</guid>
      <category>cs.DS</category>
      <pubDate>Thu, 29 Aug 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Diba Hashemi, Weronika Wrzos-Kaminska</dc:creator>
    </item>
    <item>
      <title>Enumeration of Minimal Hitting Sets Parameterized by Treewidth</title>
      <link>https://arxiv.org/abs/2408.15776</link>
      <description>arXiv:2408.15776v1 Announce Type: cross 
Abstract: Enumerating the minimal hitting sets of a hypergraph is a problem which arises in many data management applications that include constraint mining, discovering unique column combinations, and enumerating database repairs. Previously, Eiter et al. showed that the minimal hitting sets of an $n$-vertex hypergraph, with treewidth $w$, can be enumerated with delay $O^*(n^{w})$ (ignoring polynomial factors), with space requirements that scale with the output size. We improve this to fixed-parameter-linear delay, following an FPT preprocessing phase. The memory consumption of our algorithm is exponential with respect to the treewidth of the hypergraph.</description>
      <guid isPermaLink="false">oai:arXiv.org:2408.15776v1</guid>
      <category>cs.DB</category>
      <category>cs.DS</category>
      <pubDate>Thu, 29 Aug 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Batya Kenig, Dan Shlomo Mizrahi</dc:creator>
    </item>
    <item>
      <title>Towards an Optimal Contention Resolution Scheme for Matchings</title>
      <link>https://arxiv.org/abs/2211.03599</link>
      <description>arXiv:2211.03599v2 Announce Type: replace 
Abstract: In this paper, we study contention resolution schemes for matchings. Given a fractional matching $x$ and a random set $R(x)$ where each edge $e$ appears independently with probability $x_e$, we want to select a matching $M \subseteq R(x)$ such that $\Pr[e \in M \mid e \in R(x)] \geq c$, for $c$ as large as possible. We call such a selection method a $c$-balanced contention resolution scheme.
  Our main results are (i) an asymptotically (in the limit as $\|x\|_\infty$ goes to 0) optimal $\simeq 0.544$-balanced contention resolution scheme for general matchings, and (ii) a $0.509$-balanced contention resolution scheme for bipartite matchings. To the best of our knowledge, this result establishes for the first time, in any natural relaxation of a combinatorial optimization problem, a separation between (i) offline and random order online contention resolution schemes, and (ii) monotone and non-monotone contention resolution schemes. We also present an application of our scheme to a combinatorial allocation problem, and discuss some open questions related to van der Waerden's conjecture for the permanent of doubly stochastic matrices.</description>
      <guid isPermaLink="false">oai:arXiv.org:2211.03599v2</guid>
      <category>cs.DS</category>
      <category>cs.DM</category>
      <category>math.PR</category>
      <pubDate>Thu, 29 Aug 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-nc-sa/4.0/</dc:rights>
      <dc:creator>Pranav Nuti, Jan Vondr\'ak</dc:creator>
    </item>
    <item>
      <title>RIP Linked List</title>
      <link>https://arxiv.org/abs/2306.06942</link>
      <description>arXiv:2306.06942v3 Announce Type: replace 
Abstract: Linked lists have long served as a valuable teaching tool in programming. However, the question arises: Are they truly practical for everyday program use? In most cases, it appears that array-based data structures offer distinct advantages, particularly in terms of memory efficiency and,more importantly, execution speed. While it's relatively straightforward to calculate the complexity of operations, gauging actual execution efficiency remains a challenge. This paper addresses this question by introducing a new benchmark. Our study compares various linked list implementations with several array-based alternatives. We also demonstrate the ease of incorporating memory caching for linked lists, enhancing their performance. Additionally, we introduce a new array-based data structure designed to excel in a wide range of operations.</description>
      <guid isPermaLink="false">oai:arXiv.org:2306.06942v3</guid>
      <category>cs.DS</category>
      <pubDate>Thu, 29 Aug 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Beno\^it Sonntag (LORIA), Dominique Colnet (LORIA)</dc:creator>
    </item>
    <item>
      <title>Submodular Maximization in Exactly $n$ Queries</title>
      <link>https://arxiv.org/abs/2406.00148</link>
      <description>arXiv:2406.00148v2 Announce Type: replace 
Abstract: In this work, we study the classical problem of maximizing a submodular function subject to a matroid constraint. We develop deterministic algorithms that are very parsimonious with respect to querying the submodular function, for both the case when the submodular function is monotone and the general submodular case. In particular, we present a 1/4 approximation algorithm for the monotone case that uses exactly one query per element, which gives the same total number of queries n as the number of queries required to compute the maximum singleton. For the general case, we present a constant factor approximation algorithm that requires 2 queries per element, which is the first algorithm for this problem with linear query complexity in the size of the ground set.</description>
      <guid isPermaLink="false">oai:arXiv.org:2406.00148v2</guid>
      <category>cs.DS</category>
      <pubDate>Thu, 29 Aug 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Eric Balkanski, Steven DiSilvio, Alan Kuhnle, ChunLi Peng</dc:creator>
    </item>
    <item>
      <title>Accelerating Spectral Clustering on Quantum and Analog Platforms</title>
      <link>https://arxiv.org/abs/2408.08486</link>
      <description>arXiv:2408.08486v4 Announce Type: replace 
Abstract: We introduce a novel hybrid quantum-analog algorithm to perform graph clustering that exploits connections between the evolution of dynamical systems on graphs and the underlying graph spectra. This approach constitutes a new class of algorithms that combine emerging quantum and analog platforms to accelerate computations. Our hybrid algorithm is equivalent to spectral clustering and has a computational complexity of $O(N)$, where $N$ is the number of nodes in the graph, compared to $O(N^3)$ scaling on classical computing platforms. The proposed method employs the dynamic mode decomposition (DMD) framework on the data generated by Schr\"{o}dinger dynamics that evolves on the manifold induced by the graph Laplacian. In particular, we prove and demonstrate that one can extract the eigenvalues and scaled eigenvectors of the normalized graph Laplacian by evolving Schr\"{o}dinger dynamics on quantum computers followed by DMD computations on analog devices.</description>
      <guid isPermaLink="false">oai:arXiv.org:2408.08486v4</guid>
      <category>cs.DS</category>
      <category>math.DS</category>
      <category>math.SP</category>
      <pubDate>Thu, 29 Aug 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Xingzi Xu, Tuhin Sahai</dc:creator>
    </item>
    <item>
      <title>Constructing disjoint Steiner trees in Sierpi\'{n}ski graphs</title>
      <link>https://arxiv.org/abs/2310.16463</link>
      <description>arXiv:2310.16463v2 Announce Type: replace-cross 
Abstract: Let $G$ be a graph and $S\subseteq V(G)$ with $|S|\geq 2$. Then the trees $T_1, T_2, \cdots, T_\ell$ in $G$ are \emph{internally disjoint Steiner trees} connecting $S$ (or $S$-Steiner trees) if $E(T_i) \cap E(T_j )=\emptyset$ and $V(T_i)\cap V(T_j)=S$ for every pair of distinct integers $i,j$, $1 \leq i, j \leq \ell$. Similarly, if we only have the condition $E(T_i) \cap E(T_j )=\emptyset$ but without the condition $V(T_i)\cap V(T_j)=S$, then they are \emph{edge-disjoint Steiner trees}. The \emph{generalized $k$-connectivity}, denoted by $\kappa_k(G)$, of a graph $G$, is defined as $\kappa_k(G)=\min\{\kappa_G(S)|S \subseteq V(G) \ \textrm{and} \ |S|=k \}$, where $\kappa_G(S)$ is the maximum number of internally disjoint $S$-Steiner trees. The \emph{generalized local edge-connectivity} $\lambda_{G}(S)$ is the maximum number of edge-disjoint Steiner trees connecting $S$ in $G$. The {\it generalized $k$-edge-connectivity} $\lambda_k(G)$ of $G$ is defined as $\lambda_k(G)=\min\{\lambda_{G}(S)\,|\,S\subseteq V(G) \ and \ |S|=k\}$. These measures are generalizations of the concepts of connectivity and edge-connectivity, and they and can be used as measures of vulnerability of networks. It is, in general, difficult to compute these generalized connectivities. However, there are precise results for some special classes of graphs. In this paper, we obtain the exact value of $\lambda_{k}(S(n,\ell))$ for $3\leq k\leq \ell^n$, and the exact value of $\kappa_{k}(S(n,\ell))$ for $3\leq k\leq \ell$, where $S(n, \ell)$ is the Sierpi\'{n}ski graphs with order $\ell^n$. As a direct consequence, these graphs provide additional interesting examples when $\lambda_{k}(S(n,\ell))=\kappa_{k}(S(n,\ell))$. We also study the some network properties of Sierpi\'{n}ski graphs.</description>
      <guid isPermaLink="false">oai:arXiv.org:2310.16463v2</guid>
      <category>math.CO</category>
      <category>cs.DS</category>
      <pubDate>Thu, 29 Aug 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Chenxu Yang, Ping Li, Yaping Mao, Eddie Cheng, Ralf Klasing</dc:creator>
    </item>
  </channel>
</rss>
