<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.FL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.FL</link>
    <description>cs.FL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.FL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Oct 2024 04:03:10 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Fri, 25 Oct 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Verifying Quantum Circuits with Level-Synchronized Tree Automata (Technical Report)</title>
      <link>https://arxiv.org/abs/2410.18540</link>
      <description>arXiv:2410.18540v1 Announce Type: cross 
Abstract: We present a new method for the verification of quantum circuits based on a novel symbolic representation of sets of quantum states using level-synchronized tree automata (LSTAs). LSTAs extend classical tree automata by labeling each transition with a set of choices, which are then used to synchronize subtrees of an accepted tree. Compared to the traditional tree automata, LSTAs have an incomparable expressive power while maintaining important properties, such as closure under union and intersection, and decidable language emptiness and inclusion. We have developed an efficient and fully automated symbolic verification algorithm for quantum circuits based on LSTAs. The complexity of supported gate operations is at most quadratic, dramatically improving the exponential worst-case complexity of an earlier tree automata-based approach. Furthermore, we show that LSTAs are a promising model for parameterized verification, i.e., verifying the correctness of families of circuits with the same structure for any number of qubits involved, which principally lies beyond the capabilities of previous automated approaches. We implemented this method as a C++ tool and compared it with three symbolic quantum circuit verifiers and two simulators on several benchmark examples. The results show that our approach can solve problems with sizes orders of magnitude larger than the state of the art.</description>
      <guid isPermaLink="false">oai:arXiv.org:2410.18540v1</guid>
      <category>cs.LO</category>
      <category>cs.FL</category>
      <pubDate>Fri, 25 Oct 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Parosh Aziz Abdulla, Yo-Ga Chen, Yu-Fang Chen, Luk\'a\v{s} Hol\'ik, Ond\v{r}ej Leng\'al, Jyun-Ao Lin, Fang-Yi Lo, Wei-Lun Tsai</dc:creator>
    </item>
    <item>
      <title>Arbitrary-arity Tree Automata and QCTL</title>
      <link>https://arxiv.org/abs/2410.18799</link>
      <description>arXiv:2410.18799v1 Announce Type: cross 
Abstract: We introduce a new class of automata (which we coin EU-automata) running on infininte trees of arbitrary (finite) arity. We develop and study several algorithms to perform classical operations (union, intersection, complement, projection, alternation removal) for those automata, and precisely characterise their complexities. We also develop algorithms for solving membership and emptiness for the languages of trees accepted by EU-automata.
  We then use EU-automata to obtain several algorithmic and expressiveness results for the temporal logic QCTL (which extends CTL with quantification over atomic propositions) and for MSO. On the one hand, we obtain decision procedures with optimal complexity for QCTL satisfiability and model checking; on the other hand, we obtain an algorithm for translating any QCTL formula with k quantifier alternations to formulas with at most one quantifier alternation, at the expense of a $(k + 1)$-exponential blow-up in the size of the formulas. Using the same techniques, we prove that any MSO formula can be translated into a formula with at most four quantifier alternations (and only two second-order-quantifier alternations), again with a $(k + 1)$-exponential blow-up in the size of the formula.</description>
      <guid isPermaLink="false">oai:arXiv.org:2410.18799v1</guid>
      <category>cs.LO</category>
      <category>cs.FL</category>
      <pubDate>Fri, 25 Oct 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Fran\c{c}ois Laroussinie, Nicolas Markey</dc:creator>
    </item>
    <item>
      <title>Language Edit Distance &amp; Scored Parsing: Faster Algorithms &amp; Connection to Fundamental Graph Problems</title>
      <link>https://arxiv.org/abs/1411.7315</link>
      <description>arXiv:1411.7315v4 Announce Type: replace-cross 
Abstract: Given a context free language $\mathcal{L(G)}$ over alphabet $\Sigma$ and a string $s \in \Sigma^*$, {\em the language edit distance} problem seeks the minimum number of edits (insertions, deletions and substitutions) required to convert $s$ into a valid member of $\mathcal{L(G)}$. The well-known dynamic programming algorithm solves this problem in $O(n^3)$ time (ignoring grammar size) where $n$ is the string length [Aho, Peterson 1972, Myers 1985]. Despite its numerous applications, to date there exists no algorithm that computes exact or approximate language edit distance problem in true subcubic time.
  In this paper we give the first such algorithm that approximates language edit distance in subcubic time. For any arbitrary $\epsilon &gt; 0$, our algorithm runs in $\tilde{O}(\frac{n^{2.491}}{\epsilon^2})$ time and returns an estimate within a multiplicative approximation factor of $(1+\epsilon)$. Moreover, an additive $\epsilon n$ approximation can be computed in $O(\frac{n^2}{\epsilon^{0.825}})$ time.
  To complement our upper bound results, we show that exact computation of language edit distance with insertion-only edits in truly subcubic time will imply a truly subcubic algorithm for all-pairs shortest paths which is a long-standing open question in computer science.</description>
      <guid isPermaLink="false">oai:arXiv.org:1411.7315v4</guid>
      <category>cs.DS</category>
      <category>cs.FL</category>
      <pubDate>Fri, 25 Oct 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Tomasz Kociumaka, Barna Saha</dc:creator>
    </item>
    <item>
      <title>A formal characterization of discrete condensed objects</title>
      <link>https://arxiv.org/abs/2410.17847</link>
      <description>arXiv:2410.17847v2 Announce Type: replace-cross 
Abstract: Condensed mathematics, developed by Clausen and Scholze over the last few years, proposes a generalization of topology with better categorical properties. It replaces the concept of a topological space by that of a condensed set, which can be defined as a sheaf on a certain site of compact Hausdorff spaces. Since condensed sets are supposed to be a generalization of topological spaces, one would like to be able to study the notion of discreteness. There are various ways to define what it means for a condensed set to be discrete. In this paper we describe them, and prove that they are equivalent. The results have been fully formalized in the Lean proof assistant.</description>
      <guid isPermaLink="false">oai:arXiv.org:2410.17847v2</guid>
      <category>math.CT</category>
      <category>cs.FL</category>
      <category>cs.LO</category>
      <pubDate>Fri, 25 Oct 2024 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Dagur Asgeirsson</dc:creator>
    </item>
  </channel>
</rss>
