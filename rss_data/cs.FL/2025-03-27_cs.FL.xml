<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.FL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.FL</link>
    <description>cs.FL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.FL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Mar 2025 01:55:26 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 27 Mar 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>GrappaRE -- A Tool for Efficient Graph Recognition Based on Finite Automata and Regular Expressions</title>
      <link>https://arxiv.org/abs/2503.20467</link>
      <description>arXiv:2503.20467v1 Announce Type: new 
Abstract: A recent paper by Drewes, Hoffmann, and Minas (GCM 2023 proceedings) has shown that certain graph languages can be defined and efficiently recognized by finite automata when strings over typed symbols are interpreted as graphs. This approach has been implemented in the tool GrappaRE, which is described in this paper. GrappaRE allows for the convenient specification of graph languages through regular expressions, converts each of them into a minimized deterministic finite automaton, and checks whether it can recognize graphs without the need for backtracking. Measurements confirm that recognition runs in linear time.</description>
      <guid isPermaLink="false">oai:arXiv.org:2503.20467v1</guid>
      <category>cs.FL</category>
      <pubDate>Thu, 27 Mar 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.4204/EPTCS.417.4</arxiv:DOI>
      <arxiv:journal_reference>EPTCS 417, 2025, pp. 55-70</arxiv:journal_reference>
      <dc:creator>Mattia De Rosa (University of Salerno, Italy), Mark Minas (Universit\"at der Bundeswehr M\"unchen, Germany)</dc:creator>
    </item>
    <item>
      <title>Finite Automata for Efficient Graph Recognition</title>
      <link>https://arxiv.org/abs/2404.15052</link>
      <description>arXiv:2404.15052v2 Announce Type: replace 
Abstract: Engelfriet and Vereijken have shown that linear graph grammars based on hyperedge replacement generate graph languages that can be considered as interpretations of regular string languages over typed symbols. In this paper we show that finite automata can be lifted from strings to graphs within the same framework. For the efficient recognition of graphs with these automata, we make them deterministic by a modified powerset construction, and state sufficient conditions under which deterministic finite graph automata recognize graphs without the need to use backtracking.</description>
      <guid isPermaLink="false">oai:arXiv.org:2404.15052v2</guid>
      <category>cs.FL</category>
      <pubDate>Thu, 27 Mar 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.4204/EPTCS.417.8</arxiv:DOI>
      <arxiv:journal_reference>EPTCS 417, 2025, pp. 134-156</arxiv:journal_reference>
      <dc:creator>Frank Drewes, Berthold Hoffmann, Mark Minas</dc:creator>
    </item>
    <item>
      <title>Quantitative Semantics for Jumping Automata</title>
      <link>https://arxiv.org/abs/2405.11849</link>
      <description>arXiv:2405.11849v3 Announce Type: replace 
Abstract: Jumping automata are finite automata that read their input in a non-sequential manner, by allowing a reading head to ``jump'' between positions on the input, consuming a permutation of the input word. We argue that allowing the head to jump should incur some cost. To this end, we propose four quantitative semantics for jumping automata, whereby the jumps of the head in an accepting run define the cost of the run. The four semantics correspond to different interpretations of jumps: the absolute distance semantics counts the distance the head jumps, the maximum jump semantics counts the maximal distance the head jumps in a single step, the reversal semantics counts the number of times the head changes direction, and the Hamming distance measures the number of letter-swaps the run makes.
  We study these measures, with the main focus being the boundedness problem: given a jumping automaton, decide whether its (quantitative) languages is bounded by some given number $k$. We establish the decidability and complexity for this problem under several variants.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.11849v3</guid>
      <category>cs.FL</category>
      <category>cs.LO</category>
      <pubDate>Thu, 27 Mar 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Shaull Almagor (Technion), Neta Dafni (Technion), Ishai Salgado (Technion)</dc:creator>
    </item>
  </channel>
</rss>
