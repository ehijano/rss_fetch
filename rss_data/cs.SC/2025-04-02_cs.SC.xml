<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.SC updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.SC</link>
    <description>cs.SC updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.SC" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Apr 2025 04:00:11 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Wed, 02 Apr 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>GOL in GOL in HOL: Verified Circuits in Conway's Game of Life</title>
      <link>https://arxiv.org/abs/2504.00263</link>
      <description>arXiv:2504.00263v1 Announce Type: cross 
Abstract: Conway's Game of Life (GOL) is a cellular automaton that has captured the interest of hobbyists and mathematicians alike for more than 50 years. The Game of Life is Turing complete, and people have been building increasingly sophisticated constructions within GOL, such as 8-bit displays, Turing machines, and even an implementation of GOL itself. In this paper, we report on a project to build an implementation of GOL within GOL, via logic circuits, fully formally verified within the HOL4 theorem prover. This required a combination of interactive tactic proving, symbolic simulation, and semi-automated forward proof to assemble the components into an infinite circuit which can calculate the next step of the simulation while respecting signal propagation delays. The result is a verified "GOL in GOL compiler" which takes an initial GOL state and returns a mega-cell version of it that can be passed to off-the-shelf GOL simulators, such as Golly. We believe these techniques are also applicable to other cellular automata, as well as for hardware verification which takes into account both the physical configuration of components and wire delays.</description>
      <guid isPermaLink="false">oai:arXiv.org:2504.00263v1</guid>
      <category>cs.FL</category>
      <category>cs.LO</category>
      <category>cs.SC</category>
      <pubDate>Wed, 02 Apr 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Magnus O. Myreen, Mario Carneiro</dc:creator>
    </item>
    <item>
      <title>Brackets and Projective Geometry in Macaulay2</title>
      <link>https://arxiv.org/abs/2504.00889</link>
      <description>arXiv:2504.00889v1 Announce Type: cross 
Abstract: We introduce the Brackets package for the computer algebra system Macaulay2, which provides convenient syntax for computations involving the classical invariants of the special linear group. We describe our implementation of bracket rings and Grassmann-Cayley algebras, and illustrate basic functionality such as the straightening algorithm on examples from projective and enumerative geometry.</description>
      <guid isPermaLink="false">oai:arXiv.org:2504.00889v1</guid>
      <category>math.AG</category>
      <category>cs.SC</category>
      <pubDate>Wed, 02 Apr 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Dalton Bidleman, Timothy Duff, Jack Kendrick, Michael Zeng</dc:creator>
    </item>
  </channel>
</rss>
