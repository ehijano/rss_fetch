<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.LO updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.LO</link>
    <description>cs.LO updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.LO" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Jul 2024 04:00:11 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Tue, 09 Jul 2024 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>On the Decidability of Presburger Arithmetic Expanded with Powers</title>
      <link>https://arxiv.org/abs/2407.05191</link>
      <description>arXiv:2407.05191v1 Announce Type: new 
Abstract: We prove that for any integers $\alpha, \beta &gt; 1$, the existential fragment of the first-order theory of the structure $\langle \mathbb{Z}; 0,1,&lt;, +, \alpha^{\mathbb{N}}, \beta^{\mathbb{N}}\rangle$ is decidable (where $\alpha^{\mathbb{N}}$ is the set of positive integer powers of $\alpha$, and likewise for $\beta^{\mathbb{N}}$). On the other hand, we show by way of hardness that decidability of the existential fragment of the theory of $\langle \mathbb{N}; 0,1, &lt;, +, x\mapsto \alpha^x, x \mapsto \beta^x\rangle$ for any multiplicatively independent $\alpha,\beta &gt; 1$ would lead to mathematical breakthroughs regarding base-$\alpha$ and base-$\beta$ expansions of certain transcendental numbers.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.05191v1</guid>
      <category>cs.LO</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Toghrul Karimov, Florian Luca, Joris Nieuwveld, Jo\"el Ouaknine, James Worrell</dc:creator>
    </item>
    <item>
      <title>A Higher-Order Vampire (Short Paper)</title>
      <link>https://arxiv.org/abs/2407.05208</link>
      <description>arXiv:2407.05208v1 Announce Type: new 
Abstract: The support for higher-order reasoning in the Vampire theorem prover has recently been completely reworked. This rework consists of new theoretical ideas, a new implementation, and a dedicated strategy schedule. The theoretical ideas are still under development, so we discuss them at a high level in this paper. We also describe the implementation of the calculus in the Vampire theorem prover, the strategy schedule construction and several empirical performance statistics.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.05208v1</guid>
      <category>cs.LO</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Ahmed Bhayat, Martin Suda</dc:creator>
    </item>
    <item>
      <title>The Size-Change Principle for Mixed Inductive and Coinductive types</title>
      <link>https://arxiv.org/abs/2407.05715</link>
      <description>arXiv:2407.05715v1 Announce Type: new 
Abstract: This paper shows how to use Lee, Jones and Ben Amram's size-change principle to check correctness of arbitrary recursive definitions in an ML / Haskell like programming language with inductive and coinductive types.Naively using the size-change principle to check productivity and termination is straightforward but unsound when inductive and coinductive types arenested. We can however adapt the size-change principle to check ``totality'', which corresponds exactly to correctness with respect to the corresponding (co)inductive type.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.05715v1</guid>
      <category>cs.LO</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Pierre Hyvernat (LAMA)</dc:creator>
    </item>
    <item>
      <title>Proceedings Workshop on Logical Frameworks and Meta-Languages: Theory and Practice</title>
      <link>https://arxiv.org/abs/2407.05822</link>
      <description>arXiv:2407.05822v1 Announce Type: new 
Abstract: Logical frameworks and meta-languages form a common substrate for representing, implementing and reasoning about a wide variety of deductive systems of interest in logic and computer science. Their design, implementation and their use in reasoning tasks, ranging from the correctness of software to the properties of formal systems, have been the focus of considerable research over the last three decades.
  The LFMTP workshop brought together designers, implementors and practitioners to discuss various aspects impinging on the structure and utility of logical frameworks, including the treatment of variable binding, inductive and co-inductive reasoning techniques and the expressiveness and lucidity of the reasoning process.
  The 2024 instance of LFMTP was organized by Florian Rabe and Claudio Sacerdoti Coen in Tallinn, Estonia, the 8th July, as a satellite event of the FSCD conference. The workshop received 8 submissions, of which 6 were presented at the workshop. Of these, 2 were work-in-progress presentations, and 4 were accepted for these formal proceedings. Additionally, Carsten Sch\"urmann of IT University of Copenhagen gave an invited talk on Nominal State Separating Proofs.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.05822v1</guid>
      <category>cs.LO</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <arxiv:DOI>10.4204/EPTCS.404</arxiv:DOI>
      <arxiv:journal_reference>EPTCS 404, 2024</arxiv:journal_reference>
      <dc:creator>Florian Rabe (University Erlangen-Nuremberg), Claudio Sacerdoti Coen (University of Bologna)</dc:creator>
    </item>
    <item>
      <title>Bridging abstract dialectical argumentation and Boolean gene regulation</title>
      <link>https://arxiv.org/abs/2407.06106</link>
      <description>arXiv:2407.06106v1 Announce Type: new 
Abstract: This paper leans on two similar areas so far detached from each other. On the one hand, Dung's pioneering contributions to abstract argumentation, almost thirty years ago, gave rise to a plethora of successors, including abstract dialectical frameworks (ADFs). On the other hand, Boolean networks (BNs), devised as models of gene regulation, have been successful for studying the behavior of molecular processes within cells. ADFs and BNs are similar to each other: both can be viewed as functions from vectors of bits to vectors of bits. As soon as similarities emerge between these two formalisms, however, differences appear. For example, conflict-freedom is prominent in argumentation (where we are interested in a self-consistent, i.e., conflict-free, set of beliefs) but absent in BNs. By contrast, asynchrony (where only one gene is updated at a time) is conspicuous in BNs and lacking in argumentation. Finally, while a monotonicity-based notion occurs in signed reasoning of both argumentation and gene regulation, a different, derivative-based notion only appears in the BN literature. To identify common mathematical structure between both formalisms, these differences need clarification. This contribution is a partial review of both these areas, where we cover enough ground to exhibit their more evident similarities, to then reconcile some of their apparent differences. We highlight a range of avenues of research resulting from ironing out discrepancies between these two fields. Unveiling their common concerns should enable these two areas to cross-fertilize so as to transfer ideas and results between each other.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.06106v1</guid>
      <category>cs.LO</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Eugenio Azpeitia, Stan Mu\~noz Guti\'errez, David A. Rosenblueth, Octavio Zapata</dc:creator>
    </item>
    <item>
      <title>Left-Linear Rewriting in Adhesive Categories</title>
      <link>https://arxiv.org/abs/2407.06181</link>
      <description>arXiv:2407.06181v1 Announce Type: new 
Abstract: When can two sequential steps performed by a computing device be considered (causally) independent? This is a relevant question for concurrent and distributed systems, since independence means that they could be executed in any order, and potentially in parallel. Equivalences identifying rewriting sequences which differ only for independent steps are at the core of the theory of concurrency of many formalisms. We investigate the issue in the context of the double pushout approach to rewriting in the general setting of adhesive categories. While a consolidated theory exists for linear rules,which can consume, preserve and generate entities, this paper focuses on left-linear rules which may also "merge" parts of the state. This is an apparently minimal, yet technically hard enhancement,since a standard characterisation of independence that - in the linear case - allows one to derive a number of properties, essential in the development of a theory of concurrency, no longer holds. The paper performs an in-depth study of the notion of independence for left-linear rules: it introduces a novel characterisation of independence, identifies well-behaved classes of left-linear rewriting systems,and provides some fundamental results including a Church-Rosser property and the existence of canonical equivalence proofs for concurrent computations. These results properly extends the class of formalisms that can be modelled in the adhesive framework</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.06181v1</guid>
      <category>cs.LO</category>
      <category>math.CT</category>
      <category>math.LO</category>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-sa/4.0/</dc:rights>
      <dc:creator>Paolo Baldan, Davide Castelnovo, Andrea Corradini, Fabio Gadducci</dc:creator>
    </item>
    <item>
      <title>The Reachability Problem for Neural-Network Control Systems</title>
      <link>https://arxiv.org/abs/2407.04988</link>
      <description>arXiv:2407.04988v1 Announce Type: cross 
Abstract: A control system consists of a plant component and a controller which periodically computes a control input for the plant. We consider systems where the controller is implemented by a feedforward neural network with ReLU activations. The reachability problem asks, given a set of initial states, whether a set of target states can be reached. We show that this problem is undecidable even for trivial plants and fixed-depth neural networks with three inputs and outputs. We also show that the problem becomes semi-decidable when the plant as well as the input and target sets are given by automata over infinite words.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.04988v1</guid>
      <category>cs.LG</category>
      <category>cs.CC</category>
      <category>cs.LO</category>
      <category>cs.SY</category>
      <category>eess.SY</category>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <arxiv:journal_reference>AISoLA 2023</arxiv:journal_reference>
      <dc:creator>Christian Schilling, Martin Zimmermann</dc:creator>
    </item>
    <item>
      <title>Synthetic Test Data Generation Using Recurrent Neural Networks: A Position Paper</title>
      <link>https://arxiv.org/abs/2407.05410</link>
      <description>arXiv:2407.05410v1 Announce Type: cross 
Abstract: Testing in production-like test environments is an essential part of quality assurance processes in many industries. Provisioning of such test environments, for information-intensive services, involves setting up databases that are rich-enough to enable simulating a wide variety of user scenarios. While production data is perhaps the gold-standard here, many organizations, particularly within the public sectors, are not allowed to use production data for testing purposes due to privacy concerns. The alternatives are to use anonymized data, or synthetically generated data. In this paper, we elaborate on these alternatives and compare them in an industrial context. Further we focus on synthetic data generation and investigate the use of recurrent neural networks for this purpose. In our preliminary experiments, we were able to generate representative and highly accurate data using a recurrent neural network. These results open new research questions that we discuss here, and plan to investigate in our future research.</description>
      <guid isPermaLink="false">oai:arXiv.org:2407.05410v1</guid>
      <category>cs.SE</category>
      <category>cs.DB</category>
      <category>cs.LG</category>
      <category>cs.LO</category>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <arxiv:DOI>10.1109/RAISE.2019.00012</arxiv:DOI>
      <arxiv:journal_reference>Proceedings of the 7th International Workshop on Realizing Artificial Intelligence Synergies in Software Engineering, RAISE@ICSE 2019, (2019), 22-27</arxiv:journal_reference>
      <dc:creator>Razieh Behjati, Erik Arisholm, Chao Tan, Margrethe M. Bedregal</dc:creator>
    </item>
    <item>
      <title>Normative Conditional Reasoning as a Fragment of HOL</title>
      <link>https://arxiv.org/abs/2308.10686</link>
      <description>arXiv:2308.10686v4 Announce Type: replace 
Abstract: We report on the mechanization of (preference-based) conditional normative reasoning. Our focus is on Aqvist's system E for conditional obligation, and its extensions. Our mechanization is achieved via a shallow semantical embedding in Isabelle/HOL. We consider two possible uses of the framework. The first one is as a tool for meta-reasoning about the considered logic. We employ it for the automated verification of deontic correspondences (broadly conceived) and related matters, analogous to what has been previously achieved for the modal logic cube. The equivalence is automatically verified in one direction, leading from the property to the axiom. The second use is as a tool for assessing ethical arguments. We provide a computer encoding of a well-known paradox (or impossibility theorem) in population ethics, Parfit's repugnant conclusion. While some have proposed overcoming the impossibility theorem by abandoning the presupposed transitivity of ''better than'', our formalisation unveils a less extreme approach, suggesting among other things the option of weakening transitivity suitably rather than discarding it entirely. Whether the presented encoding increases or decreases the attractiveness and persuasiveness of the repugnant conclusion is a question we would like to pass on to philosophy and ethics.</description>
      <guid isPermaLink="false">oai:arXiv.org:2308.10686v4</guid>
      <category>cs.LO</category>
      <category>cs.AI</category>
      <category>cs.SC</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Xavier Parent, Christoph Benzm\"uller</dc:creator>
    </item>
    <item>
      <title>DeLaM: A Dependent Layered Modal Type Theory for Meta-programming</title>
      <link>https://arxiv.org/abs/2404.17065</link>
      <description>arXiv:2404.17065v2 Announce Type: replace 
Abstract: We scale layered modal type theory to dependent types, introducing DeLaM, dependent layered modal type theory. This type theory is novel in that we have one uniform type theory in which we can not only compose and execute code, but also intensionally analyze the code of types and terms. The latter in particular allows us to write tactics as meta-programs and use regular libraries when writing tactics. DeLaM provides a sound foundation for proof assistants to support type-safe tactic mechanism.</description>
      <guid isPermaLink="false">oai:arXiv.org:2404.17065v2</guid>
      <category>cs.LO</category>
      <category>cs.PL</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Jason Z. S. Hu, Brigitte Pientka</dc:creator>
    </item>
    <item>
      <title>Parameterized Dynamic Logic -- Towards A Cyclic Logical Framework for General Program Specification and Verification</title>
      <link>https://arxiv.org/abs/2404.18098</link>
      <description>arXiv:2404.18098v2 Announce Type: replace 
Abstract: Dynamic logic and its variations, because of their clear and expressive forms for capturing program properties, have been used as formalisms in program/system specification and verification for years and have many other applications. The program models of dynamic logics are in explicit forms. For different target program models, different dynamic logic theories have to be proposed to adapt different models' semantics. In this paper, we propose a parameterized `dynamic-logic-style' formalism, namely $DL_p$, for specifying and reasoning about general program models. In $DL_p$, program models and logical formulas are taken as `parameters', allowing arbitrary forms according to different interested domains. This characteristic allows $DL_p$ to support direct reasoning based on the operational semantics of program models, while still preserving compositional reasoning based on syntactic structures. $DL_p$ provides a flexible verification framework to encompass different dynamic logic theories. In addition, it also facilitates reasoning about program models whose semantics is not compositional, examples are neural networks, automata-based models, synchronous programming languages, etc. We mainly focus on building the theory of $DL_p$, including defining its syntax and semantics, building a proof system and constructing a cyclic preproof structure. We analyze and prove the soundness of $DL_p$. Case studies show how $DL_p$ works for reasoning about different types of program models.</description>
      <guid isPermaLink="false">oai:arXiv.org:2404.18098v2</guid>
      <category>cs.LO</category>
      <category>cs.SE</category>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Yuanrui Zhang</dc:creator>
    </item>
    <item>
      <title>Specifying a Game-Theoretic Extensive Form as an Abstract 5-ary Relation</title>
      <link>https://arxiv.org/abs/2107.10801</link>
      <description>arXiv:2107.10801v5 Announce Type: replace-cross 
Abstract: This paper specifies an extensive form as a 5-ary relation (that is, as a set of quintuples) which satisfies eight abstract axioms. Each quintuple is understood to list a player, a situation (that is, a name for an information set), a decision node, an action, and a successor node. Accordingly, the axioms are understood to specify abstract relationships between players, situations, nodes, and actions. Such an extensive form is called a "pentaform". Finally, a "pentaform game" is defined to be a pentaform together with utility functions.
  To ground this new specification in the literature, the paper defines the concept of a "traditional game" to represent the literature's many specifications of finite-horizon and infinite-horizon games. The paper's main result is to construct an intuitive bijection between pentaform games and traditional games. Secondary results concern disaggregating pentaforms by subsets, constructing pentaforms by unions, and initial pentaform applications to Selten subgames and perfect-recall (an extensive application to dynamic programming is in Streufert 2023, arXiv:2302.03855).</description>
      <guid isPermaLink="false">oai:arXiv.org:2107.10801v5</guid>
      <category>econ.TH</category>
      <category>cs.GT</category>
      <category>cs.LO</category>
      <category>math.OC</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Peter A. Streufert</dc:creator>
    </item>
    <item>
      <title>DECIDER: A Dual-System Rule-Controllable Decoding Framework for Language Generation</title>
      <link>https://arxiv.org/abs/2403.01954</link>
      <description>arXiv:2403.01954v3 Announce Type: replace-cross 
Abstract: Constrained decoding approaches aim to control the meaning or style of text generated by a Pre-trained Language Model (PLM) using specific target words during inference. However, these methods often guide plausible continuations by greedily selecting targets, which, while completing the task, may disrupt the natural patterns of human language generation. In this work, we propose a novel decoding framework, DECIDER, which enables us to program rules on how we complete tasks to control a PLM. Differing from previous work, our framework transforms the encouragement of target words into the encouragement of all words that satisfy the rule. Specifically, DECIDER is a dual system where a PLM is equipped with a First-OrderLogic (FOL) reasoner to express and evaluate the rules, and a decision function to merge the outputs from both systems to steer the generation. Experiments on CommonGen and PersonaChat demonstrate that DECIDER can effectively follow given rules to achieve generation tasks in a more human-like manner.</description>
      <guid isPermaLink="false">oai:arXiv.org:2403.01954v3</guid>
      <category>cs.CL</category>
      <category>cs.AI</category>
      <category>cs.LO</category>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Chen Xu, Tian Lan, Changlong Yu, Wei Wang, Jun Gao, Yu Ji, Qunxi Dong, Kun Qian, Piji Li, Wei Bi, Bin Hu</dc:creator>
    </item>
  </channel>
</rss>
