<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.DS updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.DS</link>
    <description>cs.DS updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.DS" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Jan 2025 05:00:11 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Fri, 24 Jan 2025 00:00:00 -0500</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Complexity and Algorithm for the Matching vertex-cutset Problem</title>
      <link>https://arxiv.org/abs/2501.13217</link>
      <description>arXiv:2501.13217v1 Announce Type: new 
Abstract: In 1985, Chv\'{a}tal introduced the concept of star cutsets as a means to investigate the properties of perfect graphs, which inspired many researchers to study cutsets with some specific structures, for example, star cutsets, clique cutsets, stable cutsets. In recent years, approximation algorithms have developed rapidly, the computational complexity associated with determining the minimum vertex cut possessing a particular structural property have attracted considerable academic attention.
  In this paper, we demonstrate that determining whether there is a matching vertex-cutset in $H$ with size at most $k$, is $\mathbf{NP}$-complete, where $k$ is a given positive integer and $H$ is a connected graph. Furthermore, we demonstrate that for a connected graph $H$, there exists a $2$-approximation algorithm in $O(nm^2)$ for us to find a minimum matching vertex-cutset. Finally, we show that every plane graph $H$ satisfying $H\not\in\{K_2, K_4\}$ contains a matching vertex-cutset with size at most three, and this bound is tight.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.13217v1</guid>
      <category>cs.DS</category>
      <category>math.CO</category>
      <pubDate>Fri, 24 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Hengzhe Li, Qiong Wang, Jianbing Liu, Yanhong Gao</dc:creator>
    </item>
    <item>
      <title>Markovian Search with Socially Aware Constraints</title>
      <link>https://arxiv.org/abs/2501.13346</link>
      <description>arXiv:2501.13346v1 Announce Type: new 
Abstract: We study a general class of sequential search problems for selecting multiple candidates from different societal groups under "ex-ante constraints" aimed at producing socially desirable outcomes, such as demographic parity, diversity quotas, or subsidies for disadvantaged groups. Starting with the canonical Pandora's box model [Weitzman, 1978] under a single affine constraint on selection and inspection probabilities, we show that the optimal constrained policy retains an index-based structure similar to the unconstrained case, but may randomize between two dual-based adjustments that are both easy to compute and economically interpretable. We then extend our results to handle multiple affine constraints by reducing the problem to a variant of the exact Carath\'eodory problem and providing a novel polynomial-time algorithm to generate an optimal randomized dual-adjusted index-based policy that satisfies all constraints simultaneously. Building on these insights, we consider richer search processes (e.g., search with rejection and multistage search) modeled by joint Markov scheduling (JMS) [Dumitriu et al., 2003; Gittins, 1979]. By imposing general affine and convex ex-ante constraints, we develop a primal-dual algorithm that randomizes over a polynomial number of dual-based adjustments to the unconstrained JMS Gittins indices, yielding a near-feasible, near-optimal policy. Our approach relies on the key observation that a suitable relaxation of the Lagrange dual function for these constrained problems admits index-based policies akin to those in the unconstrained setting. Using a numerical study, we investigate the implications of imposing various constraints, in particular the utilitarian loss (price of fairness), and whether these constraints induce their intended societally desirable outcomes.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.13346v1</guid>
      <category>cs.DS</category>
      <category>cs.GT</category>
      <category>econ.TH</category>
      <category>math.OC</category>
      <pubDate>Fri, 24 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Mohammad Reza Aminian, Vahideh Manshadi, Rad Niazadeh</dc:creator>
    </item>
    <item>
      <title>New Oracles and Labeling Schemes for Vertex Cut Queries</title>
      <link>https://arxiv.org/abs/2501.13596</link>
      <description>arXiv:2501.13596v1 Announce Type: new 
Abstract: We study succinct representations of vertex cuts by centralized oracles and labeling schemes. For an undirected $n$-vertex graph $G = (V,E)$ and integer parameter $f \geq 1$, the goal is supporting vertex cut queries: Given $F \subseteq V$ with $|F| \leq f$, determine if $F$ is a vertex cut in $G$. In the centralized data structure setting, it is required to preprocess $G$ into an $f$-vertex cut oracle that can answer such queries quickly, while occupying only small space. In the labeling setting, one should assign a short label to each vertex in $G$, so that a cut query $F$ can be answered by merely inspecting the labels assigned to the vertices in $F$. While the ``$st$ cut variants'' of the above problems have been extensively researched and are known to admit very efficient solutions, the basic ``cut query'' setting is essentially open (particularly for $f &gt; 3$). This work achieves the first significant progress on these problems:
  [$f$-Vertex Cut Oracles:] Every $n$-vertex graph $G$ admits $f$-vertex cut oracle with $\tilde{O}(2^{2f} n)$ space and $\tilde{O}(2^{2f})$ query time, hence almost optimal for $f=o(\log n)$. In case $G$ is $f$-connected (namely, when interested in minimum vertex cut queries), the space and query time improve to $\tilde{O}(f n)$ and $\tilde{O}(f^2)$, respectively.
  [$f$-Vertex Cut Labels:] Every $n$-vertex graph admits an $f$-vertex cut labeling scheme, where the labels have length of $\tilde{O}(n^{1-1/f})$ bits (when $f$ is polylogarithmic in $n$). This nearly matches the recent lower bound given by Long, Pettie and Saranurak (SODA 2025).</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.13596v1</guid>
      <category>cs.DS</category>
      <pubDate>Fri, 24 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Yonggang Jiang, Merav Parter, Asaf Petruschka</dc:creator>
    </item>
    <item>
      <title>Corecursive Coding of High Computational Derivatives and Power Series</title>
      <link>https://arxiv.org/abs/2501.13194</link>
      <description>arXiv:2501.13194v1 Announce Type: cross 
Abstract: We discuss the functional lazy techniques in generation and handling of arbitrarily long sequences of derivatives of numerical expressions in one ``variable''; the domain to which the paper belongs is usually nicknamed ``Automatic differentiation''. Two models thereof are considered, the chains of ``pure'' derivatives, and the infinite power series, similar, but algorithmically a bit different. We deal with their arithmetic/algebra, and with more convoluted procedures, such as composition and reversion. Some more specific applications of these structures are also presented.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.13194v1</guid>
      <category>cs.PL</category>
      <category>cs.DS</category>
      <pubDate>Fri, 24 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Jerzy Karczmarczuk</dc:creator>
    </item>
    <item>
      <title>Graphs with no long claws: An improved bound for the analog of the Gy\'{a}rf\'{a}s' path argument</title>
      <link>https://arxiv.org/abs/2501.13907</link>
      <description>arXiv:2501.13907v1 Announce Type: cross 
Abstract: For a fixed integer $t \geq 1$, a ($t$-)long claw, denoted $S_{t,t,t}$, is the unique tree with three leaves, each at distance exactly $t$ from the vertex of degree three. Majewski et al. [ICALP 2022, ACM ToCT 2024] proved an analog of the Gy\'{a}rf\'{a}s' path argument for $S_{t,t,t}$-free graphs: given an $n$-vertex $S_{t,t,t}$-free graph, one can delete neighborhoods of $\mathcal{O}(\log n)$ vertices so that the remainder admits an extended strip decomposition (an appropriate generalization of partition into connected components) into particles of multiplicatively smaller size. This statement has proven to be very useful in designing quasi-polynomial time algorithms for Maximum Weight Independent Set and related problems in $S_{t,t,t}$-free graphs.
  In this work, we refine the argument of Majewski et al. and show that a constant number of neighborhoods suffice.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.13907v1</guid>
      <category>math.CO</category>
      <category>cs.DM</category>
      <category>cs.DS</category>
      <pubDate>Fri, 24 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Romain Bourneuf, Jana Masa\v{r}\'ikov\'a, Wojciech Nadara, Marcin Pilipczuk</dc:creator>
    </item>
    <item>
      <title>Online Interval Scheduling with Predictions</title>
      <link>https://arxiv.org/abs/2302.13701</link>
      <description>arXiv:2302.13701v2 Announce Type: replace 
Abstract: In online interval scheduling, the input is an online sequence of intervals, and the goal is to accept a maximum number of non-overlapping intervals. In the more general disjoint path allocation problem, the input is a sequence of requests, each consisting of pairs of vertices of a known graph, and the goal is to accept a maximum number of requests forming edge-disjoint paths between accepted pairs. We study a setting with a potentially erroneous prediction specifying the set of requests forming the input sequence and provide tight upper and lower bounds on the competitive ratios of online algorithms as a function of the prediction error. We also present asymptotically tight trade-offs between consistency (competitive ratio with error-free predictions) and robustness (competitive ratio with adversarial predictions) of interval scheduling algorithms. Finally, we provide experimental results on real-world scheduling workloads that confirm our theoretical analysis.</description>
      <guid isPermaLink="false">oai:arXiv.org:2302.13701v2</guid>
      <category>cs.DS</category>
      <pubDate>Fri, 24 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Joan Boyar, Lene M. Favrholdt, Shahin Kamali, Kim S. Larsen</dc:creator>
    </item>
    <item>
      <title>Tight bounds for the sensitivity of CDAWGs with left-end edits</title>
      <link>https://arxiv.org/abs/2303.01726</link>
      <description>arXiv:2303.01726v4 Announce Type: replace 
Abstract: Compact directed acyclic word graphs (CDAWGs) [Blumer et al. 1987] are a fundamental data structure on strings with applications in text pattern searching, data compression, and pattern discovery. Intuitively, the CDAWG of a string $T$ is obtained by merging isomorphic subtrees of the suffix tree [Weiner 1973] of the same string $T$, thus CDAWGs are a compact indexing structure. In this paper, we investigate the sensitivity of CDAWGs when a single character edit operation (insertion, deletion, or substitution) is performed at the left-end of the input string $T$, namely, we are interested in the worst-case increase in the size of the CDAWG after a left-end edit operation. We prove that if $e$ is the number of edges of the CDAWG for string $T$, then the number of new edges added to the CDAWG after a left-end edit operation on $T$ does not exceed $e$. Further, we present a matching lower bound on the sensitivity of CDAWGs for left-end insertions, and almost matching lower bounds for left-end deletions and substitutions. We then generalize our lower-bound instance for left-end insertions to leftward online construction of the CDAWG, and show that it requires $\Omega(n^2)$ time for some string of length $n$.</description>
      <guid isPermaLink="false">oai:arXiv.org:2303.01726v4</guid>
      <category>cs.DS</category>
      <pubDate>Fri, 24 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Hiroto Fujimaru, Yuto Nakashima, Shunsuke Inenaga</dc:creator>
    </item>
    <item>
      <title>An Efficient Algorithm for Permutation Iteration Using a Singly Linked List</title>
      <link>https://arxiv.org/abs/2501.10102</link>
      <description>arXiv:2501.10102v3 Announce Type: replace 
Abstract: We present a new algorithm for iterating over all permutations of a sequence. The algorithm leverages elementary $O(1)$ operations on recursive lists. As a result, no new nodes are allocated during the computation. Instead, all elements are rearranged within the original nodes of the singly linked list throughout the process. While permutations are generated in an unusual order, the transitions between consecutive permutations remain smooth. A proof of concept written in the Lisp programming language is proposed and discussed.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.10102v3</guid>
      <category>cs.DS</category>
      <category>cs.DM</category>
      <category>math.CO</category>
      <pubDate>Fri, 24 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by-sa/4.0/</dc:rights>
      <dc:creator>Thomas Baruchel</dc:creator>
    </item>
    <item>
      <title>Guaranteed Recovery of Unambiguous Clusters</title>
      <link>https://arxiv.org/abs/2501.13093</link>
      <description>arXiv:2501.13093v2 Announce Type: replace-cross 
Abstract: Clustering is often a challenging problem because of the inherent ambiguity in what the "correct" clustering should be. Even when the number of clusters $K$ is known, this ambiguity often still exists, particularly when there is variation in density among different clusters, and clusters have multiple relatively separated regions of high density. In this paper we propose an information-theoretic characterization of when a $K$-clustering is ambiguous, and design an algorithm that recovers the clustering whenever it is unambiguous. This characterization formalizes the situation when two high density regions within a cluster are separable enough that they look more like two distinct clusters than two truly distinct clusters in the clustering. The algorithm first identifies $K$ partial clusters (or "seeds") using a density-based approach, and then adds unclustered points to the initial $K$ partial clusters in a greedy manner to form a complete clustering. We implement and test a version of the algorithm that is modified to effectively handle overlapping clusters, and observe that it requires little parameter selection and displays improved performance on many datasets compared to widely used algorithms for non-convex cluster recovery.</description>
      <guid isPermaLink="false">oai:arXiv.org:2501.13093v2</guid>
      <category>cs.IT</category>
      <category>cs.AI</category>
      <category>cs.DS</category>
      <category>cs.LG</category>
      <category>math.IT</category>
      <category>math.ST</category>
      <category>stat.TH</category>
      <pubDate>Fri, 24 Jan 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Kayvon Mazooji, Ilan Shomorony</dc:creator>
    </item>
  </channel>
</rss>
