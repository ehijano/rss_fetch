<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.CG updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.CG</link>
    <description>cs.CG updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.CG" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Apr 2025 04:00:00 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Fri, 04 Apr 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Saturday</day>
      <day>Sunday</day>
    </skipDays>
    <item>
      <title>Determining Sphere Radius through Pairwise Distances</title>
      <link>https://arxiv.org/abs/2504.02334</link>
      <description>arXiv:2504.02334v1 Announce Type: new 
Abstract: We propose a novel method for determining the radius of a spherical surface based on the distances measured between points on this surface. We consider the most general case of determining the radius when the distances are measured with errors and the sphere has random deviations from its ideal shape. For the solution, we used the minimally necessary four points and an arbitrary N number of points. We provide a new closed form solution for the radius of the sphere through the matrix of pairwise distances. We also determine the standard deviation of the radius estimate caused by measurement errors and deviations of the sphere from its ideal shape. We found optimal configurations of points on the sphere that provide the minimum standard deviation of the radius estimate. This paper describes our solution and provides all the mathematical derivations. We share the implementation of our method as open source code at https://github.com/boris-sukhovilov/Sphere_Radius.</description>
      <guid isPermaLink="false">oai:arXiv.org:2504.02334v1</guid>
      <category>cs.CG</category>
      <category>cs.CV</category>
      <pubDate>Fri, 04 Apr 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Boris Sukhovilov</dc:creator>
    </item>
    <item>
      <title>Instance-Optimal Imprecise Convex Hull</title>
      <link>https://arxiv.org/abs/2504.02611</link>
      <description>arXiv:2504.02611v1 Announce Type: new 
Abstract: Imprecise measurements of a point set P = (p1, ..., pn) can be modelled by a family of regions F = (R1, ..., Rn), where each imprecise region Ri contains a unique point pi. A retrieval models an accurate measurement by replacing an imprecise region Ri with its corresponding point pi. We construct the convex hull of an imprecise point set in the plane, where regions in F may be retrieved at unit cost. The goal is to determine the cyclic ordering of the convex hull vertices of P as efficiently as possible. Here, efficiency is interpreted in two ways: (i) minimising the number of retrievals, and (ii) computing each retrieval location quickly.
  Prior works focused on only one of these two aspects: either minimising retrievals or optimising algorithmic runtime. Our contribution is the first to simultaneously achieve both. Let r(F, P) denote the minimal number of retrievals required by any algorithm to determine the convex hull of P for a given instance (F, P). For a family F of n constant-complexity polygons, our main result is a reconstruction algorithm that performs O(r(F, P)) retrievals in O(r(F, P) log^3 n) time.
  Compared to previous approaches that achieve optimal retrieval counts, we improve the runtime per retrieval by a exponential factor, from polynomial to polylogarithmic. Compared to near-linear time algorithms, we significantly reduce the number of retrievals used, and broaden the input families to include overlapping regions. We further extend our results to simple k-gons and to pairwise disjoint disks with radii in [1,k], where our runtime scales linearly with k.</description>
      <guid isPermaLink="false">oai:arXiv.org:2504.02611v1</guid>
      <category>cs.CG</category>
      <pubDate>Fri, 04 Apr 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Sarita de Berg, Ivor van der Hoog, Eva Rotenberg, Daniel Rutschmann, Sampson Wong</dc:creator>
    </item>
    <item>
      <title>Investigating Simple Drawings of $K_n$ using SAT</title>
      <link>https://arxiv.org/abs/2504.02650</link>
      <description>arXiv:2504.02650v1 Announce Type: new 
Abstract: We present a SAT framework which allows to investigate properties of simple drawings of the complete graph $K_n$ using the power of AI. In contrast to classic imperative programming, where a program is operated step by step, our framework models mathematical questions as Boolean formulas which are then solved using modern SAT solvers. Our framework for simple drawings is based on a characterization via rotation systems and finite forbidden substructures. We showcase its universality by addressing various open problems, reproving previous computational results and deriving several new computational results. In particular, we test and progress on several unavoidable configurations such as variants of Rafla's conjecture on plane Hamiltonian cycles, Harborth's conjecture on empty triangles, and crossing families for general simple drawings as well as for various subclasses. Moreover, based our computational results we propose some new challenging conjectures.</description>
      <guid isPermaLink="false">oai:arXiv.org:2504.02650v1</guid>
      <category>cs.CG</category>
      <category>cs.DM</category>
      <category>math.CO</category>
      <pubDate>Fri, 04 Apr 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Helena Bergold, Manfred Scheucher</dc:creator>
    </item>
    <item>
      <title>A PTAS for Travelling Salesman Problem with Neighbourhoods Over Parallel Line Segments of Similar Length</title>
      <link>https://arxiv.org/abs/2504.02190</link>
      <description>arXiv:2504.02190v1 Announce Type: cross 
Abstract: We consider the Travelling Salesman Problem with Neighbourhoods (TSPN) on the Euclidean plane ($\RR^2$) and present a Polynomial-Time Approximation Scheme (PTAS) when the neighbourhoods are parallel line segments with lengths between $ [1, \lambda] $ for any constant value $ \lambda \ge 1 $.
  In TSPN (which generalizes classic TSP), each client represents a set (or neighbourhood) of points in a metric
  and the goal is to find a minimum cost TSP tour that visits
  at least one point from each client set. In the Euclidean setting, each neighbourhood is a region on the plane.
  TSPN is significantly more difficult than classic TSP even in the Euclidean setting, as it captures group TSP.
  A notable case of TSPN is when each neighbourhood is a line segment. Although there are PTASs for when
  neighbourhoods are fat objects (with limited overlap), TSPN over line segments is \textbf{APX}-hard even if all
  the line segments have unit length. For parallel (unit) line segments, the best approximation factor is $3\sqrt2$ from more than two decades ago \cite{DM03}.
  The PTAS we present in this paper settles the approximability of this case of the problem. Our algorithm finds a $ (1 + \eps) $-factor approximation for an instance of the problem for $n$ segments with lengths in $ [1,\lambda] $ in time $ n^{O(\lambda/\eps^3)} $.</description>
      <guid isPermaLink="false">oai:arXiv.org:2504.02190v1</guid>
      <category>cs.DS</category>
      <category>cs.CG</category>
      <pubDate>Fri, 04 Apr 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Benyamin Ghaseminia, Mohammad R. Salavatipour</dc:creator>
    </item>
  </channel>
</rss>
