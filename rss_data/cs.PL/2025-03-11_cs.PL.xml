<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.PL updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.PL</link>
    <description>cs.PL updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.PL" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Mar 2025 04:00:00 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Wed, 12 Mar 2025 00:00:00 -0400</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>A Probabilistic Choreography Language for PRISM</title>
      <link>https://arxiv.org/abs/2503.08530</link>
      <description>arXiv:2503.08530v1 Announce Type: cross 
Abstract: We present a choreographic framework for modelling and
  analysing concurrent probabilistic systems based on the PRISM
  model-checker. This is achieved through the development of a
  choreography language, which is a specification language that allows
  to describe the desired interactions within a concurrent system from
  a global viewpoint. Using choreographies gives a clear and complete
  view of system interactions, making it easier to understand the
  process flow and identify potential errors, which helps ensure
  correct execution and improves system reliability. We equip our
  language with a probabilistic semantics and then define a formal
  encoding into the PRISM language and discuss its
  correctness. Properties of programs written in our choreographic
  language can be model-checked by the PRISM model-checker via their
  translation into the PRISM language. Finally, we implement a
  compiler for our language and demonstrate its practical
  applicability via examples drawn from the use cases featured in the
  PRISM website.</description>
      <guid isPermaLink="false">oai:arXiv.org:2503.08530v1</guid>
      <category>cs.LO</category>
      <category>cs.PL</category>
      <pubDate>Wed, 12 Mar 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Marco Carbone, Adele Veschetti</dc:creator>
    </item>
    <item>
      <title>Accelerating Verified-Compiler Development with a Verified Rewriting Engine</title>
      <link>https://arxiv.org/abs/2205.00862</link>
      <description>arXiv:2205.00862v4 Announce Type: replace 
Abstract: Compilers are a prime target for formal verification, since compiler bugs invalidate higher-level correctness guarantees, but compiler changes may become more labor-intensive to implement, if they must come with proof patches. One appealing approach is to present compilers as sets of algebraic rewrite rules, which a generic engine can apply efficiently. Now each rewrite rule can be proved separately, with no need to revisit past proofs for other parts of the compiler. We present the first realization of this idea, in the form of a framework for the Coq proof assistant. Our new Coq command takes normal proved theorems and combines them automatically into fast compilers with proofs. We applied our framework to improve the Fiat Cryptography toolchain for generating cryptographic arithmetic, producing an extracted command-line compiler that is about 1000$\times$ faster while actually featuring simpler compiler-specific proofs.</description>
      <guid isPermaLink="false">oai:arXiv.org:2205.00862v4</guid>
      <category>cs.PL</category>
      <pubDate>Wed, 12 Mar 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <arxiv:DOI>10.4230/LIPIcs.ITP.2022.17</arxiv:DOI>
      <dc:creator>Jason Gross, Andres Erbsen, Jade Philipoom, Rajashree Agrawal, Adam Chlipala</dc:creator>
    </item>
    <item>
      <title>Synthesizing Programmatic Reinforcement Learning Policies with Large Language Model Guided Search</title>
      <link>https://arxiv.org/abs/2405.16450</link>
      <description>arXiv:2405.16450v3 Announce Type: replace-cross 
Abstract: Programmatic reinforcement learning (PRL) has been explored for representing policies through programs as a means to achieve interpretability and generalization. Despite promising outcomes, current state-of-the-art PRL methods are hindered by sample inefficiency, necessitating tens of millions of program-environment interactions. To tackle this challenge, we introduce a novel LLM-guided search framework (LLM-GS). Our key insight is to leverage the programming expertise and common sense reasoning of LLMs to enhance the efficiency of assumption-free, random-guessing search methods. We address the challenge of LLMs' inability to generate precise and grammatically correct programs in domain-specific languages (DSLs) by proposing a Pythonic-DSL strategy - an LLM is instructed to initially generate Python codes and then convert them into DSL programs. To further optimize the LLM-generated programs, we develop a search algorithm named Scheduled Hill Climbing, designed to efficiently explore the programmatic search space to improve the programs consistently. Experimental results in the Karel domain demonstrate our LLM-GS framework's superior effectiveness and efficiency. Extensive ablation studies further verify the critical role of our Pythonic-DSL strategy and Scheduled Hill Climbing algorithm. Moreover, we conduct experiments with two novel tasks, showing that LLM-GS enables users without programming skills and knowledge of the domain or DSL to describe the tasks in natural language to obtain performant programs.</description>
      <guid isPermaLink="false">oai:arXiv.org:2405.16450v3</guid>
      <category>cs.LG</category>
      <category>cs.AI</category>
      <category>cs.PL</category>
      <pubDate>Wed, 12 Mar 2025 00:00:00 -0400</pubDate>
      <arxiv:announce_type>replace-cross</arxiv:announce_type>
      <dc:rights>http://creativecommons.org/licenses/by/4.0/</dc:rights>
      <dc:creator>Max Liu, Chan-Hung Yu, Wei-Hsu Lee, Cheng-Wei Hung, Yen-Chun Chen, Shao-Hua Sun</dc:creator>
    </item>
  </channel>
</rss>
