<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:arxiv="http://arxiv.org/schemas/atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>cs.CG updates on arXiv.org</title>
    <link>http://rss.arxiv.org/rss/cs.CG</link>
    <description>cs.CG updates on the arXiv.org e-print archive.</description>
    <atom:link href="http://rss.arxiv.org/rss/cs.CG" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Mar 2025 02:55:11 +0000</lastBuildDate>
    <managingEditor>rss-help@arxiv.org</managingEditor>
    <pubDate>Thu, 06 Mar 2025 00:00:00 -0500</pubDate>
    <skipDays>
      <day>Sunday</day>
      <day>Saturday</day>
    </skipDays>
    <item>
      <title>Nearest Neighbor Searching in a Dynamic Simple Polygon</title>
      <link>https://arxiv.org/abs/2503.03435</link>
      <description>arXiv:2503.03435v1 Announce Type: new 
Abstract: In the nearest neighbor problem, we are given a set $S$ of point sites that we want to store such that we can find the nearest neighbor of a (new) query point efficiently. In the dynamic version of the problem, the goal is to design a data structure that supports both efficient queries and updates, i.e. insertions and deletions in $S$. This problem has been widely studied in various settings, ranging from points in the plane to more general distance measures and even points within simple polygons. When the sites do not live in the plane but in some domain, another dynamic problem arises: what happens if not the sites, but the domain itself is subject to updates?
  Updating sites often results in local changes to the solution or data structure, while updating the domain may incur many global changes. For example, in the closest pair problem, inserting a point only requires us to check if this point is in the new closest pair, while updating the domain might change the distances between most pairs of points in our set. Presumably, this is the reason that this form of dynamization has received much less attention. Only some basic problems, such as shortest paths and ray shooting, have been studied in this setting.
  Here, we tackle the nearest neighbor problem in a dynamic simple polygon. We allow insertions into both the set of sites and the polygon. An insertion in the polygon is the addition of a line segment starting at the boundary of the polygon. We present a near-linear size --in both the number of sites and the complexity of the polygon-- data structure with sublinear update and query time. This is the first nearest neighbor data structure that allows for updates to the domain.</description>
      <guid isPermaLink="false">oai:arXiv.org:2503.03435v1</guid>
      <category>cs.CG</category>
      <pubDate>Thu, 06 Mar 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Sarita de Berg, Frank Staals</dc:creator>
    </item>
    <item>
      <title>Saturated Drawings of Geometric Thickness k</title>
      <link>https://arxiv.org/abs/2503.03577</link>
      <description>arXiv:2503.03577v1 Announce Type: new 
Abstract: We investigate saturated geometric drawings of graphs with geometric thickness $k$, where no edge can be added without increasing $k$. We establish lower and upper bounds on the number of edges in such drawings if the vertices lie in convex position. We also study the more restricted version where edges are precolored, and for $k=2$ the case for vertices in non-convex position.</description>
      <guid isPermaLink="false">oai:arXiv.org:2503.03577v1</guid>
      <category>cs.CG</category>
      <pubDate>Thu, 06 Mar 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>new</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Patricia Bachmann, Anna Br\"otzner, Miriam Goetze, Philipp Kindermann, Matthias Pfretzschner, Soeren Terziadis</dc:creator>
    </item>
    <item>
      <title>Sublinear Data Structures for Nearest Neighbor in Ultra High Dimensions</title>
      <link>https://arxiv.org/abs/2503.03079</link>
      <description>arXiv:2503.03079v1 Announce Type: cross 
Abstract: Geometric data structures have been extensively studied in the regime where the dimension is much smaller than the number of input points. But in many scenarios in Machine Learning, the dimension can be much higher than the number of points and can be so high that the data structure might be unable to read and store all coordinates of the input and query points.
  Inspired by these scenarios and related studies in feature selection and explainable clustering, we initiate the study of geometric data structures in this ultra-high dimensional regime. Our focus is the {\em approximate nearest neighbor} problem.
  In this problem, we are given a set of $n$ points $C\subseteq \mathbb{R}^d$ and have to produce a {\em small} data structure that can {\em quickly} answer the following query: given $q\in \mathbb{R}^d$, return a point $c\in C$ that is approximately nearest to $q$.
  The main question in this paper is: {\em Is there a data structure with sublinear ($o(nd)$) space and sublinear ($o(d)$) query time when $d\gg n$?} In this paper, we answer this question affirmatively. We present $(1+\epsilon)$-approximation data structures with the following guarantees. For $\ell_1$- and $\ell_2$-norm distances: $\tilde O(n \log(d)/\mathrm{poly}(\epsilon))$ space and $\tilde O(n/\mathrm{poly}(\epsilon))$ query time. We show that these space and time bounds are tight up to $\mathrm{poly}{(\log n/\epsilon)}$ factors. For $\ell_p$-norm distances: $\tilde O(n^2 \log(d) (\log\log (n)/\epsilon)^p)$ space and $\tilde O\left(n(\log\log (n)/\epsilon)^p\right)$ query time.
  Via simple reductions, our data structures imply sublinear-in-$d$ data structures for some other geometric problems; e.g. approximate orthogonal range search, furthest neighbor, and give rise to a sublinear $O(1)$-approximate representation of $k$-median and $k$-means clustering.</description>
      <guid isPermaLink="false">oai:arXiv.org:2503.03079v1</guid>
      <category>cs.DS</category>
      <category>cs.CG</category>
      <pubDate>Thu, 06 Mar 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>cross</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Martin G. Herold, Danupon Nanongkai, Joachim Spoerhase, Nithin Varma, Zihang Wu</dc:creator>
    </item>
    <item>
      <title>How Packed Is It, Really?</title>
      <link>https://arxiv.org/abs/2105.10776</link>
      <description>arXiv:2105.10776v2 Announce Type: replace 
Abstract: The congestion of a curve is a measure of how much it zigzags around locally. More precisely, a curve $\pi$ is $c$-packed if the length of the curve lying inside any ball is at most $c$ times the radius of the ball, and its congestion is the minimum $c$ for which $\pi$ is $c$-packed. This paper presents a randomized $42$-approximation algorithm for computing the congestion of a curve (or any set of segments in the plane). It runs in $O( n \log^2 n)$ time and succeeds with high probability. Although the approximation factor is large, the running time improves over the previous fastest constant approximation algorithm, which took $\widetilde{O}(n^{4/3})$ time. We carefully combine new ideas with known techniques to obtain our new near-linear time algorithm.</description>
      <guid isPermaLink="false">oai:arXiv.org:2105.10776v2</guid>
      <category>cs.CG</category>
      <pubDate>Thu, 06 Mar 2025 00:00:00 -0500</pubDate>
      <arxiv:announce_type>replace</arxiv:announce_type>
      <dc:rights>http://arxiv.org/licenses/nonexclusive-distrib/1.0/</dc:rights>
      <dc:creator>Sariel Har-Peled, Timothy Zhou</dc:creator>
    </item>
  </channel>
</rss>
